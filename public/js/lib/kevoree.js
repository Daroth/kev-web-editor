define(
    [
        'kotlin/kotlin-lib-ecma3',
        'kotlin/kotlin-lib',
        'kotlin/kotlin-maps'
    ],

    function (Kotlin) {
        (function () {
            'use strict';
            var _f = {
                    f0: function (it) {
                        return it.nodeType === Node.ELEMENT_NODE;
                    },
                    f1: function (it) {
                        return it;
                    },
                    f2: function (name, it) {
                        return it.nodeType === Node.ELEMENT_NODE && Kotlin.equals(it.nodeName, name);
                    },
                    f3: function (it) {
                        return it;
                    },
                    f4: function (selector, it) {
                        return _.kotlin.dom.hasClass(it, selector.substring(1));
                    },
                    f5: function (selector, it) {
                        return _.kotlin.dom.hasClass(it, selector.substring(1));
                    },
                    f6: function (handler, e) {
                        if (Kotlin.isType(e, MouseEvent)) {
                            handler(e);
                        }
                    },
                    f7: function (block) {
                        return !block();
                    },
                    f8: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    f9: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fa: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    fb: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fc: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    fd: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fe: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    ff: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fg: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    fh: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fi: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    fj: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fk: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    fl: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fm: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    fn: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fo: function (predicate, it) {
                        return !predicate(it);
                    },
                    fp: function (it) {
                        if (it === null || it === undefined)
                            throw new Kotlin.IllegalArgumentException('null element in iterator ' + this.toString());
                        else
                            return it;
                    },
                    fq: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    fr: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fs: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    ft: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fu: function () {
                        return new Kotlin.ArrayList(0);
                    },
                    fv: function (f, x, y) {
                        var xr = f(x);
                        var yr = f(y);
                        return xr.compareTo(yr);
                    },
                    fw: function (elem) {
                        this.removeChilds(elem);
                    },
                    fx: function (childs) {
                        this.removeChilds(childs);
                    },
                    fy: function (el_0) {
                        this.removeChilds(el_0);
                    },
                    fz: function () {
                        this.set__dictionaryType(null);
                    },
                    f10: function (elem) {
                        this.removeRequired(elem);
                    },
                    f11: function (required) {
                        this.removeRequired(required);
                    },
                    f12: function (el_0) {
                        this.removeRequired(el_0);
                    },
                    f13: function (elem) {
                        this.removeIntegrationPatterns(elem);
                    },
                    f14: function (integrationPatterns) {
                        this.removeIntegrationPatterns(integrationPatterns);
                    },
                    f15: function (el_0) {
                        this.removeIntegrationPatterns(el_0);
                    },
                    f16: function () {
                        this.set__extraFonctionalProperties(null);
                    },
                    f17: function (elem) {
                        this.removeProvided(elem);
                    },
                    f18: function (provided) {
                        this.removeProvided(provided);
                    },
                    f19: function (el_0) {
                        this.removeProvided(el_0);
                    },
                    f1a: function () {
                        this.set__dictionary(null);
                    },
                    f1b: function (elem) {
                        this.removeParameters(elem);
                    },
                    f1c: function (parameters) {
                        this.removeParameters(parameters);
                    },
                    f1d: function (el_0) {
                        this.removeParameters(el_0);
                    },
                    f1e: function (elem) {
                        this.removeProvided(elem);
                    },
                    f1f: function (provided) {
                        this.removeProvided(provided);
                    },
                    f1g: function (el) {
                        this.removeProvided(el);
                    },
                    f1h: function (elem) {
                        this.removeRequired(elem);
                    },
                    f1i: function (required) {
                        this.removeRequired(required);
                    },
                    f1j: function (el) {
                        this.removeRequired(el);
                    },
                    f1k: function (elem) {
                        this.removeAttributes(elem);
                    },
                    f1l: function (attributes) {
                        this.removeAttributes(attributes);
                    },
                    f1m: function (el_0) {
                        this.removeAttributes(el_0);
                    },
                    f1n: function (elem) {
                        this.removeDefaultValues(elem);
                    },
                    f1o: function (defaultValues) {
                        this.removeDefaultValues(defaultValues);
                    },
                    f1p: function (el) {
                        this.removeDefaultValues(el);
                    },
                    f1q: function (elem) {
                        this.removeNodes(elem);
                    },
                    f1r: function (nodes) {
                        this.removeNodes(nodes);
                    },
                    f1s: function (el_0) {
                        this.removeNodes(el_0);
                    },
                    f1t: function (elem) {
                        this.removeTypeDefinitions(elem);
                    },
                    f1u: function (typeDefinitions) {
                        this.removeTypeDefinitions(typeDefinitions);
                    },
                    f1v: function (el_0) {
                        this.removeTypeDefinitions(el_0);
                    },
                    f1w: function (elem) {
                        this.removeRepositories(elem);
                    },
                    f1x: function (repositories) {
                        this.removeRepositories(repositories);
                    },
                    f1y: function (el_0) {
                        this.removeRepositories(el_0);
                    },
                    f1z: function (elem) {
                        this.removeDataTypes(elem);
                    },
                    f20: function (dataTypes) {
                        this.removeDataTypes(dataTypes);
                    },
                    f21: function (el_0) {
                        this.removeDataTypes(el_0);
                    },
                    f22: function (elem) {
                        this.removeLibraries(elem);
                    },
                    f23: function (libraries) {
                        this.removeLibraries(libraries);
                    },
                    f24: function (el_0) {
                        this.removeLibraries(el_0);
                    },
                    f25: function (elem) {
                        this.removeHubs(elem);
                    },
                    f26: function (hubs) {
                        this.removeHubs(hubs);
                    },
                    f27: function (el_0) {
                        this.removeHubs(el_0);
                    },
                    f28: function (elem) {
                        this.removeMBindings(elem);
                    },
                    f29: function (mBindings) {
                        this.removeMBindings(mBindings);
                    },
                    f2a: function (el) {
                        this.removeMBindings(el);
                    },
                    f2b: function (elem) {
                        this.removeDeployUnits(elem);
                    },
                    f2c: function (deployUnits) {
                        this.removeDeployUnits(deployUnits);
                    },
                    f2d: function (el_0) {
                        this.removeDeployUnits(el_0);
                    },
                    f2e: function (elem) {
                        this.removeNodeNetworks(elem);
                    },
                    f2f: function (nodeNetworks) {
                        this.removeNodeNetworks(nodeNetworks);
                    },
                    f2g: function (el) {
                        this.removeNodeNetworks(el);
                    },
                    f2h: function (elem) {
                        this.removeGroups(elem);
                    },
                    f2i: function (groups) {
                        this.removeGroups(groups);
                    },
                    f2j: function (el_0) {
                        this.removeGroups(el_0);
                    },
                    f2k: function (elem) {
                        this.removeGroupTypes(elem);
                    },
                    f2l: function (groupTypes) {
                        this.removeGroupTypes(groupTypes);
                    },
                    f2m: function (el_0) {
                        this.removeGroupTypes(el_0);
                    },
                    f2n: function (elem) {
                        this.removeAdaptationPrimitiveTypes(elem);
                    },
                    f2o: function (adaptationPrimitiveTypes) {
                        this.removeAdaptationPrimitiveTypes(adaptationPrimitiveTypes);
                    },
                    f2p: function (el_0) {
                        this.removeAdaptationPrimitiveTypes(el_0);
                    },
                    f2q: function (elem) {
                        this.removeLink(elem);
                    },
                    f2r: function (link) {
                        this.removeLink(link);
                    },
                    f2s: function (el) {
                        this.removeLink(el);
                    },
                    f2t: function (elem) {
                        this.removeMappings(elem);
                    },
                    f2u: function (mappings) {
                        this.removeMappings(mappings);
                    },
                    f2v: function (el) {
                        this.removeMappings(el);
                    },
                    f2w: function (elem) {
                        this.removeComponents(elem);
                    },
                    f2x: function (components) {
                        this.removeComponents(components);
                    },
                    f2y: function (el_0) {
                        this.removeComponents(el_0);
                    },
                    f2z: function (elem) {
                        this.removeOperations(elem);
                    },
                    f30: function (operations) {
                        this.removeOperations(operations);
                    },
                    f31: function (el_0) {
                        this.removeOperations(el_0);
                    },
                    f32: function (elem) {
                        this.removeValues(elem);
                    },
                    f33: function (values) {
                        this.removeValues(values);
                    },
                    f34: function (el) {
                        this.removeValues(el);
                    },
                    f35: function (elem) {
                        this.removeWires(elem);
                    },
                    f36: function (wires) {
                        this.removeWires(wires);
                    },
                    f37: function (el) {
                        this.removeWires(el);
                    },
                    f38: function (elem) {
                        this.removeExtraFonctionalProperties(elem);
                    },
                    f39: function (extraFonctionalProperties) {
                        this.removeExtraFonctionalProperties(extraFonctionalProperties);
                    },
                    f3a: function (el) {
                        this.removeExtraFonctionalProperties(el);
                    },
                    f3b: function (elem) {
                        this.removeNetworkProperties(elem);
                    },
                    f3c: function (networkProperties) {
                        this.removeNetworkProperties(networkProperties);
                    },
                    f3d: function (el_0) {
                        this.removeNetworkProperties(el_0);
                    }
                }
                , classes = function () {
                    var c0 = Kotlin.createTrait({
                        })
                        , c1i = Kotlin.createTrait({
                        })
                        , c18 = Kotlin.createTrait(c1i, {
                        })
                        , c1 = Kotlin.createTrait(c1i, c18, {
                        })
                        , c1r = Kotlin.createTrait(c1i, c18, {
                        })
                        , c2 = Kotlin.createTrait(c1i, c18, c1r, {
                        })
                        , c1h = Kotlin.createTrait({
                            get_internal_eContainer: function () {
                                return this.$internal_eContainer;
                            },
                            set_internal_eContainer: function (tmp$0) {
                                this.$internal_eContainer = tmp$0;
                            },
                            get_internal_unsetCmd: function () {
                                return this.$internal_unsetCmd;
                            },
                            set_internal_unsetCmd: function (tmp$0) {
                                this.$internal_unsetCmd = tmp$0;
                            },
                            eContainer: function () {
                                return this.get_internal_eContainer();
                            },
                            get_internal_containmentRefName: function () {
                                return this.$internal_containmentRefName;
                            },
                            set_internal_containmentRefName: function (tmp$0) {
                                this.$internal_containmentRefName = tmp$0;
                            },
                            setContainmentRefName: function (name) {
                                this.set_internal_containmentRefName(name);
                            },
                            get_internal_readOnlyElem: function () {
                                return this.$internal_readOnlyElem;
                            },
                            set_internal_readOnlyElem: function (tmp$0) {
                                this.$internal_readOnlyElem = tmp$0;
                            },
                            get_internal_recursive_readOnlyElem: function () {
                                return this.$internal_recursive_readOnlyElem;
                            },
                            set_internal_recursive_readOnlyElem: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem = tmp$0;
                            },
                            setInternalReadOnly: function () {
                                this.set_internal_readOnlyElem(true);
                            },
                            isReadOnly: function () {
                                return this.get_internal_readOnlyElem();
                            },
                            isRecursiveReadOnly: function () {
                                return this.get_internal_recursive_readOnlyElem();
                            },
                            setEContainer: function (container, unsetCmd) {
                                if (this.get_internal_readOnlyElem()) {
                                    return;
                                }
                                var tempUnsetCmd = this.get_internal_unsetCmd();
                                this.set_internal_unsetCmd(null);
                                if (tempUnsetCmd !== null && tempUnsetCmd !== undefined) {
                                    tempUnsetCmd();
                                }
                                this.set_internal_eContainer(container);
                                this.set_internal_unsetCmd(unsetCmd);
                            }
                        })
                        , c23 = Kotlin.createTrait(c1i, c18, {
                        })
                        , cx = Kotlin.createTrait(c1h, c18, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                this.setInternalReadOnly();
                            },
                            get__name: function () {
                                return this.$_name;
                            },
                            set__name: function (tmp$0) {
                                this.$_name = tmp$0;
                            },
                            delete: function () {
                            },
                            getName: function () {
                                return this.get__name();
                            },
                            setName: function (name) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__name(name);
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createNamedElement();
                                selfObjectClone.setName(this.getName());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findByPath: function (query) {
                                return null;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.NamedElement)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c3 = Kotlin.createTrait(c1h, c23, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getChilds().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubparent = this.getParent();
                                if (subsubsubsubparent !== null && subsubsubsubparent !== undefined) {
                                    subsubsubsubparent.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            get__childs_java_cache: function () {
                                return this.$_childs_java_cache;
                            },
                            set__childs_java_cache: function (tmp$0) {
                                this.$_childs_java_cache = tmp$0;
                            },
                            get__childs: function () {
                                return this.$_childs;
                            },
                            get__parent: function () {
                                return this.$_parent;
                            },
                            set__parent: function (tmp$0) {
                                this.$_parent = tmp$0;
                            },
                            delete: function () {
                                {
                                    var tmp$0 = _.kotlin.iterator(this.get__childs());
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        _.kotlin.get_value(el).delete();
                                    }
                                }
                                var tmp$1;
                                (tmp$1 = this.get__childs()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__childs_java_cache(null);
                                this.set__parent(null);
                            },
                            getChilds: function () {
                                return _.kotlin.toList(this.get__childs().values());
                            },
                            setChilds: function (childs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (childs === null || childs === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__childs_java_cache(null);
                                if (!Kotlin.equals(this.get__childs(), childs)) {
                                    this.get__childs().clear();
                                    {
                                        var tmp$0 = childs.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__childs().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = childs.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.fw, this, elem));
                                            elem.setContainmentRefName('childs');
                                        }
                                    }
                                }
                            },
                            addChilds: function (childs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__childs_java_cache(null);
                                childs.setEContainer(this, Kotlin.b0(_f.fx, this, childs));
                                childs.setContainmentRefName('childs');
                                this.get__childs().put(childs.getName(), childs);
                            },
                            addAllChilds: function (childs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__childs_java_cache(null);
                                {
                                    var tmp$0 = childs.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__childs().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = childs.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.fy, this, el_0));
                                        el_0.setContainmentRefName('childs');
                                    }
                                }
                            },
                            removeChilds: function (childs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__childs_java_cache(null);
                                if (this.get__childs().size() !== 0 && this.get__childs().containsKey(childs.getName())) {
                                    this.get__childs().remove(childs.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = childs) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = childs) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllChilds: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getChilds()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__childs_java_cache(null);
                                this.get__childs().clear();
                            },
                            getParent: function () {
                                return this.get__parent();
                            },
                            setParent: function (parent) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__parent(), parent)) {
                                    this.set__parent(parent);
                                }
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createNamespace();
                                selfObjectClone.setName(this.getName());
                                subResult.put(this, selfObjectClone);
                                {
                                    var tmp$0 = this.getChilds().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getChilds().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addChilds(sub);
                                        }
                                        else {
                                            clonedSelfObject.addChilds(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getParent() !== null && this.getParent() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getParent()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setParent((tmp$2 = this.getParent()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setParent(addrs.get(this.getParent()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getChilds().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        sub_0.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findChildsByID: function (key) {
                                return this.get__childs().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 3; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'childs') {
                                            {
                                                var objFound = this.findChildsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$2 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'parent') {
                                            {
                                                tmp$2 = this.getParent();
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.Namespace)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (this.getChilds().size() !== similarObjCasted.getChilds().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getChilds().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var foundedElement = similarObjCasted.findChildsByID(subElement.getName());
                                        if (foundedElement === null || foundedElement === undefined || !Kotlin.equals(foundedElement, subElement)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c1t = Kotlin.createTrait(c1i, c18, {
                        })
                        , c1a = Kotlin.createTrait(c1i, c1t, {
                        })
                        , c24 = Kotlin.createTrait(c1i, c1a, {
                        })
                        , cw = Kotlin.createTrait(c1h, c1t, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$1 = this.getSuperTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__factoryBean: function () {
                                return this.$_factoryBean;
                            },
                            set__factoryBean: function (tmp$0) {
                                this.$_factoryBean = tmp$0;
                            },
                            get__bean: function () {
                                return this.$_bean;
                            },
                            set__bean: function (tmp$0) {
                                this.$_bean = tmp$0;
                            },
                            get__deployUnits_java_cache: function () {
                                return this.$_deployUnits_java_cache;
                            },
                            set__deployUnits_java_cache: function (tmp$0) {
                                this.$_deployUnits_java_cache = tmp$0;
                            },
                            get__deployUnits: function () {
                                return this.$_deployUnits;
                            },
                            get__dictionaryType: function () {
                                return this.$_dictionaryType;
                            },
                            set__dictionaryType: function (tmp$0) {
                                this.$_dictionaryType = tmp$0;
                            },
                            get__superTypes_java_cache: function () {
                                return this.$_superTypes_java_cache;
                            },
                            set__superTypes_java_cache: function (tmp$0) {
                                this.$_superTypes_java_cache = tmp$0;
                            },
                            get__superTypes: function () {
                                return this.$_superTypes;
                            },
                            delete: function () {
                                var tmp$0, tmp$1, tmp$2;
                                (tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                                (tmp$1 = this.get__deployUnits()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__deployUnits_java_cache(null);
                                this.set__dictionaryType(null);
                                (tmp$2 = this.get__superTypes()) !== null && tmp$2 !== undefined ? tmp$2.clear() : null;
                                this.set__superTypes_java_cache(null);
                            },
                            getFactoryBean: function () {
                                return this.get__factoryBean();
                            },
                            setFactoryBean: function (factoryBean) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__factoryBean(factoryBean);
                            },
                            getBean: function () {
                                return this.get__bean();
                            },
                            setBean: function (bean) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__bean(bean);
                            },
                            getDeployUnits: function () {
                                return _.kotlin.toList(this.get__deployUnits().values());
                            },
                            setDeployUnits: function (deployUnits) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (deployUnits === null || deployUnits === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__deployUnits_java_cache(null);
                                if (!Kotlin.equals(this.get__deployUnits(), deployUnits)) {
                                    this.get__deployUnits().clear();
                                    {
                                        var tmp$0 = deployUnits.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__deployUnits().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addDeployUnits: function (deployUnits) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__deployUnits_java_cache(null);
                                this.get__deployUnits().put(deployUnits.getName(), deployUnits);
                            },
                            addAllDeployUnits: function (deployUnits) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__deployUnits_java_cache(null);
                                {
                                    var tmp$0 = deployUnits.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__deployUnits().put(el.getName(), el);
                                    }
                                }
                            },
                            removeDeployUnits: function (deployUnits) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__deployUnits_java_cache(null);
                                if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnits.getName())) {
                                    this.get__deployUnits().remove(deployUnits.getName());
                                }
                            },
                            removeAllDeployUnits: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__deployUnits_java_cache(null);
                                this.get__deployUnits().clear();
                            },
                            getDictionaryType: function () {
                                return this.get__dictionaryType();
                            },
                            setDictionaryType: function (dictionaryType) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__dictionaryType(), dictionaryType)) {
                                    if (this.get__dictionaryType() !== null && this.get__dictionaryType() !== undefined) {
                                        var tmp$0, tmp$1;
                                        ((tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                        ((tmp$1 = this.get__dictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                    }
                                    if (dictionaryType !== null && dictionaryType !== undefined) {
                                        dictionaryType.setEContainer(this, Kotlin.b3(_f.fz, this));
                                        dictionaryType.setContainmentRefName('dictionaryType');
                                    }
                                    this.set__dictionaryType(dictionaryType);
                                }
                            },
                            getSuperTypes: function () {
                                return _.kotlin.toList(this.get__superTypes().values());
                            },
                            setSuperTypes: function (superTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (superTypes === null || superTypes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__superTypes_java_cache(null);
                                if (!Kotlin.equals(this.get__superTypes(), superTypes)) {
                                    this.get__superTypes().clear();
                                    {
                                        var tmp$0 = superTypes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__superTypes().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addSuperTypes: function (superTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__superTypes_java_cache(null);
                                this.get__superTypes().put(superTypes.getName(), superTypes);
                            },
                            addAllSuperTypes: function (superTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__superTypes_java_cache(null);
                                {
                                    var tmp$0 = superTypes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__superTypes().put(el.getName(), el);
                                    }
                                }
                            },
                            removeSuperTypes: function (superTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__superTypes_java_cache(null);
                                if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypes.getName())) {
                                    this.get__superTypes().remove(superTypes.getName());
                                }
                            },
                            removeAllSuperTypes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__superTypes_java_cache(null);
                                this.get__superTypes().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createTypeDefinition();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setFactoryBean(this.getFactoryBean());
                                selfObjectClone.setBean(this.getBean());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getDictionaryType() !== null && this.getDictionaryType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getDictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionaryType(addrs.get(this.getDictionaryType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getSuperTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSuperTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addSuperTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                var subsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubdictionaryType !== null && subsubsubdictionaryType !== undefined) {
                                    subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findDeployUnitsByID: function (key) {
                                return this.get__deployUnits().get(key);
                            },
                            findSuperTypesByID: function (key) {
                                return this.get__superTypes().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 3; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'deployUnits') {
                                            {
                                                var objFound = this.findDeployUnitsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$2 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'superTypes') {
                                            {
                                                var objFound_0 = this.findSuperTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_0 !== null && objFound_0 !== undefined)) {
                                                    tmp$2 = objFound_0.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_0;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.TypeDefinition)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c10 = Kotlin.createTrait(c1h, c1a, cw, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$1 = this.getSuperTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__startMethod: function () {
                                return this.$_startMethod;
                            },
                            set__startMethod: function (tmp$0) {
                                this.$_startMethod = tmp$0;
                            },
                            get__stopMethod: function () {
                                return this.$_stopMethod;
                            },
                            set__stopMethod: function (tmp$0) {
                                this.$_stopMethod = tmp$0;
                            },
                            get__updateMethod: function () {
                                return this.$_updateMethod;
                            },
                            set__updateMethod: function (tmp$0) {
                                this.$_updateMethod = tmp$0;
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                            },
                            getStartMethod: function () {
                                return this.get__startMethod();
                            },
                            setStartMethod: function (startMethod) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__startMethod(startMethod);
                            },
                            getStopMethod: function () {
                                return this.get__stopMethod();
                            },
                            setStopMethod: function (stopMethod) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__stopMethod(stopMethod);
                            },
                            getUpdateMethod: function () {
                                return this.get__updateMethod();
                            },
                            setUpdateMethod: function (updateMethod) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__updateMethod(updateMethod);
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createLifeCycleTypeDefinition();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setFactoryBean(this.getFactoryBean());
                                selfObjectClone.setBean(this.getBean());
                                selfObjectClone.setStartMethod(this.getStartMethod());
                                selfObjectClone.setStopMethod(this.getStopMethod());
                                selfObjectClone.setUpdateMethod(this.getUpdateMethod());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getDictionaryType() !== null && this.getDictionaryType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getDictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionaryType(addrs.get(this.getDictionaryType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getSuperTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSuperTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addSuperTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                var subsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubdictionaryType !== null && subsubsubdictionaryType !== undefined) {
                                    subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.LifeCycleTypeDefinition)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c4 = Kotlin.createTrait(c1h, c24, c10, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$1 = this.getSuperTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$2 = this.getRequired().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$3 = this.getIntegrationPatterns().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_2 = tmp$3.next();
                                        sub_2.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
                                if (subsubsubsubextraFonctionalProperties !== null && subsubsubsubextraFonctionalProperties !== undefined) {
                                    subsubsubsubextraFonctionalProperties.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$4 = this.getProvided().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub_3 = tmp$4.next();
                                        sub_3.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__required_java_cache: function () {
                                return this.$_required_java_cache;
                            },
                            set__required_java_cache: function (tmp$0) {
                                this.$_required_java_cache = tmp$0;
                            },
                            get__required: function () {
                                return this.$_required;
                            },
                            get__integrationPatterns_java_cache: function () {
                                return this.$_integrationPatterns_java_cache;
                            },
                            set__integrationPatterns_java_cache: function (tmp$0) {
                                this.$_integrationPatterns_java_cache = tmp$0;
                            },
                            get__integrationPatterns: function () {
                                return this.$_integrationPatterns;
                            },
                            get__extraFonctionalProperties: function () {
                                return this.$_extraFonctionalProperties;
                            },
                            set__extraFonctionalProperties: function (tmp$0) {
                                this.$_extraFonctionalProperties = tmp$0;
                            },
                            get__provided_java_cache: function () {
                                return this.$_provided_java_cache;
                            },
                            set__provided_java_cache: function (tmp$0) {
                                this.$_provided_java_cache = tmp$0;
                            },
                            get__provided: function () {
                                return this.$_provided;
                            },
                            delete: function () {
                                var tmp$0, tmp$3, tmp$5, tmp$6, tmp$7;
                                (tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                                {
                                    var tmp$1 = _.kotlin.iterator(this.get__required());
                                    while (tmp$1.hasNext()) {
                                        var el = tmp$1.next();
                                        _.kotlin.get_value(el).delete();
                                    }
                                }
                                {
                                    var tmp$2 = _.kotlin.iterator(this.get__integrationPatterns());
                                    while (tmp$2.hasNext()) {
                                        var el_0 = tmp$2.next();
                                        _.kotlin.get_value(el_0).delete();
                                    }
                                }
                                (tmp$3 = this.get__extraFonctionalProperties()) !== null && tmp$3 !== undefined ? tmp$3.delete() : null;
                                {
                                    var tmp$4 = _.kotlin.iterator(this.get__provided());
                                    while (tmp$4.hasNext()) {
                                        var el_1 = tmp$4.next();
                                        _.kotlin.get_value(el_1).delete();
                                    }
                                }
                                (tmp$5 = this.get__required()) !== null && tmp$5 !== undefined ? tmp$5.clear() : null;
                                this.set__required_java_cache(null);
                                (tmp$6 = this.get__integrationPatterns()) !== null && tmp$6 !== undefined ? tmp$6.clear() : null;
                                this.set__integrationPatterns_java_cache(null);
                                this.set__extraFonctionalProperties(null);
                                (tmp$7 = this.get__provided()) !== null && tmp$7 !== undefined ? tmp$7.clear() : null;
                                this.set__provided_java_cache(null);
                            },
                            getRequired: function () {
                                return _.kotlin.toList(this.get__required().values());
                            },
                            setRequired: function (required) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (required === null || required === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__required_java_cache(null);
                                if (!Kotlin.equals(this.get__required(), required)) {
                                    this.get__required().clear();
                                    {
                                        var tmp$0 = required.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__required().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = required.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f10, this, elem));
                                            elem.setContainmentRefName('required');
                                        }
                                    }
                                }
                            },
                            addRequired: function (required) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__required_java_cache(null);
                                required.setEContainer(this, Kotlin.b0(_f.f11, this, required));
                                required.setContainmentRefName('required');
                                this.get__required().put(required.getName(), required);
                            },
                            addAllRequired: function (required) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__required_java_cache(null);
                                {
                                    var tmp$0 = required.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__required().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = required.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f12, this, el_0));
                                        el_0.setContainmentRefName('required');
                                    }
                                }
                            },
                            removeRequired: function (required) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__required_java_cache(null);
                                if (this.get__required().size() !== 0 && this.get__required().containsKey(required.getName())) {
                                    this.get__required().remove(required.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = required) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = required) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllRequired: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getRequired()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__required_java_cache(null);
                                this.get__required().clear();
                            },
                            getIntegrationPatterns: function () {
                                return _.kotlin.toList(this.get__integrationPatterns().values());
                            },
                            setIntegrationPatterns: function (integrationPatterns) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (integrationPatterns === null || integrationPatterns === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__integrationPatterns_java_cache(null);
                                if (!Kotlin.equals(this.get__integrationPatterns(), integrationPatterns)) {
                                    this.get__integrationPatterns().clear();
                                    {
                                        var tmp$0 = integrationPatterns.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__integrationPatterns().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = integrationPatterns.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f13, this, elem));
                                            elem.setContainmentRefName('integrationPatterns');
                                        }
                                    }
                                }
                            },
                            addIntegrationPatterns: function (integrationPatterns) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__integrationPatterns_java_cache(null);
                                integrationPatterns.setEContainer(this, Kotlin.b0(_f.f14, this, integrationPatterns));
                                integrationPatterns.setContainmentRefName('integrationPatterns');
                                this.get__integrationPatterns().put(integrationPatterns.getName(), integrationPatterns);
                            },
                            addAllIntegrationPatterns: function (integrationPatterns) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__integrationPatterns_java_cache(null);
                                {
                                    var tmp$0 = integrationPatterns.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__integrationPatterns().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = integrationPatterns.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f15, this, el_0));
                                        el_0.setContainmentRefName('integrationPatterns');
                                    }
                                }
                            },
                            removeIntegrationPatterns: function (integrationPatterns) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__integrationPatterns_java_cache(null);
                                if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey(integrationPatterns.getName())) {
                                    this.get__integrationPatterns().remove(integrationPatterns.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = integrationPatterns) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = integrationPatterns) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllIntegrationPatterns: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getIntegrationPatterns()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__integrationPatterns_java_cache(null);
                                this.get__integrationPatterns().clear();
                            },
                            getExtraFonctionalProperties: function () {
                                return this.get__extraFonctionalProperties();
                            },
                            setExtraFonctionalProperties: function (extraFonctionalProperties) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__extraFonctionalProperties(), extraFonctionalProperties)) {
                                    if (this.get__extraFonctionalProperties() !== null && this.get__extraFonctionalProperties() !== undefined) {
                                        var tmp$0, tmp$1;
                                        ((tmp$0 = this.get__extraFonctionalProperties()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                        ((tmp$1 = this.get__extraFonctionalProperties()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                    }
                                    if (extraFonctionalProperties !== null && extraFonctionalProperties !== undefined) {
                                        extraFonctionalProperties.setEContainer(this, Kotlin.b3(_f.f16, this));
                                        extraFonctionalProperties.setContainmentRefName('extraFonctionalProperties');
                                    }
                                    this.set__extraFonctionalProperties(extraFonctionalProperties);
                                }
                            },
                            getProvided: function () {
                                return _.kotlin.toList(this.get__provided().values());
                            },
                            setProvided: function (provided) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (provided === null || provided === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__provided_java_cache(null);
                                if (!Kotlin.equals(this.get__provided(), provided)) {
                                    this.get__provided().clear();
                                    {
                                        var tmp$0 = provided.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__provided().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = provided.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f17, this, elem));
                                            elem.setContainmentRefName('provided');
                                        }
                                    }
                                }
                            },
                            addProvided: function (provided) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__provided_java_cache(null);
                                provided.setEContainer(this, Kotlin.b0(_f.f18, this, provided));
                                provided.setContainmentRefName('provided');
                                this.get__provided().put(provided.getName(), provided);
                            },
                            addAllProvided: function (provided) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__provided_java_cache(null);
                                {
                                    var tmp$0 = provided.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__provided().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = provided.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f19, this, el_0));
                                        el_0.setContainmentRefName('provided');
                                    }
                                }
                            },
                            removeProvided: function (provided) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__provided_java_cache(null);
                                if (this.get__provided().size() !== 0 && this.get__provided().containsKey(provided.getName())) {
                                    this.get__provided().remove(provided.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = provided) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = provided) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllProvided: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getProvided()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__provided_java_cache(null);
                                this.get__provided().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createComponentType();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setFactoryBean(this.getFactoryBean());
                                selfObjectClone.setBean(this.getBean());
                                selfObjectClone.setStartMethod(this.getStartMethod());
                                selfObjectClone.setStopMethod(this.getStopMethod());
                                selfObjectClone.setUpdateMethod(this.getUpdateMethod());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
                                }
                                {
                                    var tmp$0 = this.getRequired().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$1 = this.getIntegrationPatterns().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                var subsubsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
                                if (subsubsubsubextraFonctionalProperties !== null && subsubsubsubextraFonctionalProperties !== undefined) {
                                    subsubsubsubextraFonctionalProperties.getClonelazy(subResult, _factories, mutableOnly);
                                }
                                {
                                    var tmp$2 = this.getProvided().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getDictionaryType() !== null && this.getDictionaryType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getDictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionaryType(addrs.get(this.getDictionaryType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getSuperTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSuperTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addSuperTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                {
                                    var tmp$4 = this.getRequired().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub_1 = tmp$4.next();
                                        if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                                            clonedSelfObject.addRequired(sub_1);
                                        }
                                        else {
                                            clonedSelfObject.addRequired(addrs.get(sub_1));
                                        }
                                    }
                                }
                                {
                                    var tmp$5 = this.getIntegrationPatterns().iterator();
                                    while (tmp$5.hasNext()) {
                                        var sub_2 = tmp$5.next();
                                        if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                                            clonedSelfObject.addIntegrationPatterns(sub_2);
                                        }
                                        else {
                                            clonedSelfObject.addIntegrationPatterns(addrs.get(sub_2));
                                        }
                                    }
                                }
                                if (this.getExtraFonctionalProperties() !== null && this.getExtraFonctionalProperties() !== undefined) {
                                    var tmp$6;
                                    if (mutableOnly && ((tmp$6 = this.getExtraFonctionalProperties()) !== null && tmp$6 !== undefined ? tmp$6 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$7;
                                        clonedSelfObject.setExtraFonctionalProperties((tmp$7 = this.getExtraFonctionalProperties()) !== null && tmp$7 !== undefined ? tmp$7 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setExtraFonctionalProperties(addrs.get(this.getExtraFonctionalProperties()));
                                    }
                                }
                                {
                                    var tmp$8 = this.getProvided().iterator();
                                    while (tmp$8.hasNext()) {
                                        var sub_3 = tmp$8.next();
                                        if (mutableOnly && sub_3.isRecursiveReadOnly()) {
                                            clonedSelfObject.addProvided(sub_3);
                                        }
                                        else {
                                            clonedSelfObject.addProvided(addrs.get(sub_3));
                                        }
                                    }
                                }
                                var subsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubdictionaryType !== null && subsubsubdictionaryType !== undefined) {
                                    subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
                                }
                                {
                                    var tmp$9 = this.getRequired().iterator();
                                    while (tmp$9.hasNext()) {
                                        var sub_4 = tmp$9.next();
                                        sub_4.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$10 = this.getIntegrationPatterns().iterator();
                                    while (tmp$10.hasNext()) {
                                        var sub_5 = tmp$10.next();
                                        sub_5.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                var subsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
                                if (subsubsubextraFonctionalProperties !== null && subsubsubextraFonctionalProperties !== undefined) {
                                    subsubsubextraFonctionalProperties.resolve(addrs, readOnly, mutableOnly);
                                }
                                {
                                    var tmp$11 = this.getProvided().iterator();
                                    while (tmp$11.hasNext()) {
                                        var sub_6 = tmp$11.next();
                                        sub_6.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findRequiredByID: function (key) {
                                return this.get__required().get(key);
                            },
                            findIntegrationPatternsByID: function (key) {
                                return this.get__integrationPatterns().get(key);
                            },
                            findProvidedByID: function (key) {
                                return this.get__provided().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 6; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'deployUnits') {
                                            {
                                                var objFound = this.findDeployUnitsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$2 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'superTypes') {
                                            {
                                                var objFound_0 = this.findSuperTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_0 !== null && objFound_0 !== undefined)) {
                                                    tmp$2 = objFound_0.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_0;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2)
                                        if (tmp$0 === 'required') {
                                            {
                                                var objFound_1 = this.findRequiredByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_1 !== null && objFound_1 !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$2 = objFound_1;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 3)
                                        if (tmp$0 === 'integrationPatterns') {
                                            {
                                                var objFound_2 = this.findIntegrationPatternsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_2 !== null && objFound_2 !== undefined)) {
                                                    tmp$2 = objFound_2.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_2;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 4)
                                        if (tmp$0 === 'provided') {
                                            {
                                                var objFound_3 = this.findProvidedByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_3 !== null && objFound_3 !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$2 = objFound_3;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 5) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.ComponentType)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                                    return false;
                                }
                                if (this.getRequired().size() !== similarObjCasted.getRequired().size()) {
                                    return false;
                                }
                                if (this.getIntegrationPatterns().size() !== similarObjCasted.getIntegrationPatterns().size()) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getExtraFonctionalProperties(), similarObjCasted.getExtraFonctionalProperties())) {
                                    return false;
                                }
                                if (this.getProvided().size() !== similarObjCasted.getProvided().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getRequired().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var foundedElement = similarObjCasted.findRequiredByID(subElement.getName());
                                        if (foundedElement === null || foundedElement === undefined || !Kotlin.equals(foundedElement, subElement)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$1 = this.getIntegrationPatterns().iterator();
                                    while (tmp$1.hasNext()) {
                                        var subElement_0 = tmp$1.next();
                                        var foundedElement_0 = similarObjCasted.findIntegrationPatternsByID(subElement_0.getName());
                                        if (foundedElement_0 === null || foundedElement_0 === undefined || !Kotlin.equals(foundedElement_0, subElement_0)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$2 = this.getProvided().iterator();
                                    while (tmp$2.hasNext()) {
                                        var subElement_1 = tmp$2.next();
                                        var foundedElement_1 = similarObjCasted.findProvidedByID(subElement_1.getName());
                                        if (foundedElement_1 === null || foundedElement_1 === undefined || !Kotlin.equals(foundedElement_1, subElement_1)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c17 = Kotlin.createTrait(c1i, c1a, {
                        })
                        , c5 = Kotlin.createTrait(c1h, c17, c10, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$1 = this.getSuperTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createGroupType();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setFactoryBean(this.getFactoryBean());
                                selfObjectClone.setBean(this.getBean());
                                selfObjectClone.setStartMethod(this.getStartMethod());
                                selfObjectClone.setStopMethod(this.getStopMethod());
                                selfObjectClone.setUpdateMethod(this.getUpdateMethod());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getDictionaryType() !== null && this.getDictionaryType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getDictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionaryType(addrs.get(this.getDictionaryType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getSuperTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSuperTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addSuperTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                var subsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubdictionaryType !== null && subsubsubdictionaryType !== undefined) {
                                    subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.GroupType)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1j = Kotlin.createTrait(c1i, c18, {
                        })
                        , c6 = Kotlin.createTrait(c1h, c1j, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getGenericTypes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__genericTypes_java_cache: function () {
                                return this.$_genericTypes_java_cache;
                            },
                            set__genericTypes_java_cache: function (tmp$0) {
                                this.$_genericTypes_java_cache = tmp$0;
                            },
                            get__genericTypes: function () {
                                return this.$_genericTypes;
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__genericTypes()) !== null && tmp$0 !== undefined ? tmp$0.clear() : null;
                                this.set__genericTypes_java_cache(null);
                            },
                            getGenericTypes: function () {
                                return _.kotlin.toList(this.get__genericTypes().values());
                            },
                            setGenericTypes: function (genericTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (genericTypes === null || genericTypes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__genericTypes_java_cache(null);
                                if (!Kotlin.equals(this.get__genericTypes(), genericTypes)) {
                                    this.get__genericTypes().clear();
                                    {
                                        var tmp$0 = genericTypes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__genericTypes().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addGenericTypes: function (genericTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__genericTypes_java_cache(null);
                                this.get__genericTypes().put(genericTypes.getName(), genericTypes);
                            },
                            addAllGenericTypes: function (genericTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__genericTypes_java_cache(null);
                                {
                                    var tmp$0 = genericTypes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__genericTypes().put(el.getName(), el);
                                    }
                                }
                            },
                            removeGenericTypes: function (genericTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__genericTypes_java_cache(null);
                                if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey(genericTypes.getName())) {
                                    this.get__genericTypes().remove(genericTypes.getName());
                                }
                            },
                            removeAllGenericTypes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__genericTypes_java_cache(null);
                                this.get__genericTypes().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createTypedElement();
                                selfObjectClone.setName(this.getName());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getGenericTypes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addGenericTypes(sub);
                                        }
                                        else {
                                            clonedSelfObject.addGenericTypes(addrs.get(sub));
                                        }
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findGenericTypesByID: function (key) {
                                return this.get__genericTypes().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = 'genericTypes';
                                var optionalDetected = firstSepIndex !== 12;
                                if (optionalDetected) {
                                    extraReadChar = extraReadChar - 2;
                                }
                                if (_.js.indexOf(query, '{') === 0) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    if (optionalDetected) {
                                        if (_.js.indexOf(query, '/') !== -1) {
                                            queryID = query.substring(0, _.js.indexOf(query, '/'));
                                        }
                                        else {
                                            queryID = query.substring(0, _.js.get_size(query));
                                        }
                                    }
                                    else {
                                        queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                    }
                                }
                                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
                                tmp$0 = query;
                                if (optionalDetected) {
                                    tmp$1 = 0;
                                }
                                else {
                                    tmp$1 = _.js.get_size(relationName);
                                }
                                var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                for (tmp$3 = 0, tmp$2 = relationName; tmp$3 < 2; ++tmp$3) {
                                    if (tmp$3 === 0)
                                        if (tmp$2 === 'genericTypes') {
                                            {
                                                var objFound = this.findGenericTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$4 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$4 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$3 === 1) {
                                        tmp$4 = null;
                                    }
                                }
                                return tmp$4;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.TypedElement)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c20 = Kotlin.createTrait(c1i, c1r, {
                        })
                        , c11 = Kotlin.createTrait(c1h, c1r, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                var subsubsubsubtypeDefinition = this.getTypeDefinition();
                                if (subsubsubsubtypeDefinition !== null && subsubsubsubtypeDefinition !== undefined) {
                                    subsubsubsubtypeDefinition.setRecursiveReadOnly();
                                }
                                var subsubsubsubdictionary = this.getDictionary();
                                if (subsubsubsubdictionary !== null && subsubsubsubdictionary !== undefined) {
                                    subsubsubsubdictionary.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            get__metaData: function () {
                                return this.$_metaData;
                            },
                            set__metaData: function (tmp$0) {
                                this.$_metaData = tmp$0;
                            },
                            get__typeDefinition: function () {
                                return this.$_typeDefinition;
                            },
                            set__typeDefinition: function (tmp$0) {
                                this.$_typeDefinition = tmp$0;
                            },
                            get__dictionary: function () {
                                return this.$_dictionary;
                            },
                            set__dictionary: function (tmp$0) {
                                this.$_dictionary = tmp$0;
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__dictionary()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                                this.set__typeDefinition(null);
                                this.set__dictionary(null);
                            },
                            getMetaData: function () {
                                return this.get__metaData();
                            },
                            setMetaData: function (metaData) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__metaData(metaData);
                            },
                            getTypeDefinition: function () {
                                return this.get__typeDefinition();
                            },
                            setTypeDefinition: function (typeDefinition) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__typeDefinition(), typeDefinition)) {
                                    this.set__typeDefinition(typeDefinition);
                                }
                            },
                            getDictionary: function () {
                                return this.get__dictionary();
                            },
                            setDictionary: function (dictionary) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__dictionary(), dictionary)) {
                                    if (this.get__dictionary() !== null && this.get__dictionary() !== undefined) {
                                        var tmp$0, tmp$1;
                                        ((tmp$0 = this.get__dictionary()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                        ((tmp$1 = this.get__dictionary()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                    }
                                    if (dictionary !== null && dictionary !== undefined) {
                                        dictionary.setEContainer(this, Kotlin.b3(_f.f1a, this));
                                        dictionary.setContainmentRefName('dictionary');
                                    }
                                    this.set__dictionary(dictionary);
                                }
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createInstance();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setMetaData(this.getMetaData());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionary = this.getDictionary();
                                if (subsubsubsubdictionary !== null && subsubsubsubdictionary !== undefined) {
                                    subsubsubsubdictionary.getClonelazy(subResult, _factories, mutableOnly);
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (this.getTypeDefinition() !== null && this.getTypeDefinition() !== undefined) {
                                    var tmp$0;
                                    if (mutableOnly && ((tmp$0 = this.getTypeDefinition()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$1;
                                        clonedSelfObject.setTypeDefinition((tmp$1 = this.getTypeDefinition()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setTypeDefinition(addrs.get(this.getTypeDefinition()));
                                    }
                                }
                                if (this.getDictionary() !== null && this.getDictionary() !== undefined) {
                                    var tmp$2;
                                    if (mutableOnly && ((tmp$2 = this.getDictionary()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$3;
                                        clonedSelfObject.setDictionary((tmp$3 = this.getDictionary()) !== null && tmp$3 !== undefined ? tmp$3 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionary(addrs.get(this.getDictionary()));
                                    }
                                }
                                var subsubsubdictionary = this.getDictionary();
                                if (subsubsubdictionary !== null && subsubsubdictionary !== undefined) {
                                    subsubsubdictionary.resolve(addrs, readOnly, mutableOnly);
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.Instance)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getMetaData(), similarObjCasted.getMetaData())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionary(), similarObjCasted.getDictionary())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c7 = Kotlin.createTrait(c1h, c20, c11, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                var subsubsubsubtypeDefinition = this.getTypeDefinition();
                                if (subsubsubsubtypeDefinition !== null && subsubsubsubtypeDefinition !== undefined) {
                                    subsubsubsubtypeDefinition.setRecursiveReadOnly();
                                }
                                var subsubsubsubdictionary = this.getDictionary();
                                if (subsubsubsubdictionary !== null && subsubsubsubdictionary !== undefined) {
                                    subsubsubsubdictionary.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$0 = this.getSubNodes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__subNodes_java_cache: function () {
                                return this.$_subNodes_java_cache;
                            },
                            set__subNodes_java_cache: function (tmp$0) {
                                this.$_subNodes_java_cache = tmp$0;
                            },
                            get__subNodes: function () {
                                return this.$_subNodes;
                            },
                            delete: function () {
                                var tmp$0, tmp$1;
                                (tmp$0 = this.get__dictionary()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                                (tmp$1 = this.get__subNodes()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__subNodes_java_cache(null);
                            },
                            getSubNodes: function () {
                                return _.kotlin.toList(this.get__subNodes().values());
                            },
                            setSubNodes: function (subNodes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (subNodes === null || subNodes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__subNodes_java_cache(null);
                                if (!Kotlin.equals(this.get__subNodes(), subNodes)) {
                                    this.get__subNodes().clear();
                                    {
                                        var tmp$0 = subNodes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__subNodes().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addSubNodes: function (subNodes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__subNodes_java_cache(null);
                                this.get__subNodes().put(subNodes.getName(), subNodes);
                            },
                            addAllSubNodes: function (subNodes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__subNodes_java_cache(null);
                                {
                                    var tmp$0 = subNodes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__subNodes().put(el.getName(), el);
                                    }
                                }
                            },
                            removeSubNodes: function (subNodes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__subNodes_java_cache(null);
                                if (this.get__subNodes().size() !== 0 && this.get__subNodes().containsKey(subNodes.getName())) {
                                    this.get__subNodes().remove(subNodes.getName());
                                }
                            },
                            removeAllSubNodes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__subNodes_java_cache(null);
                                this.get__subNodes().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createGroup();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setMetaData(this.getMetaData());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionary = this.getDictionary();
                                if (subsubsubsubdictionary !== null && subsubsubsubdictionary !== undefined) {
                                    subsubsubsubdictionary.getClonelazy(subResult, _factories, mutableOnly);
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (this.getTypeDefinition() !== null && this.getTypeDefinition() !== undefined) {
                                    var tmp$0;
                                    if (mutableOnly && ((tmp$0 = this.getTypeDefinition()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$1;
                                        clonedSelfObject.setTypeDefinition((tmp$1 = this.getTypeDefinition()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setTypeDefinition(addrs.get(this.getTypeDefinition()));
                                    }
                                }
                                if (this.getDictionary() !== null && this.getDictionary() !== undefined) {
                                    var tmp$2;
                                    if (mutableOnly && ((tmp$2 = this.getDictionary()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$3;
                                        clonedSelfObject.setDictionary((tmp$3 = this.getDictionary()) !== null && tmp$3 !== undefined ? tmp$3 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionary(addrs.get(this.getDictionary()));
                                    }
                                }
                                {
                                    var tmp$4 = this.getSubNodes().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub = tmp$4.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSubNodes(sub);
                                        }
                                        else {
                                            clonedSelfObject.addSubNodes(addrs.get(sub));
                                        }
                                    }
                                }
                                var subsubsubdictionary = this.getDictionary();
                                if (subsubsubdictionary !== null && subsubsubdictionary !== undefined) {
                                    subsubsubdictionary.resolve(addrs, readOnly, mutableOnly);
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findSubNodesByID: function (key) {
                                return this.get__subNodes().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 3; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'typeDefinition') {
                                            {
                                                tmp$2 = this.getTypeDefinition();
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'subNodes') {
                                            {
                                                var objFound = this.findSubNodesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$2 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.Group)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getMetaData(), similarObjCasted.getMetaData())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionary(), similarObjCasted.getDictionary())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c27 = Kotlin.createTrait(c1i, {
                        })
                        , c8 = Kotlin.createTrait(c1h, c27, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                var subsubsubsubportTypeRef = this.getPortTypeRef();
                                if (subsubsubsubportTypeRef !== null && subsubsubsubportTypeRef !== undefined) {
                                    subsubsubsubportTypeRef.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            get__portTypeRef: function () {
                                return this.$_portTypeRef;
                            },
                            set__portTypeRef: function (tmp$0) {
                                this.$_portTypeRef = tmp$0;
                            },
                            delete: function () {
                                this.set__portTypeRef(null);
                            },
                            getPortTypeRef: function () {
                                return this.get__portTypeRef();
                            },
                            setPortTypeRef: function (portTypeRef) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__portTypeRef(), portTypeRef)) {
                                    this.set__portTypeRef(portTypeRef);
                                }
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createPort();
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (this.getPortTypeRef() !== null && this.getPortTypeRef() !== undefined) {
                                    var tmp$0;
                                    if (mutableOnly && ((tmp$0 = this.getPortTypeRef()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$1;
                                        clonedSelfObject.setPortTypeRef((tmp$1 = this.getPortTypeRef()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setPortTypeRef(addrs.get(this.getPortTypeRef()));
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findByPath: function (query) {
                                return null;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.Port)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                return true;
                            }
                        })
                        , c1n = Kotlin.createTrait(c1i, {
                        })
                        , c9 = Kotlin.createTrait(c1h, c1n, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                var subsubsubsubport = this.getPort();
                                if (subsubsubsubport !== null && subsubsubsubport !== undefined) {
                                    subsubsubsubport.setRecursiveReadOnly();
                                }
                                var subsubsubsubhub = this.getHub();
                                if (subsubsubsubhub !== null && subsubsubsubhub !== undefined) {
                                    subsubsubsubhub.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            get__port: function () {
                                return this.$_port;
                            },
                            set__port: function (tmp$0) {
                                this.$_port = tmp$0;
                            },
                            get__hub: function () {
                                return this.$_hub;
                            },
                            set__hub: function (tmp$0) {
                                this.$_hub = tmp$0;
                            },
                            delete: function () {
                                this.set__port(null);
                                this.set__hub(null);
                            },
                            getPort: function () {
                                return this.get__port();
                            },
                            setPort: function (port) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__port(), port)) {
                                    this.set__port(port);
                                }
                            },
                            getHub: function () {
                                return this.get__hub();
                            },
                            setHub: function (hub) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__hub(), hub)) {
                                    this.set__hub(hub);
                                }
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createMBinding();
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (this.getPort() !== null && this.getPort() !== undefined) {
                                    var tmp$0;
                                    if (mutableOnly && ((tmp$0 = this.getPort()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$1;
                                        clonedSelfObject.setPort((tmp$1 = this.getPort()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setPort(addrs.get(this.getPort()));
                                    }
                                }
                                if (this.getHub() !== null && this.getHub() !== undefined) {
                                    var tmp$2;
                                    if (mutableOnly && ((tmp$2 = this.getHub()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$3;
                                        clonedSelfObject.setHub((tmp$3 = this.getHub()) !== null && tmp$3 !== undefined ? tmp$3 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setHub(addrs.get(this.getHub()));
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findByPath: function (query) {
                                return null;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.MBinding)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                return true;
                            }
                        })
                        , c1q = Kotlin.createTrait(c1i, c18, {
                        })
                        , ca = Kotlin.createTrait(c1h, c1q, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getParameters().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubreturnType = this.getReturnType();
                                if (subsubsubsubreturnType !== null && subsubsubsubreturnType !== undefined) {
                                    subsubsubsubreturnType.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            get__parameters_java_cache: function () {
                                return this.$_parameters_java_cache;
                            },
                            set__parameters_java_cache: function (tmp$0) {
                                this.$_parameters_java_cache = tmp$0;
                            },
                            get__parameters: function () {
                                return this.$_parameters;
                            },
                            get__returnType: function () {
                                return this.$_returnType;
                            },
                            set__returnType: function (tmp$0) {
                                this.$_returnType = tmp$0;
                            },
                            delete: function () {
                                {
                                    var tmp$0 = _.kotlin.iterator(this.get__parameters());
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        _.kotlin.get_value(el).delete();
                                    }
                                }
                                var tmp$1;
                                (tmp$1 = this.get__parameters()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__parameters_java_cache(null);
                                this.set__returnType(null);
                            },
                            getParameters: function () {
                                return _.kotlin.toList(this.get__parameters().values());
                            },
                            setParameters: function (parameters) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (parameters === null || parameters === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__parameters_java_cache(null);
                                if (!Kotlin.equals(this.get__parameters(), parameters)) {
                                    this.get__parameters().clear();
                                    {
                                        var tmp$0 = parameters.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__parameters().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = parameters.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f1b, this, elem));
                                            elem.setContainmentRefName('parameters');
                                        }
                                    }
                                }
                            },
                            addParameters: function (parameters) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__parameters_java_cache(null);
                                parameters.setEContainer(this, Kotlin.b0(_f.f1c, this, parameters));
                                parameters.setContainmentRefName('parameters');
                                this.get__parameters().put(parameters.getName(), parameters);
                            },
                            addAllParameters: function (parameters) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__parameters_java_cache(null);
                                {
                                    var tmp$0 = parameters.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__parameters().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = parameters.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f1d, this, el_0));
                                        el_0.setContainmentRefName('parameters');
                                    }
                                }
                            },
                            removeParameters: function (parameters) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__parameters_java_cache(null);
                                if (this.get__parameters().size() !== 0 && this.get__parameters().containsKey(parameters.getName())) {
                                    this.get__parameters().remove(parameters.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = parameters) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = parameters) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllParameters: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getParameters()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__parameters_java_cache(null);
                                this.get__parameters().clear();
                            },
                            getReturnType: function () {
                                return this.get__returnType();
                            },
                            setReturnType: function (returnType) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__returnType(), returnType)) {
                                    this.set__returnType(returnType);
                                }
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createOperation();
                                selfObjectClone.setName(this.getName());
                                subResult.put(this, selfObjectClone);
                                {
                                    var tmp$0 = this.getParameters().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getParameters().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addParameters(sub);
                                        }
                                        else {
                                            clonedSelfObject.addParameters(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getReturnType() !== null && this.getReturnType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getReturnType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setReturnType((tmp$2 = this.getReturnType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setReturnType(addrs.get(this.getReturnType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getParameters().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        sub_0.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findParametersByID: function (key) {
                                return this.get__parameters().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 3; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'parameters') {
                                            {
                                                var objFound = this.findParametersByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'returnType') {
                                            {
                                                tmp$2 = this.getReturnType();
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.Operation)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (this.getParameters().size() !== similarObjCasted.getParameters().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getParameters().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var foundedElement = similarObjCasted.findParametersByID(subElement.getName());
                                        if (foundedElement === null || foundedElement === undefined || !Kotlin.equals(foundedElement, subElement)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c2a = Kotlin.createTrait(c1i, c18, c1r, {
                        })
                        , cb = Kotlin.createTrait(c1h, c2a, cx, c11, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                var subsubsubsubtypeDefinition = this.getTypeDefinition();
                                if (subsubsubsubtypeDefinition !== null && subsubsubsubtypeDefinition !== undefined) {
                                    subsubsubsubtypeDefinition.setRecursiveReadOnly();
                                }
                                var subsubsubsubdictionary = this.getDictionary();
                                if (subsubsubsubdictionary !== null && subsubsubsubdictionary !== undefined) {
                                    subsubsubsubdictionary.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$0 = this.getProvided().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$1 = this.getRequired().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubnamespace = this.getNamespace();
                                if (subsubsubsubnamespace !== null && subsubsubsubnamespace !== undefined) {
                                    subsubsubsubnamespace.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            get__provided_java_cache: function () {
                                return this.$_provided_java_cache;
                            },
                            set__provided_java_cache: function (tmp$0) {
                                this.$_provided_java_cache = tmp$0;
                            },
                            get__provided: function () {
                                return this.$_provided;
                            },
                            get__required_java_cache: function () {
                                return this.$_required_java_cache;
                            },
                            set__required_java_cache: function (tmp$0) {
                                this.$_required_java_cache = tmp$0;
                            },
                            get__required: function () {
                                return this.$_required;
                            },
                            get__namespace: function () {
                                return this.$_namespace;
                            },
                            set__namespace: function (tmp$0) {
                                this.$_namespace = tmp$0;
                            },
                            delete: function () {
                                var tmp$0, tmp$3, tmp$4;
                                (tmp$0 = this.get__dictionary()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                                {
                                    var tmp$1 = this.get__provided().iterator();
                                    while (tmp$1.hasNext()) {
                                        var el = tmp$1.next();
                                        el.delete();
                                    }
                                }
                                {
                                    var tmp$2 = this.get__required().iterator();
                                    while (tmp$2.hasNext()) {
                                        var el_0 = tmp$2.next();
                                        el_0.delete();
                                    }
                                }
                                (tmp$3 = this.get__provided()) !== null && tmp$3 !== undefined ? tmp$3.clear() : null;
                                this.set__provided_java_cache(null);
                                (tmp$4 = this.get__required()) !== null && tmp$4 !== undefined ? tmp$4.clear() : null;
                                this.set__required_java_cache(null);
                                this.set__namespace(null);
                            },
                            getProvided: function () {
                                return this.get__provided();
                            },
                            setProvided: function (provided) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (provided === null || provided === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__provided_java_cache(null);
                                if (!Kotlin.equals(this.get__provided(), provided)) {
                                    this.get__provided().clear();
                                    this.get__provided().addAll(provided);
                                    {
                                        var tmp$0 = provided.iterator();
                                        while (tmp$0.hasNext()) {
                                            var elem = tmp$0.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f1e, this, elem));
                                            elem.setContainmentRefName('provided');
                                        }
                                    }
                                }
                            },
                            addProvided: function (provided) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__provided_java_cache(null);
                                provided.setEContainer(this, Kotlin.b0(_f.f1f, this, provided));
                                provided.setContainmentRefName('provided');
                                this.get__provided().add(provided);
                            },
                            addAllProvided: function (provided) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__provided_java_cache(null);
                                this.get__provided().addAll(provided);
                                {
                                    var tmp$0 = provided.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(this, Kotlin.b0(_f.f1g, this, el));
                                        el.setContainmentRefName('provided');
                                    }
                                }
                            },
                            removeProvided: function (provided) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__provided_java_cache(null);
                                if (this.get__provided().size() !== 0 && this.get__provided().indexOf(provided) !== -1) {
                                    this.get__provided().remove(this.get__provided().indexOf(provided));
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = provided) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = provided) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllProvided: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var temp_els = this.getProvided();
                                {
                                    var tmp$0 = temp_els.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__provided_java_cache(null);
                                this.get__provided().clear();
                            },
                            getRequired: function () {
                                return this.get__required();
                            },
                            setRequired: function (required) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (required === null || required === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__required_java_cache(null);
                                if (!Kotlin.equals(this.get__required(), required)) {
                                    this.get__required().clear();
                                    this.get__required().addAll(required);
                                    {
                                        var tmp$0 = required.iterator();
                                        while (tmp$0.hasNext()) {
                                            var elem = tmp$0.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f1h, this, elem));
                                            elem.setContainmentRefName('required');
                                        }
                                    }
                                }
                            },
                            addRequired: function (required) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__required_java_cache(null);
                                required.setEContainer(this, Kotlin.b0(_f.f1i, this, required));
                                required.setContainmentRefName('required');
                                this.get__required().add(required);
                            },
                            addAllRequired: function (required) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__required_java_cache(null);
                                this.get__required().addAll(required);
                                {
                                    var tmp$0 = required.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(this, Kotlin.b0(_f.f1j, this, el));
                                        el.setContainmentRefName('required');
                                    }
                                }
                            },
                            removeRequired: function (required) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__required_java_cache(null);
                                if (this.get__required().size() !== 0 && this.get__required().indexOf(required) !== -1) {
                                    this.get__required().remove(this.get__required().indexOf(required));
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = required) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = required) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllRequired: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var temp_els = this.getRequired();
                                {
                                    var tmp$0 = temp_els.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__required_java_cache(null);
                                this.get__required().clear();
                            },
                            getNamespace: function () {
                                return this.get__namespace();
                            },
                            setNamespace: function (namespace) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__namespace(), namespace)) {
                                    this.set__namespace(namespace);
                                }
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createComponentInstance();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setMetaData(this.getMetaData());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionary = this.getDictionary();
                                if (subsubsubsubdictionary !== null && subsubsubsubdictionary !== undefined) {
                                    subsubsubsubdictionary.getClonelazy(subResult, _factories, mutableOnly);
                                }
                                {
                                    var tmp$0 = this.getProvided().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$1 = this.getRequired().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (this.getTypeDefinition() !== null && this.getTypeDefinition() !== undefined) {
                                    var tmp$0;
                                    if (mutableOnly && ((tmp$0 = this.getTypeDefinition()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$1;
                                        clonedSelfObject.setTypeDefinition((tmp$1 = this.getTypeDefinition()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setTypeDefinition(addrs.get(this.getTypeDefinition()));
                                    }
                                }
                                if (this.getDictionary() !== null && this.getDictionary() !== undefined) {
                                    var tmp$2;
                                    if (mutableOnly && ((tmp$2 = this.getDictionary()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$3;
                                        clonedSelfObject.setDictionary((tmp$3 = this.getDictionary()) !== null && tmp$3 !== undefined ? tmp$3 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionary(addrs.get(this.getDictionary()));
                                    }
                                }
                                {
                                    var tmp$4 = this.getProvided().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub = tmp$4.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addProvided(sub);
                                        }
                                        else {
                                            clonedSelfObject.addProvided(addrs.get(sub));
                                        }
                                    }
                                }
                                {
                                    var tmp$5 = this.getRequired().iterator();
                                    while (tmp$5.hasNext()) {
                                        var sub_0 = tmp$5.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addRequired(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addRequired(addrs.get(sub_0));
                                        }
                                    }
                                }
                                if (this.getNamespace() !== null && this.getNamespace() !== undefined) {
                                    var tmp$6;
                                    if (mutableOnly && ((tmp$6 = this.getNamespace()) !== null && tmp$6 !== undefined ? tmp$6 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$7;
                                        clonedSelfObject.setNamespace((tmp$7 = this.getNamespace()) !== null && tmp$7 !== undefined ? tmp$7 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setNamespace(addrs.get(this.getNamespace()));
                                    }
                                }
                                var subsubsubdictionary = this.getDictionary();
                                if (subsubsubdictionary !== null && subsubsubdictionary !== undefined) {
                                    subsubsubdictionary.resolve(addrs, readOnly, mutableOnly);
                                }
                                {
                                    var tmp$8 = this.getProvided().iterator();
                                    while (tmp$8.hasNext()) {
                                        var sub_1 = tmp$8.next();
                                        sub_1.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$9 = this.getRequired().iterator();
                                    while (tmp$9.hasNext()) {
                                        var sub_2 = tmp$9.next();
                                        sub_2.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.ComponentInstance)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getMetaData(), similarObjCasted.getMetaData())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionary(), similarObjCasted.getDictionary())) {
                                    return false;
                                }
                                if (this.getProvided().size() !== similarObjCasted.getProvided().size()) {
                                    return false;
                                }
                                if (this.getRequired().size() !== similarObjCasted.getRequired().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getProvided().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var lookEqualsSub = false;
                                        {
                                            var tmp$1 = similarObjCasted.getProvided().iterator();
                                            while (tmp$1.hasNext()) {
                                                var subElement2 = tmp$1.next();
                                                if (Kotlin.equals(subElement, subElement2)) {
                                                    lookEqualsSub = true;
                                                }
                                            }
                                        }
                                        if (!lookEqualsSub) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$2 = this.getRequired().iterator();
                                    while (tmp$2.hasNext()) {
                                        var subElement_0 = tmp$2.next();
                                        var lookEqualsSub_0 = false;
                                        {
                                            var tmp$3 = similarObjCasted.getRequired().iterator();
                                            while (tmp$3.hasNext()) {
                                                var subElement2_0 = tmp$3.next();
                                                if (Kotlin.equals(subElement_0, subElement2_0)) {
                                                    lookEqualsSub_0 = true;
                                                }
                                            }
                                        }
                                        if (!lookEqualsSub_0) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c22 = Kotlin.createTrait(c1i, {
                        })
                        , cc = Kotlin.createTrait(c1h, c22, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getAttributes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$1 = this.getDefaultValues().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__attributes_java_cache: function () {
                                return this.$_attributes_java_cache;
                            },
                            set__attributes_java_cache: function (tmp$0) {
                                this.$_attributes_java_cache = tmp$0;
                            },
                            get__attributes: function () {
                                return this.$_attributes;
                            },
                            get__defaultValues_java_cache: function () {
                                return this.$_defaultValues_java_cache;
                            },
                            set__defaultValues_java_cache: function (tmp$0) {
                                this.$_defaultValues_java_cache = tmp$0;
                            },
                            get__defaultValues: function () {
                                return this.$_defaultValues;
                            },
                            delete: function () {
                                {
                                    var tmp$0 = _.kotlin.iterator(this.get__attributes());
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        _.kotlin.get_value(el).delete();
                                    }
                                }
                                {
                                    var tmp$1 = this.get__defaultValues().iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.delete();
                                    }
                                }
                                var tmp$2, tmp$3;
                                (tmp$2 = this.get__attributes()) !== null && tmp$2 !== undefined ? tmp$2.clear() : null;
                                this.set__attributes_java_cache(null);
                                (tmp$3 = this.get__defaultValues()) !== null && tmp$3 !== undefined ? tmp$3.clear() : null;
                                this.set__defaultValues_java_cache(null);
                            },
                            getAttributes: function () {
                                return _.kotlin.toList(this.get__attributes().values());
                            },
                            setAttributes: function (attributes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (attributes === null || attributes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__attributes_java_cache(null);
                                if (!Kotlin.equals(this.get__attributes(), attributes)) {
                                    this.get__attributes().clear();
                                    {
                                        var tmp$0 = attributes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__attributes().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = attributes.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f1k, this, elem));
                                            elem.setContainmentRefName('attributes');
                                        }
                                    }
                                }
                            },
                            addAttributes: function (attributes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__attributes_java_cache(null);
                                attributes.setEContainer(this, Kotlin.b0(_f.f1l, this, attributes));
                                attributes.setContainmentRefName('attributes');
                                this.get__attributes().put(attributes.getName(), attributes);
                            },
                            addAllAttributes: function (attributes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__attributes_java_cache(null);
                                {
                                    var tmp$0 = attributes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__attributes().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = attributes.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f1m, this, el_0));
                                        el_0.setContainmentRefName('attributes');
                                    }
                                }
                            },
                            removeAttributes: function (attributes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__attributes_java_cache(null);
                                if (this.get__attributes().size() !== 0 && this.get__attributes().containsKey(attributes.getName())) {
                                    this.get__attributes().remove(attributes.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = attributes) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = attributes) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllAttributes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getAttributes()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__attributes_java_cache(null);
                                this.get__attributes().clear();
                            },
                            getDefaultValues: function () {
                                return this.get__defaultValues();
                            },
                            setDefaultValues: function (defaultValues) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (defaultValues === null || defaultValues === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__defaultValues_java_cache(null);
                                if (!Kotlin.equals(this.get__defaultValues(), defaultValues)) {
                                    this.get__defaultValues().clear();
                                    this.get__defaultValues().addAll(defaultValues);
                                    {
                                        var tmp$0 = defaultValues.iterator();
                                        while (tmp$0.hasNext()) {
                                            var elem = tmp$0.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f1n, this, elem));
                                            elem.setContainmentRefName('defaultValues');
                                        }
                                    }
                                }
                            },
                            addDefaultValues: function (defaultValues) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__defaultValues_java_cache(null);
                                defaultValues.setEContainer(this, Kotlin.b0(_f.f1o, this, defaultValues));
                                defaultValues.setContainmentRefName('defaultValues');
                                this.get__defaultValues().add(defaultValues);
                            },
                            addAllDefaultValues: function (defaultValues) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__defaultValues_java_cache(null);
                                this.get__defaultValues().addAll(defaultValues);
                                {
                                    var tmp$0 = defaultValues.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(this, Kotlin.b0(_f.f1p, this, el));
                                        el.setContainmentRefName('defaultValues');
                                    }
                                }
                            },
                            removeDefaultValues: function (defaultValues) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__defaultValues_java_cache(null);
                                if (this.get__defaultValues().size() !== 0 && this.get__defaultValues().indexOf(defaultValues) !== -1) {
                                    this.get__defaultValues().remove(this.get__defaultValues().indexOf(defaultValues));
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = defaultValues) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = defaultValues) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllDefaultValues: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var temp_els = this.getDefaultValues();
                                {
                                    var tmp$0 = temp_els.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__defaultValues_java_cache(null);
                                this.get__defaultValues().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createDictionaryType();
                                subResult.put(this, selfObjectClone);
                                {
                                    var tmp$0 = this.getAttributes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$1 = this.getDefaultValues().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getAttributes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addAttributes(sub);
                                        }
                                        else {
                                            clonedSelfObject.addAttributes(addrs.get(sub));
                                        }
                                    }
                                }
                                {
                                    var tmp$1 = this.getDefaultValues().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDefaultValues(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addDefaultValues(addrs.get(sub_0));
                                        }
                                    }
                                }
                                {
                                    var tmp$2 = this.getAttributes().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$3 = this.getDefaultValues().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_2 = tmp$3.next();
                                        sub_2.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findAttributesByID: function (key) {
                                return this.get__attributes().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = 'attributes';
                                var optionalDetected = firstSepIndex !== 10;
                                if (optionalDetected) {
                                    extraReadChar = extraReadChar - 2;
                                }
                                if (_.js.indexOf(query, '{') === 0) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    if (optionalDetected) {
                                        if (_.js.indexOf(query, '/') !== -1) {
                                            queryID = query.substring(0, _.js.indexOf(query, '/'));
                                        }
                                        else {
                                            queryID = query.substring(0, _.js.get_size(query));
                                        }
                                    }
                                    else {
                                        queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                    }
                                }
                                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
                                tmp$0 = query;
                                if (optionalDetected) {
                                    tmp$1 = 0;
                                }
                                else {
                                    tmp$1 = _.js.get_size(relationName);
                                }
                                var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                for (tmp$3 = 0, tmp$2 = relationName; tmp$3 < 2; ++tmp$3) {
                                    if (tmp$3 === 0)
                                        if (tmp$2 === 'attributes') {
                                            {
                                                var objFound = this.findAttributesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$4 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$3 === 1) {
                                        tmp$4 = null;
                                    }
                                }
                                return tmp$4;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.DictionaryType)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (this.getAttributes().size() !== similarObjCasted.getAttributes().size()) {
                                    return false;
                                }
                                if (this.getDefaultValues().size() !== similarObjCasted.getDefaultValues().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getAttributes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var foundedElement = similarObjCasted.findAttributesByID(subElement.getName());
                                        if (foundedElement === null || foundedElement === undefined || !Kotlin.equals(foundedElement, subElement)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$1 = this.getDefaultValues().iterator();
                                    while (tmp$1.hasNext()) {
                                        var subElement_0 = tmp$1.next();
                                        var lookEqualsSub = false;
                                        {
                                            var tmp$2 = similarObjCasted.getDefaultValues().iterator();
                                            while (tmp$2.hasNext()) {
                                                var subElement2 = tmp$2.next();
                                                if (Kotlin.equals(subElement_0, subElement2)) {
                                                    lookEqualsSub = true;
                                                }
                                            }
                                        }
                                        if (!lookEqualsSub) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c19 = Kotlin.createTrait(c1i, {
                        })
                        , cd = Kotlin.createTrait(c1h, c19, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getPorts().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__ports_java_cache: function () {
                                return this.$_ports_java_cache;
                            },
                            set__ports_java_cache: function (tmp$0) {
                                this.$_ports_java_cache = tmp$0;
                            },
                            get__ports: function () {
                                return this.$_ports;
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__ports()) !== null && tmp$0 !== undefined ? tmp$0.clear() : null;
                                this.set__ports_java_cache(null);
                            },
                            getPorts: function () {
                                return _.kotlin.toList(this.get__ports().values());
                            },
                            setPorts: function (ports) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (ports === null || ports === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__ports_java_cache(null);
                                if (!Kotlin.equals(this.get__ports(), ports)) {
                                    this.get__ports().clear();
                                    {
                                        var tmp$0 = ports.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__ports().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addPorts: function (ports) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__ports_java_cache(null);
                                this.get__ports().put(ports.getName(), ports);
                            },
                            addAllPorts: function (ports) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__ports_java_cache(null);
                                {
                                    var tmp$0 = ports.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__ports().put(el.getName(), el);
                                    }
                                }
                            },
                            removePorts: function (ports) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__ports_java_cache(null);
                                if (_.kotlin.get_size_0(this.get__ports()) === 2 && this.get__ports().containsKey(ports.getName())) {
                                    throw new Kotlin.UnsupportedOperationException('The list of ports must contain at least 2 element. Connot remove sizeof(ports)=' + _.kotlin.get_size_0(this.get__ports()));
                                }
                                else {
                                    this.get__ports().remove(ports.getName());
                                }
                            },
                            removeAllPorts: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__ports_java_cache(null);
                                this.get__ports().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createWire();
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getPorts().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addPorts(sub);
                                        }
                                        else {
                                            clonedSelfObject.addPorts(addrs.get(sub));
                                        }
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findPortsByID: function (key) {
                                return this.get__ports().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = 'ports';
                                var optionalDetected = firstSepIndex !== 5;
                                if (optionalDetected) {
                                    extraReadChar = extraReadChar - 2;
                                }
                                if (_.js.indexOf(query, '{') === 0) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    if (optionalDetected) {
                                        if (_.js.indexOf(query, '/') !== -1) {
                                            queryID = query.substring(0, _.js.indexOf(query, '/'));
                                        }
                                        else {
                                            queryID = query.substring(0, _.js.get_size(query));
                                        }
                                    }
                                    else {
                                        queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                    }
                                }
                                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
                                tmp$0 = query;
                                if (optionalDetected) {
                                    tmp$1 = 0;
                                }
                                else {
                                    tmp$1 = _.js.get_size(relationName);
                                }
                                var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                for (tmp$3 = 0, tmp$2 = relationName; tmp$3 < 2; ++tmp$3) {
                                    if (tmp$3 === 0)
                                        if (tmp$2 === 'ports') {
                                            {
                                                var objFound = this.findPortsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$4 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$3 === 1) {
                                        tmp$4 = null;
                                    }
                                }
                                return tmp$4;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.Wire)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                return true;
                            }
                        })
                        , c1c = Kotlin.createTrait(c1i, c18, {
                        })
                        , ce = Kotlin.createTrait(c1h, c1c, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                this.setInternalReadOnly();
                            },
                            get__value: function () {
                                return this.$_value;
                            },
                            set__value: function (tmp$0) {
                                this.$_value = tmp$0;
                            },
                            get__lastCheck: function () {
                                return this.$_lastCheck;
                            },
                            set__lastCheck: function (tmp$0) {
                                this.$_lastCheck = tmp$0;
                            },
                            delete: function () {
                            },
                            getValue: function () {
                                return this.get__value();
                            },
                            setValue: function (value) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__value(value);
                            },
                            getLastCheck: function () {
                                return this.get__lastCheck();
                            },
                            setLastCheck: function (lastCheck) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__lastCheck(lastCheck);
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createNetworkProperty();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setValue(this.getValue());
                                selfObjectClone.setLastCheck(this.getLastCheck());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.NetworkProperty)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getValue(), similarObjCasted.getValue())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getLastCheck(), similarObjCasted.getLastCheck())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1f = Kotlin.createTrait(c1i, {
                        })
                        , cf = Kotlin.createTrait(c1h, c1f, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getNodes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$1 = this.getTypeDefinitions().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$2 = this.getRepositories().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$3 = this.getDataTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_2 = tmp$3.next();
                                        sub_2.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$4 = this.getLibraries().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub_3 = tmp$4.next();
                                        sub_3.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$5 = this.getHubs().iterator();
                                    while (tmp$5.hasNext()) {
                                        var sub_4 = tmp$5.next();
                                        sub_4.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$6 = this.getMBindings().iterator();
                                    while (tmp$6.hasNext()) {
                                        var sub_5 = tmp$6.next();
                                        sub_5.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$7 = this.getDeployUnits().iterator();
                                    while (tmp$7.hasNext()) {
                                        var sub_6 = tmp$7.next();
                                        sub_6.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$8 = this.getNodeNetworks().iterator();
                                    while (tmp$8.hasNext()) {
                                        var sub_7 = tmp$8.next();
                                        sub_7.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$9 = this.getGroups().iterator();
                                    while (tmp$9.hasNext()) {
                                        var sub_8 = tmp$9.next();
                                        sub_8.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$10 = this.getGroupTypes().iterator();
                                    while (tmp$10.hasNext()) {
                                        var sub_9 = tmp$10.next();
                                        sub_9.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$11 = this.getAdaptationPrimitiveTypes().iterator();
                                    while (tmp$11.hasNext()) {
                                        var sub_10 = tmp$11.next();
                                        sub_10.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__nodes_java_cache: function () {
                                return this.$_nodes_java_cache;
                            },
                            set__nodes_java_cache: function (tmp$0) {
                                this.$_nodes_java_cache = tmp$0;
                            },
                            get__nodes: function () {
                                return this.$_nodes;
                            },
                            get__typeDefinitions_java_cache: function () {
                                return this.$_typeDefinitions_java_cache;
                            },
                            set__typeDefinitions_java_cache: function (tmp$0) {
                                this.$_typeDefinitions_java_cache = tmp$0;
                            },
                            get__typeDefinitions: function () {
                                return this.$_typeDefinitions;
                            },
                            get__repositories_java_cache: function () {
                                return this.$_repositories_java_cache;
                            },
                            set__repositories_java_cache: function (tmp$0) {
                                this.$_repositories_java_cache = tmp$0;
                            },
                            get__repositories: function () {
                                return this.$_repositories;
                            },
                            get__dataTypes_java_cache: function () {
                                return this.$_dataTypes_java_cache;
                            },
                            set__dataTypes_java_cache: function (tmp$0) {
                                this.$_dataTypes_java_cache = tmp$0;
                            },
                            get__dataTypes: function () {
                                return this.$_dataTypes;
                            },
                            get__libraries_java_cache: function () {
                                return this.$_libraries_java_cache;
                            },
                            set__libraries_java_cache: function (tmp$0) {
                                this.$_libraries_java_cache = tmp$0;
                            },
                            get__libraries: function () {
                                return this.$_libraries;
                            },
                            get__hubs_java_cache: function () {
                                return this.$_hubs_java_cache;
                            },
                            set__hubs_java_cache: function (tmp$0) {
                                this.$_hubs_java_cache = tmp$0;
                            },
                            get__hubs: function () {
                                return this.$_hubs;
                            },
                            get__mBindings_java_cache: function () {
                                return this.$_mBindings_java_cache;
                            },
                            set__mBindings_java_cache: function (tmp$0) {
                                this.$_mBindings_java_cache = tmp$0;
                            },
                            get__mBindings: function () {
                                return this.$_mBindings;
                            },
                            get__deployUnits_java_cache: function () {
                                return this.$_deployUnits_java_cache;
                            },
                            set__deployUnits_java_cache: function (tmp$0) {
                                this.$_deployUnits_java_cache = tmp$0;
                            },
                            get__deployUnits: function () {
                                return this.$_deployUnits;
                            },
                            get__nodeNetworks_java_cache: function () {
                                return this.$_nodeNetworks_java_cache;
                            },
                            set__nodeNetworks_java_cache: function (tmp$0) {
                                this.$_nodeNetworks_java_cache = tmp$0;
                            },
                            get__nodeNetworks: function () {
                                return this.$_nodeNetworks;
                            },
                            get__groups_java_cache: function () {
                                return this.$_groups_java_cache;
                            },
                            set__groups_java_cache: function (tmp$0) {
                                this.$_groups_java_cache = tmp$0;
                            },
                            get__groups: function () {
                                return this.$_groups;
                            },
                            get__groupTypes_java_cache: function () {
                                return this.$_groupTypes_java_cache;
                            },
                            set__groupTypes_java_cache: function (tmp$0) {
                                this.$_groupTypes_java_cache = tmp$0;
                            },
                            get__groupTypes: function () {
                                return this.$_groupTypes;
                            },
                            get__adaptationPrimitiveTypes_java_cache: function () {
                                return this.$_adaptationPrimitiveTypes_java_cache;
                            },
                            set__adaptationPrimitiveTypes_java_cache: function (tmp$0) {
                                this.$_adaptationPrimitiveTypes_java_cache = tmp$0;
                            },
                            get__adaptationPrimitiveTypes: function () {
                                return this.$_adaptationPrimitiveTypes;
                            },
                            delete: function () {
                                {
                                    var tmp$0 = _.kotlin.iterator(this.get__nodes());
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        _.kotlin.get_value(el).delete();
                                    }
                                }
                                {
                                    var tmp$1 = _.kotlin.iterator(this.get__typeDefinitions());
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        _.kotlin.get_value(el_0).delete();
                                    }
                                }
                                {
                                    var tmp$2 = _.kotlin.iterator(this.get__repositories());
                                    while (tmp$2.hasNext()) {
                                        var el_1 = tmp$2.next();
                                        _.kotlin.get_value(el_1).delete();
                                    }
                                }
                                {
                                    var tmp$3 = _.kotlin.iterator(this.get__dataTypes());
                                    while (tmp$3.hasNext()) {
                                        var el_2 = tmp$3.next();
                                        _.kotlin.get_value(el_2).delete();
                                    }
                                }
                                {
                                    var tmp$4 = _.kotlin.iterator(this.get__libraries());
                                    while (tmp$4.hasNext()) {
                                        var el_3 = tmp$4.next();
                                        _.kotlin.get_value(el_3).delete();
                                    }
                                }
                                {
                                    var tmp$5 = _.kotlin.iterator(this.get__hubs());
                                    while (tmp$5.hasNext()) {
                                        var el_4 = tmp$5.next();
                                        _.kotlin.get_value(el_4).delete();
                                    }
                                }
                                {
                                    var tmp$6 = this.get__mBindings().iterator();
                                    while (tmp$6.hasNext()) {
                                        var el_5 = tmp$6.next();
                                        el_5.delete();
                                    }
                                }
                                {
                                    var tmp$7 = _.kotlin.iterator(this.get__deployUnits());
                                    while (tmp$7.hasNext()) {
                                        var el_6 = tmp$7.next();
                                        _.kotlin.get_value(el_6).delete();
                                    }
                                }
                                {
                                    var tmp$8 = this.get__nodeNetworks().iterator();
                                    while (tmp$8.hasNext()) {
                                        var el_7 = tmp$8.next();
                                        el_7.delete();
                                    }
                                }
                                {
                                    var tmp$9 = _.kotlin.iterator(this.get__groups());
                                    while (tmp$9.hasNext()) {
                                        var el_8 = tmp$9.next();
                                        _.kotlin.get_value(el_8).delete();
                                    }
                                }
                                {
                                    var tmp$10 = _.kotlin.iterator(this.get__groupTypes());
                                    while (tmp$10.hasNext()) {
                                        var el_9 = tmp$10.next();
                                        _.kotlin.get_value(el_9).delete();
                                    }
                                }
                                {
                                    var tmp$11 = _.kotlin.iterator(this.get__adaptationPrimitiveTypes());
                                    while (tmp$11.hasNext()) {
                                        var el_10 = tmp$11.next();
                                        _.kotlin.get_value(el_10).delete();
                                    }
                                }
                                var tmp$12, tmp$13, tmp$14, tmp$15, tmp$16, tmp$17, tmp$18, tmp$19, tmp$20, tmp$21, tmp$22, tmp$23;
                                (tmp$12 = this.get__nodes()) !== null && tmp$12 !== undefined ? tmp$12.clear() : null;
                                this.set__nodes_java_cache(null);
                                (tmp$13 = this.get__typeDefinitions()) !== null && tmp$13 !== undefined ? tmp$13.clear() : null;
                                this.set__typeDefinitions_java_cache(null);
                                (tmp$14 = this.get__repositories()) !== null && tmp$14 !== undefined ? tmp$14.clear() : null;
                                this.set__repositories_java_cache(null);
                                (tmp$15 = this.get__dataTypes()) !== null && tmp$15 !== undefined ? tmp$15.clear() : null;
                                this.set__dataTypes_java_cache(null);
                                (tmp$16 = this.get__libraries()) !== null && tmp$16 !== undefined ? tmp$16.clear() : null;
                                this.set__libraries_java_cache(null);
                                (tmp$17 = this.get__hubs()) !== null && tmp$17 !== undefined ? tmp$17.clear() : null;
                                this.set__hubs_java_cache(null);
                                (tmp$18 = this.get__mBindings()) !== null && tmp$18 !== undefined ? tmp$18.clear() : null;
                                this.set__mBindings_java_cache(null);
                                (tmp$19 = this.get__deployUnits()) !== null && tmp$19 !== undefined ? tmp$19.clear() : null;
                                this.set__deployUnits_java_cache(null);
                                (tmp$20 = this.get__nodeNetworks()) !== null && tmp$20 !== undefined ? tmp$20.clear() : null;
                                this.set__nodeNetworks_java_cache(null);
                                (tmp$21 = this.get__groups()) !== null && tmp$21 !== undefined ? tmp$21.clear() : null;
                                this.set__groups_java_cache(null);
                                (tmp$22 = this.get__groupTypes()) !== null && tmp$22 !== undefined ? tmp$22.clear() : null;
                                this.set__groupTypes_java_cache(null);
                                (tmp$23 = this.get__adaptationPrimitiveTypes()) !== null && tmp$23 !== undefined ? tmp$23.clear() : null;
                                this.set__adaptationPrimitiveTypes_java_cache(null);
                            },
                            getNodes: function () {
                                return _.kotlin.toList(this.get__nodes().values());
                            },
                            setNodes: function (nodes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (nodes === null || nodes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__nodes_java_cache(null);
                                if (!Kotlin.equals(this.get__nodes(), nodes)) {
                                    this.get__nodes().clear();
                                    {
                                        var tmp$0 = nodes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__nodes().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = nodes.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f1q, this, elem));
                                            elem.setContainmentRefName('nodes');
                                        }
                                    }
                                }
                            },
                            addNodes: function (nodes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__nodes_java_cache(null);
                                nodes.setEContainer(this, Kotlin.b0(_f.f1r, this, nodes));
                                nodes.setContainmentRefName('nodes');
                                this.get__nodes().put(nodes.getName(), nodes);
                            },
                            addAllNodes: function (nodes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__nodes_java_cache(null);
                                {
                                    var tmp$0 = nodes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__nodes().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = nodes.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f1s, this, el_0));
                                        el_0.setContainmentRefName('nodes');
                                    }
                                }
                            },
                            removeNodes: function (nodes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__nodes_java_cache(null);
                                if (this.get__nodes().size() !== 0 && this.get__nodes().containsKey(nodes.getName())) {
                                    this.get__nodes().remove(nodes.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = nodes) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = nodes) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllNodes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getNodes()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__nodes_java_cache(null);
                                this.get__nodes().clear();
                            },
                            getTypeDefinitions: function () {
                                return _.kotlin.toList(this.get__typeDefinitions().values());
                            },
                            setTypeDefinitions: function (typeDefinitions) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (typeDefinitions === null || typeDefinitions === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__typeDefinitions_java_cache(null);
                                if (!Kotlin.equals(this.get__typeDefinitions(), typeDefinitions)) {
                                    this.get__typeDefinitions().clear();
                                    {
                                        var tmp$0 = typeDefinitions.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__typeDefinitions().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = typeDefinitions.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f1t, this, elem));
                                            elem.setContainmentRefName('typeDefinitions');
                                        }
                                    }
                                }
                            },
                            addTypeDefinitions: function (typeDefinitions) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__typeDefinitions_java_cache(null);
                                typeDefinitions.setEContainer(this, Kotlin.b0(_f.f1u, this, typeDefinitions));
                                typeDefinitions.setContainmentRefName('typeDefinitions');
                                this.get__typeDefinitions().put(typeDefinitions.getName(), typeDefinitions);
                            },
                            addAllTypeDefinitions: function (typeDefinitions) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__typeDefinitions_java_cache(null);
                                {
                                    var tmp$0 = typeDefinitions.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__typeDefinitions().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = typeDefinitions.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f1v, this, el_0));
                                        el_0.setContainmentRefName('typeDefinitions');
                                    }
                                }
                            },
                            removeTypeDefinitions: function (typeDefinitions) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__typeDefinitions_java_cache(null);
                                if (this.get__typeDefinitions().size() !== 0 && this.get__typeDefinitions().containsKey(typeDefinitions.getName())) {
                                    this.get__typeDefinitions().remove(typeDefinitions.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = typeDefinitions) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = typeDefinitions) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllTypeDefinitions: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getTypeDefinitions()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__typeDefinitions_java_cache(null);
                                this.get__typeDefinitions().clear();
                            },
                            getRepositories: function () {
                                return _.kotlin.toList(this.get__repositories().values());
                            },
                            setRepositories: function (repositories) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (repositories === null || repositories === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__repositories_java_cache(null);
                                if (!Kotlin.equals(this.get__repositories(), repositories)) {
                                    this.get__repositories().clear();
                                    {
                                        var tmp$0 = repositories.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__repositories().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = repositories.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f1w, this, elem));
                                            elem.setContainmentRefName('repositories');
                                        }
                                    }
                                }
                            },
                            addRepositories: function (repositories) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__repositories_java_cache(null);
                                repositories.setEContainer(this, Kotlin.b0(_f.f1x, this, repositories));
                                repositories.setContainmentRefName('repositories');
                                this.get__repositories().put(repositories.getName(), repositories);
                            },
                            addAllRepositories: function (repositories) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__repositories_java_cache(null);
                                {
                                    var tmp$0 = repositories.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__repositories().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = repositories.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f1y, this, el_0));
                                        el_0.setContainmentRefName('repositories');
                                    }
                                }
                            },
                            removeRepositories: function (repositories) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__repositories_java_cache(null);
                                if (this.get__repositories().size() !== 0 && this.get__repositories().containsKey(repositories.getName())) {
                                    this.get__repositories().remove(repositories.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = repositories) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = repositories) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllRepositories: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getRepositories()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__repositories_java_cache(null);
                                this.get__repositories().clear();
                            },
                            getDataTypes: function () {
                                return _.kotlin.toList(this.get__dataTypes().values());
                            },
                            setDataTypes: function (dataTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (dataTypes === null || dataTypes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__dataTypes_java_cache(null);
                                if (!Kotlin.equals(this.get__dataTypes(), dataTypes)) {
                                    this.get__dataTypes().clear();
                                    {
                                        var tmp$0 = dataTypes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__dataTypes().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = dataTypes.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f1z, this, elem));
                                            elem.setContainmentRefName('dataTypes');
                                        }
                                    }
                                }
                            },
                            addDataTypes: function (dataTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__dataTypes_java_cache(null);
                                dataTypes.setEContainer(this, Kotlin.b0(_f.f20, this, dataTypes));
                                dataTypes.setContainmentRefName('dataTypes');
                                this.get__dataTypes().put(dataTypes.getName(), dataTypes);
                            },
                            addAllDataTypes: function (dataTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__dataTypes_java_cache(null);
                                {
                                    var tmp$0 = dataTypes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__dataTypes().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = dataTypes.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f21, this, el_0));
                                        el_0.setContainmentRefName('dataTypes');
                                    }
                                }
                            },
                            removeDataTypes: function (dataTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__dataTypes_java_cache(null);
                                if (this.get__dataTypes().size() !== 0 && this.get__dataTypes().containsKey(dataTypes.getName())) {
                                    this.get__dataTypes().remove(dataTypes.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = dataTypes) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = dataTypes) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllDataTypes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getDataTypes()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__dataTypes_java_cache(null);
                                this.get__dataTypes().clear();
                            },
                            getLibraries: function () {
                                return _.kotlin.toList(this.get__libraries().values());
                            },
                            setLibraries: function (libraries) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (libraries === null || libraries === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__libraries_java_cache(null);
                                if (!Kotlin.equals(this.get__libraries(), libraries)) {
                                    this.get__libraries().clear();
                                    {
                                        var tmp$0 = libraries.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__libraries().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = libraries.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f22, this, elem));
                                            elem.setContainmentRefName('libraries');
                                        }
                                    }
                                }
                            },
                            addLibraries: function (libraries) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__libraries_java_cache(null);
                                libraries.setEContainer(this, Kotlin.b0(_f.f23, this, libraries));
                                libraries.setContainmentRefName('libraries');
                                this.get__libraries().put(libraries.getName(), libraries);
                            },
                            addAllLibraries: function (libraries) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__libraries_java_cache(null);
                                {
                                    var tmp$0 = libraries.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__libraries().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = libraries.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f24, this, el_0));
                                        el_0.setContainmentRefName('libraries');
                                    }
                                }
                            },
                            removeLibraries: function (libraries) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__libraries_java_cache(null);
                                if (this.get__libraries().size() !== 0 && this.get__libraries().containsKey(libraries.getName())) {
                                    this.get__libraries().remove(libraries.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = libraries) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = libraries) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllLibraries: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getLibraries()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__libraries_java_cache(null);
                                this.get__libraries().clear();
                            },
                            getHubs: function () {
                                return _.kotlin.toList(this.get__hubs().values());
                            },
                            setHubs: function (hubs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (hubs === null || hubs === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__hubs_java_cache(null);
                                if (!Kotlin.equals(this.get__hubs(), hubs)) {
                                    this.get__hubs().clear();
                                    {
                                        var tmp$0 = hubs.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__hubs().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = hubs.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f25, this, elem));
                                            elem.setContainmentRefName('hubs');
                                        }
                                    }
                                }
                            },
                            addHubs: function (hubs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__hubs_java_cache(null);
                                hubs.setEContainer(this, Kotlin.b0(_f.f26, this, hubs));
                                hubs.setContainmentRefName('hubs');
                                this.get__hubs().put(hubs.getName(), hubs);
                            },
                            addAllHubs: function (hubs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__hubs_java_cache(null);
                                {
                                    var tmp$0 = hubs.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__hubs().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = hubs.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f27, this, el_0));
                                        el_0.setContainmentRefName('hubs');
                                    }
                                }
                            },
                            removeHubs: function (hubs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__hubs_java_cache(null);
                                if (this.get__hubs().size() !== 0 && this.get__hubs().containsKey(hubs.getName())) {
                                    this.get__hubs().remove(hubs.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = hubs) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = hubs) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllHubs: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getHubs()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__hubs_java_cache(null);
                                this.get__hubs().clear();
                            },
                            getMBindings: function () {
                                return this.get__mBindings();
                            },
                            setMBindings: function (mBindings) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (mBindings === null || mBindings === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__mBindings_java_cache(null);
                                if (!Kotlin.equals(this.get__mBindings(), mBindings)) {
                                    this.get__mBindings().clear();
                                    this.get__mBindings().addAll(mBindings);
                                    {
                                        var tmp$0 = mBindings.iterator();
                                        while (tmp$0.hasNext()) {
                                            var elem = tmp$0.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f28, this, elem));
                                            elem.setContainmentRefName('mBindings');
                                        }
                                    }
                                }
                            },
                            addMBindings: function (mBindings) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__mBindings_java_cache(null);
                                mBindings.setEContainer(this, Kotlin.b0(_f.f29, this, mBindings));
                                mBindings.setContainmentRefName('mBindings');
                                this.get__mBindings().add(mBindings);
                            },
                            addAllMBindings: function (mBindings) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__mBindings_java_cache(null);
                                this.get__mBindings().addAll(mBindings);
                                {
                                    var tmp$0 = mBindings.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(this, Kotlin.b0(_f.f2a, this, el));
                                        el.setContainmentRefName('mBindings');
                                    }
                                }
                            },
                            removeMBindings: function (mBindings) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__mBindings_java_cache(null);
                                if (this.get__mBindings().size() !== 0 && this.get__mBindings().indexOf(mBindings) !== -1) {
                                    this.get__mBindings().remove(this.get__mBindings().indexOf(mBindings));
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = mBindings) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = mBindings) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllMBindings: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var temp_els = this.getMBindings();
                                {
                                    var tmp$0 = temp_els.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__mBindings_java_cache(null);
                                this.get__mBindings().clear();
                            },
                            getDeployUnits: function () {
                                return _.kotlin.toList(this.get__deployUnits().values());
                            },
                            setDeployUnits: function (deployUnits) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (deployUnits === null || deployUnits === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__deployUnits_java_cache(null);
                                if (!Kotlin.equals(this.get__deployUnits(), deployUnits)) {
                                    this.get__deployUnits().clear();
                                    {
                                        var tmp$0 = deployUnits.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__deployUnits().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = deployUnits.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f2b, this, elem));
                                            elem.setContainmentRefName('deployUnits');
                                        }
                                    }
                                }
                            },
                            addDeployUnits: function (deployUnits) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__deployUnits_java_cache(null);
                                deployUnits.setEContainer(this, Kotlin.b0(_f.f2c, this, deployUnits));
                                deployUnits.setContainmentRefName('deployUnits');
                                this.get__deployUnits().put(deployUnits.getName(), deployUnits);
                            },
                            addAllDeployUnits: function (deployUnits) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__deployUnits_java_cache(null);
                                {
                                    var tmp$0 = deployUnits.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__deployUnits().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = deployUnits.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f2d, this, el_0));
                                        el_0.setContainmentRefName('deployUnits');
                                    }
                                }
                            },
                            removeDeployUnits: function (deployUnits) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__deployUnits_java_cache(null);
                                if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnits.getName())) {
                                    this.get__deployUnits().remove(deployUnits.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = deployUnits) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = deployUnits) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllDeployUnits: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getDeployUnits()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__deployUnits_java_cache(null);
                                this.get__deployUnits().clear();
                            },
                            getNodeNetworks: function () {
                                return this.get__nodeNetworks();
                            },
                            setNodeNetworks: function (nodeNetworks) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (nodeNetworks === null || nodeNetworks === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__nodeNetworks_java_cache(null);
                                if (!Kotlin.equals(this.get__nodeNetworks(), nodeNetworks)) {
                                    this.get__nodeNetworks().clear();
                                    this.get__nodeNetworks().addAll(nodeNetworks);
                                    {
                                        var tmp$0 = nodeNetworks.iterator();
                                        while (tmp$0.hasNext()) {
                                            var elem = tmp$0.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f2e, this, elem));
                                            elem.setContainmentRefName('nodeNetworks');
                                        }
                                    }
                                }
                            },
                            addNodeNetworks: function (nodeNetworks) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__nodeNetworks_java_cache(null);
                                nodeNetworks.setEContainer(this, Kotlin.b0(_f.f2f, this, nodeNetworks));
                                nodeNetworks.setContainmentRefName('nodeNetworks');
                                this.get__nodeNetworks().add(nodeNetworks);
                            },
                            addAllNodeNetworks: function (nodeNetworks) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__nodeNetworks_java_cache(null);
                                this.get__nodeNetworks().addAll(nodeNetworks);
                                {
                                    var tmp$0 = nodeNetworks.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(this, Kotlin.b0(_f.f2g, this, el));
                                        el.setContainmentRefName('nodeNetworks');
                                    }
                                }
                            },
                            removeNodeNetworks: function (nodeNetworks) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__nodeNetworks_java_cache(null);
                                if (this.get__nodeNetworks().size() !== 0 && this.get__nodeNetworks().indexOf(nodeNetworks) !== -1) {
                                    this.get__nodeNetworks().remove(this.get__nodeNetworks().indexOf(nodeNetworks));
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = nodeNetworks) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = nodeNetworks) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllNodeNetworks: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var temp_els = this.getNodeNetworks();
                                {
                                    var tmp$0 = temp_els.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__nodeNetworks_java_cache(null);
                                this.get__nodeNetworks().clear();
                            },
                            getGroups: function () {
                                return _.kotlin.toList(this.get__groups().values());
                            },
                            setGroups: function (groups) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (groups === null || groups === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__groups_java_cache(null);
                                if (!Kotlin.equals(this.get__groups(), groups)) {
                                    this.get__groups().clear();
                                    {
                                        var tmp$0 = groups.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__groups().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = groups.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f2h, this, elem));
                                            elem.setContainmentRefName('groups');
                                        }
                                    }
                                }
                            },
                            addGroups: function (groups) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__groups_java_cache(null);
                                groups.setEContainer(this, Kotlin.b0(_f.f2i, this, groups));
                                groups.setContainmentRefName('groups');
                                this.get__groups().put(groups.getName(), groups);
                            },
                            addAllGroups: function (groups) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__groups_java_cache(null);
                                {
                                    var tmp$0 = groups.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__groups().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = groups.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f2j, this, el_0));
                                        el_0.setContainmentRefName('groups');
                                    }
                                }
                            },
                            removeGroups: function (groups) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__groups_java_cache(null);
                                if (this.get__groups().size() !== 0 && this.get__groups().containsKey(groups.getName())) {
                                    this.get__groups().remove(groups.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = groups) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = groups) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllGroups: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getGroups()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__groups_java_cache(null);
                                this.get__groups().clear();
                            },
                            getGroupTypes: function () {
                                return _.kotlin.toList(this.get__groupTypes().values());
                            },
                            setGroupTypes: function (groupTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (groupTypes === null || groupTypes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__groupTypes_java_cache(null);
                                if (!Kotlin.equals(this.get__groupTypes(), groupTypes)) {
                                    this.get__groupTypes().clear();
                                    {
                                        var tmp$0 = groupTypes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__groupTypes().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = groupTypes.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f2k, this, elem));
                                            elem.setContainmentRefName('groupTypes');
                                        }
                                    }
                                }
                            },
                            addGroupTypes: function (groupTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__groupTypes_java_cache(null);
                                groupTypes.setEContainer(this, Kotlin.b0(_f.f2l, this, groupTypes));
                                groupTypes.setContainmentRefName('groupTypes');
                                this.get__groupTypes().put(groupTypes.getName(), groupTypes);
                            },
                            addAllGroupTypes: function (groupTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__groupTypes_java_cache(null);
                                {
                                    var tmp$0 = groupTypes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__groupTypes().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = groupTypes.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f2m, this, el_0));
                                        el_0.setContainmentRefName('groupTypes');
                                    }
                                }
                            },
                            removeGroupTypes: function (groupTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__groupTypes_java_cache(null);
                                if (this.get__groupTypes().size() !== 0 && this.get__groupTypes().containsKey(groupTypes.getName())) {
                                    this.get__groupTypes().remove(groupTypes.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = groupTypes) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = groupTypes) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllGroupTypes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getGroupTypes()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__groupTypes_java_cache(null);
                                this.get__groupTypes().clear();
                            },
                            getAdaptationPrimitiveTypes: function () {
                                return _.kotlin.toList(this.get__adaptationPrimitiveTypes().values());
                            },
                            setAdaptationPrimitiveTypes: function (adaptationPrimitiveTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (adaptationPrimitiveTypes === null || adaptationPrimitiveTypes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__adaptationPrimitiveTypes_java_cache(null);
                                if (!Kotlin.equals(this.get__adaptationPrimitiveTypes(), adaptationPrimitiveTypes)) {
                                    this.get__adaptationPrimitiveTypes().clear();
                                    {
                                        var tmp$0 = adaptationPrimitiveTypes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__adaptationPrimitiveTypes().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = adaptationPrimitiveTypes.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f2n, this, elem));
                                            elem.setContainmentRefName('adaptationPrimitiveTypes');
                                        }
                                    }
                                }
                            },
                            addAdaptationPrimitiveTypes: function (adaptationPrimitiveTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__adaptationPrimitiveTypes_java_cache(null);
                                adaptationPrimitiveTypes.setEContainer(this, Kotlin.b0(_f.f2o, this, adaptationPrimitiveTypes));
                                adaptationPrimitiveTypes.setContainmentRefName('adaptationPrimitiveTypes');
                                this.get__adaptationPrimitiveTypes().put(adaptationPrimitiveTypes.getName(), adaptationPrimitiveTypes);
                            },
                            addAllAdaptationPrimitiveTypes: function (adaptationPrimitiveTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__adaptationPrimitiveTypes_java_cache(null);
                                {
                                    var tmp$0 = adaptationPrimitiveTypes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__adaptationPrimitiveTypes().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = adaptationPrimitiveTypes.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f2p, this, el_0));
                                        el_0.setContainmentRefName('adaptationPrimitiveTypes');
                                    }
                                }
                            },
                            removeAdaptationPrimitiveTypes: function (adaptationPrimitiveTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__adaptationPrimitiveTypes_java_cache(null);
                                if (this.get__adaptationPrimitiveTypes().size() !== 0 && this.get__adaptationPrimitiveTypes().containsKey(adaptationPrimitiveTypes.getName())) {
                                    this.get__adaptationPrimitiveTypes().remove(adaptationPrimitiveTypes.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = adaptationPrimitiveTypes) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = adaptationPrimitiveTypes) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllAdaptationPrimitiveTypes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getAdaptationPrimitiveTypes()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__adaptationPrimitiveTypes_java_cache(null);
                                this.get__adaptationPrimitiveTypes().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createContainerRoot();
                                subResult.put(this, selfObjectClone);
                                {
                                    var tmp$0 = this.getNodes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$1 = this.getTypeDefinitions().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$2 = this.getRepositories().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$3 = this.getDataTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_2 = tmp$3.next();
                                        sub_2.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$4 = this.getLibraries().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub_3 = tmp$4.next();
                                        sub_3.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$5 = this.getHubs().iterator();
                                    while (tmp$5.hasNext()) {
                                        var sub_4 = tmp$5.next();
                                        sub_4.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$6 = this.getMBindings().iterator();
                                    while (tmp$6.hasNext()) {
                                        var sub_5 = tmp$6.next();
                                        sub_5.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$7 = this.getDeployUnits().iterator();
                                    while (tmp$7.hasNext()) {
                                        var sub_6 = tmp$7.next();
                                        sub_6.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$8 = this.getNodeNetworks().iterator();
                                    while (tmp$8.hasNext()) {
                                        var sub_7 = tmp$8.next();
                                        sub_7.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$9 = this.getGroups().iterator();
                                    while (tmp$9.hasNext()) {
                                        var sub_8 = tmp$9.next();
                                        sub_8.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$10 = this.getGroupTypes().iterator();
                                    while (tmp$10.hasNext()) {
                                        var sub_9 = tmp$10.next();
                                        sub_9.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$11 = this.getAdaptationPrimitiveTypes().iterator();
                                    while (tmp$11.hasNext()) {
                                        var sub_10 = tmp$11.next();
                                        sub_10.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getNodes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addNodes(sub);
                                        }
                                        else {
                                            clonedSelfObject.addNodes(addrs.get(sub));
                                        }
                                    }
                                }
                                {
                                    var tmp$1 = this.getTypeDefinitions().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addTypeDefinitions(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addTypeDefinitions(addrs.get(sub_0));
                                        }
                                    }
                                }
                                {
                                    var tmp$2 = this.getRepositories().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                                            clonedSelfObject.addRepositories(sub_1);
                                        }
                                        else {
                                            clonedSelfObject.addRepositories(addrs.get(sub_1));
                                        }
                                    }
                                }
                                {
                                    var tmp$3 = this.getDataTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_2 = tmp$3.next();
                                        if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDataTypes(sub_2);
                                        }
                                        else {
                                            clonedSelfObject.addDataTypes(addrs.get(sub_2));
                                        }
                                    }
                                }
                                {
                                    var tmp$4 = this.getLibraries().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub_3 = tmp$4.next();
                                        if (mutableOnly && sub_3.isRecursiveReadOnly()) {
                                            clonedSelfObject.addLibraries(sub_3);
                                        }
                                        else {
                                            clonedSelfObject.addLibraries(addrs.get(sub_3));
                                        }
                                    }
                                }
                                {
                                    var tmp$5 = this.getHubs().iterator();
                                    while (tmp$5.hasNext()) {
                                        var sub_4 = tmp$5.next();
                                        if (mutableOnly && sub_4.isRecursiveReadOnly()) {
                                            clonedSelfObject.addHubs(sub_4);
                                        }
                                        else {
                                            clonedSelfObject.addHubs(addrs.get(sub_4));
                                        }
                                    }
                                }
                                {
                                    var tmp$6 = this.getMBindings().iterator();
                                    while (tmp$6.hasNext()) {
                                        var sub_5 = tmp$6.next();
                                        if (mutableOnly && sub_5.isRecursiveReadOnly()) {
                                            clonedSelfObject.addMBindings(sub_5);
                                        }
                                        else {
                                            clonedSelfObject.addMBindings(addrs.get(sub_5));
                                        }
                                    }
                                }
                                {
                                    var tmp$7 = this.getDeployUnits().iterator();
                                    while (tmp$7.hasNext()) {
                                        var sub_6 = tmp$7.next();
                                        if (mutableOnly && sub_6.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub_6);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub_6));
                                        }
                                    }
                                }
                                {
                                    var tmp$8 = this.getNodeNetworks().iterator();
                                    while (tmp$8.hasNext()) {
                                        var sub_7 = tmp$8.next();
                                        if (mutableOnly && sub_7.isRecursiveReadOnly()) {
                                            clonedSelfObject.addNodeNetworks(sub_7);
                                        }
                                        else {
                                            clonedSelfObject.addNodeNetworks(addrs.get(sub_7));
                                        }
                                    }
                                }
                                {
                                    var tmp$9 = this.getGroups().iterator();
                                    while (tmp$9.hasNext()) {
                                        var sub_8 = tmp$9.next();
                                        if (mutableOnly && sub_8.isRecursiveReadOnly()) {
                                            clonedSelfObject.addGroups(sub_8);
                                        }
                                        else {
                                            clonedSelfObject.addGroups(addrs.get(sub_8));
                                        }
                                    }
                                }
                                {
                                    var tmp$10 = this.getGroupTypes().iterator();
                                    while (tmp$10.hasNext()) {
                                        var sub_9 = tmp$10.next();
                                        if (mutableOnly && sub_9.isRecursiveReadOnly()) {
                                            clonedSelfObject.addGroupTypes(sub_9);
                                        }
                                        else {
                                            clonedSelfObject.addGroupTypes(addrs.get(sub_9));
                                        }
                                    }
                                }
                                {
                                    var tmp$11 = this.getAdaptationPrimitiveTypes().iterator();
                                    while (tmp$11.hasNext()) {
                                        var sub_10 = tmp$11.next();
                                        if (mutableOnly && sub_10.isRecursiveReadOnly()) {
                                            clonedSelfObject.addAdaptationPrimitiveTypes(sub_10);
                                        }
                                        else {
                                            clonedSelfObject.addAdaptationPrimitiveTypes(addrs.get(sub_10));
                                        }
                                    }
                                }
                                {
                                    var tmp$12 = this.getNodes().iterator();
                                    while (tmp$12.hasNext()) {
                                        var sub_11 = tmp$12.next();
                                        sub_11.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$13 = this.getTypeDefinitions().iterator();
                                    while (tmp$13.hasNext()) {
                                        var sub_12 = tmp$13.next();
                                        sub_12.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$14 = this.getRepositories().iterator();
                                    while (tmp$14.hasNext()) {
                                        var sub_13 = tmp$14.next();
                                        sub_13.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$15 = this.getDataTypes().iterator();
                                    while (tmp$15.hasNext()) {
                                        var sub_14 = tmp$15.next();
                                        sub_14.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$16 = this.getLibraries().iterator();
                                    while (tmp$16.hasNext()) {
                                        var sub_15 = tmp$16.next();
                                        sub_15.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$17 = this.getHubs().iterator();
                                    while (tmp$17.hasNext()) {
                                        var sub_16 = tmp$17.next();
                                        sub_16.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$18 = this.getMBindings().iterator();
                                    while (tmp$18.hasNext()) {
                                        var sub_17 = tmp$18.next();
                                        sub_17.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$19 = this.getDeployUnits().iterator();
                                    while (tmp$19.hasNext()) {
                                        var sub_18 = tmp$19.next();
                                        sub_18.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$20 = this.getNodeNetworks().iterator();
                                    while (tmp$20.hasNext()) {
                                        var sub_19 = tmp$20.next();
                                        sub_19.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$21 = this.getGroups().iterator();
                                    while (tmp$21.hasNext()) {
                                        var sub_20 = tmp$21.next();
                                        sub_20.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$22 = this.getGroupTypes().iterator();
                                    while (tmp$22.hasNext()) {
                                        var sub_21 = tmp$22.next();
                                        sub_21.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$23 = this.getAdaptationPrimitiveTypes().iterator();
                                    while (tmp$23.hasNext()) {
                                        var sub_22 = tmp$23.next();
                                        sub_22.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findNodesByID: function (key) {
                                return this.get__nodes().get(key);
                            },
                            findTypeDefinitionsByID: function (key) {
                                return this.get__typeDefinitions().get(key);
                            },
                            findRepositoriesByID: function (key) {
                                return this.get__repositories().get(key);
                            },
                            findDataTypesByID: function (key) {
                                return this.get__dataTypes().get(key);
                            },
                            findLibrariesByID: function (key) {
                                return this.get__libraries().get(key);
                            },
                            findHubsByID: function (key) {
                                return this.get__hubs().get(key);
                            },
                            findDeployUnitsByID: function (key) {
                                return this.get__deployUnits().get(key);
                            },
                            findGroupsByID: function (key) {
                                return this.get__groups().get(key);
                            },
                            findGroupTypesByID: function (key) {
                                return this.get__groupTypes().get(key);
                            },
                            findAdaptationPrimitiveTypesByID: function (key) {
                                return this.get__adaptationPrimitiveTypes().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 11; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'nodes') {
                                            {
                                                var objFound = this.findNodesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$2 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'typeDefinitions') {
                                            {
                                                var objFound_0 = this.findTypeDefinitionsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_0 !== null && objFound_0 !== undefined)) {
                                                    tmp$2 = objFound_0.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_0;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2)
                                        if (tmp$0 === 'repositories') {
                                            {
                                                var objFound_1 = this.findRepositoriesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_1 !== null && objFound_1 !== undefined)) {
                                                    tmp$2 = objFound_1.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_1;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 3)
                                        if (tmp$0 === 'dataTypes') {
                                            {
                                                var objFound_2 = this.findDataTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_2 !== null && objFound_2 !== undefined)) {
                                                    tmp$2 = objFound_2.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_2;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 4)
                                        if (tmp$0 === 'libraries') {
                                            {
                                                var objFound_3 = this.findLibrariesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_3 !== null && objFound_3 !== undefined)) {
                                                    tmp$2 = objFound_3.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_3;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 5)
                                        if (tmp$0 === 'hubs') {
                                            {
                                                var objFound_4 = this.findHubsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_4 !== null && objFound_4 !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$2 = objFound_4;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 6)
                                        if (tmp$0 === 'deployUnits') {
                                            {
                                                var objFound_5 = this.findDeployUnitsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_5 !== null && objFound_5 !== undefined)) {
                                                    tmp$2 = objFound_5.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_5;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 7)
                                        if (tmp$0 === 'groups') {
                                            {
                                                var objFound_6 = this.findGroupsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_6 !== null && objFound_6 !== undefined)) {
                                                    tmp$2 = objFound_6.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_6;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 8)
                                        if (tmp$0 === 'groupTypes') {
                                            {
                                                var objFound_7 = this.findGroupTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_7 !== null && objFound_7 !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$2 = objFound_7;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 9)
                                        if (tmp$0 === 'adaptationPrimitiveTypes') {
                                            {
                                                var objFound_8 = this.findAdaptationPrimitiveTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_8 !== null && objFound_8 !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$2 = objFound_8;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 10) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.ContainerRoot)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (this.getNodes().size() !== similarObjCasted.getNodes().size()) {
                                    return false;
                                }
                                if (this.getTypeDefinitions().size() !== similarObjCasted.getTypeDefinitions().size()) {
                                    return false;
                                }
                                if (this.getRepositories().size() !== similarObjCasted.getRepositories().size()) {
                                    return false;
                                }
                                if (this.getDataTypes().size() !== similarObjCasted.getDataTypes().size()) {
                                    return false;
                                }
                                if (this.getLibraries().size() !== similarObjCasted.getLibraries().size()) {
                                    return false;
                                }
                                if (this.getHubs().size() !== similarObjCasted.getHubs().size()) {
                                    return false;
                                }
                                if (this.getMBindings().size() !== similarObjCasted.getMBindings().size()) {
                                    return false;
                                }
                                if (this.getDeployUnits().size() !== similarObjCasted.getDeployUnits().size()) {
                                    return false;
                                }
                                if (this.getNodeNetworks().size() !== similarObjCasted.getNodeNetworks().size()) {
                                    return false;
                                }
                                if (this.getGroups().size() !== similarObjCasted.getGroups().size()) {
                                    return false;
                                }
                                if (this.getGroupTypes().size() !== similarObjCasted.getGroupTypes().size()) {
                                    return false;
                                }
                                if (this.getAdaptationPrimitiveTypes().size() !== similarObjCasted.getAdaptationPrimitiveTypes().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getNodes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var foundedElement = similarObjCasted.findNodesByID(subElement.getName());
                                        if (foundedElement === null || foundedElement === undefined || !Kotlin.equals(foundedElement, subElement)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$1 = this.getTypeDefinitions().iterator();
                                    while (tmp$1.hasNext()) {
                                        var subElement_0 = tmp$1.next();
                                        var foundedElement_0 = similarObjCasted.findTypeDefinitionsByID(subElement_0.getName());
                                        if (foundedElement_0 === null || foundedElement_0 === undefined || !Kotlin.equals(foundedElement_0, subElement_0)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$2 = this.getRepositories().iterator();
                                    while (tmp$2.hasNext()) {
                                        var subElement_1 = tmp$2.next();
                                        var foundedElement_1 = similarObjCasted.findRepositoriesByID(subElement_1.getName());
                                        if (foundedElement_1 === null || foundedElement_1 === undefined || !Kotlin.equals(foundedElement_1, subElement_1)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$3 = this.getDataTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var subElement_2 = tmp$3.next();
                                        var foundedElement_2 = similarObjCasted.findDataTypesByID(subElement_2.getName());
                                        if (foundedElement_2 === null || foundedElement_2 === undefined || !Kotlin.equals(foundedElement_2, subElement_2)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$4 = this.getLibraries().iterator();
                                    while (tmp$4.hasNext()) {
                                        var subElement_3 = tmp$4.next();
                                        var foundedElement_3 = similarObjCasted.findLibrariesByID(subElement_3.getName());
                                        if (foundedElement_3 === null || foundedElement_3 === undefined || !Kotlin.equals(foundedElement_3, subElement_3)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$5 = this.getHubs().iterator();
                                    while (tmp$5.hasNext()) {
                                        var subElement_4 = tmp$5.next();
                                        var foundedElement_4 = similarObjCasted.findHubsByID(subElement_4.getName());
                                        if (foundedElement_4 === null || foundedElement_4 === undefined || !Kotlin.equals(foundedElement_4, subElement_4)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$6 = this.getMBindings().iterator();
                                    while (tmp$6.hasNext()) {
                                        var subElement_5 = tmp$6.next();
                                        var lookEqualsSub = false;
                                        {
                                            var tmp$7 = similarObjCasted.getMBindings().iterator();
                                            while (tmp$7.hasNext()) {
                                                var subElement2 = tmp$7.next();
                                                if (Kotlin.equals(subElement_5, subElement2)) {
                                                    lookEqualsSub = true;
                                                }
                                            }
                                        }
                                        if (!lookEqualsSub) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$8 = this.getDeployUnits().iterator();
                                    while (tmp$8.hasNext()) {
                                        var subElement_6 = tmp$8.next();
                                        var foundedElement_5 = similarObjCasted.findDeployUnitsByID(subElement_6.getName());
                                        if (foundedElement_5 === null || foundedElement_5 === undefined || !Kotlin.equals(foundedElement_5, subElement_6)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$9 = this.getNodeNetworks().iterator();
                                    while (tmp$9.hasNext()) {
                                        var subElement_7 = tmp$9.next();
                                        var lookEqualsSub_0 = false;
                                        {
                                            var tmp$10 = similarObjCasted.getNodeNetworks().iterator();
                                            while (tmp$10.hasNext()) {
                                                var subElement2_0 = tmp$10.next();
                                                if (Kotlin.equals(subElement_7, subElement2_0)) {
                                                    lookEqualsSub_0 = true;
                                                }
                                            }
                                        }
                                        if (!lookEqualsSub_0) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$11 = this.getGroups().iterator();
                                    while (tmp$11.hasNext()) {
                                        var subElement_8 = tmp$11.next();
                                        var foundedElement_6 = similarObjCasted.findGroupsByID(subElement_8.getName());
                                        if (foundedElement_6 === null || foundedElement_6 === undefined || !Kotlin.equals(foundedElement_6, subElement_8)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$12 = this.getGroupTypes().iterator();
                                    while (tmp$12.hasNext()) {
                                        var subElement_9 = tmp$12.next();
                                        var foundedElement_7 = similarObjCasted.findGroupTypesByID(subElement_9.getName());
                                        if (foundedElement_7 === null || foundedElement_7 === undefined || !Kotlin.equals(foundedElement_7, subElement_9)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$13 = this.getAdaptationPrimitiveTypes().iterator();
                                    while (tmp$13.hasNext()) {
                                        var subElement_10 = tmp$13.next();
                                        var foundedElement_8 = similarObjCasted.findAdaptationPrimitiveTypesByID(subElement_10.getName());
                                        if (foundedElement_8 === null || foundedElement_8 === undefined || !Kotlin.equals(foundedElement_8, subElement_10)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c1l = Kotlin.createTrait(c1i, {
                        })
                        , cg = Kotlin.createTrait(c1h, c1l, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getLink().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubinitBy = this.getInitBy();
                                if (subsubsubsubinitBy !== null && subsubsubsubinitBy !== undefined) {
                                    subsubsubsubinitBy.setRecursiveReadOnly();
                                }
                                var subsubsubsubtarget = this.getTarget();
                                if (subsubsubsubtarget !== null && subsubsubsubtarget !== undefined) {
                                    subsubsubsubtarget.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            get__link_java_cache: function () {
                                return this.$_link_java_cache;
                            },
                            set__link_java_cache: function (tmp$0) {
                                this.$_link_java_cache = tmp$0;
                            },
                            get__link: function () {
                                return this.$_link;
                            },
                            get__initBy: function () {
                                return this.$_initBy;
                            },
                            set__initBy: function (tmp$0) {
                                this.$_initBy = tmp$0;
                            },
                            get__target: function () {
                                return this.$_target;
                            },
                            set__target: function (tmp$0) {
                                this.$_target = tmp$0;
                            },
                            delete: function () {
                                {
                                    var tmp$0 = this.get__link().iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.delete();
                                    }
                                }
                                var tmp$1;
                                (tmp$1 = this.get__link()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__link_java_cache(null);
                                this.set__initBy(null);
                                this.set__target(null);
                            },
                            getLink: function () {
                                return this.get__link();
                            },
                            setLink: function (link) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (link === null || link === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__link_java_cache(null);
                                if (!Kotlin.equals(this.get__link(), link)) {
                                    this.get__link().clear();
                                    this.get__link().addAll(link);
                                    {
                                        var tmp$0 = link.iterator();
                                        while (tmp$0.hasNext()) {
                                            var elem = tmp$0.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f2q, this, elem));
                                            elem.setContainmentRefName('link');
                                        }
                                    }
                                }
                            },
                            addLink: function (link) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__link_java_cache(null);
                                link.setEContainer(this, Kotlin.b0(_f.f2r, this, link));
                                link.setContainmentRefName('link');
                                this.get__link().add(link);
                            },
                            addAllLink: function (link) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__link_java_cache(null);
                                this.get__link().addAll(link);
                                {
                                    var tmp$0 = link.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(this, Kotlin.b0(_f.f2s, this, el));
                                        el.setContainmentRefName('link');
                                    }
                                }
                            },
                            removeLink: function (link) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__link_java_cache(null);
                                if (this.get__link().size() !== 0 && this.get__link().indexOf(link) !== -1) {
                                    this.get__link().remove(this.get__link().indexOf(link));
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = link) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = link) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllLink: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var temp_els = this.getLink();
                                {
                                    var tmp$0 = temp_els.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__link_java_cache(null);
                                this.get__link().clear();
                            },
                            getInitBy: function () {
                                return this.get__initBy();
                            },
                            setInitBy: function (initBy) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__initBy(), initBy)) {
                                    this.set__initBy(initBy);
                                }
                            },
                            getTarget: function () {
                                return this.get__target();
                            },
                            setTarget: function (target) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__target(), target)) {
                                    this.set__target(target);
                                }
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createNodeNetwork();
                                subResult.put(this, selfObjectClone);
                                {
                                    var tmp$0 = this.getLink().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getLink().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addLink(sub);
                                        }
                                        else {
                                            clonedSelfObject.addLink(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getInitBy() !== null && this.getInitBy() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getInitBy()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setInitBy((tmp$2 = this.getInitBy()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setInitBy(addrs.get(this.getInitBy()));
                                    }
                                }
                                if (this.getTarget() !== null && this.getTarget() !== undefined) {
                                    var tmp$3;
                                    if (mutableOnly && ((tmp$3 = this.getTarget()) !== null && tmp$3 !== undefined ? tmp$3 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$4;
                                        clonedSelfObject.setTarget((tmp$4 = this.getTarget()) !== null && tmp$4 !== undefined ? tmp$4 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setTarget(addrs.get(this.getTarget()));
                                    }
                                }
                                {
                                    var tmp$5 = this.getLink().iterator();
                                    while (tmp$5.hasNext()) {
                                        var sub_0 = tmp$5.next();
                                        sub_0.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findByPath: function (query) {
                                return null;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.NodeNetwork)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (this.getLink().size() !== similarObjCasted.getLink().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getLink().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var lookEqualsSub = false;
                                        {
                                            var tmp$1 = similarObjCasted.getLink().iterator();
                                            while (tmp$1.hasNext()) {
                                                var subElement2 = tmp$1.next();
                                                if (Kotlin.equals(subElement, subElement2)) {
                                                    lookEqualsSub = true;
                                                }
                                            }
                                        }
                                        if (!lookEqualsSub) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c1b = Kotlin.createTrait(c1i, c18, {
                        })
                        , ch = Kotlin.createTrait(c1h, c1b, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__url: function () {
                                return this.$_url;
                            },
                            set__url: function (tmp$0) {
                                this.$_url = tmp$0;
                            },
                            get__units_java_cache: function () {
                                return this.$_units_java_cache;
                            },
                            set__units_java_cache: function (tmp$0) {
                                this.$_units_java_cache = tmp$0;
                            },
                            get__units: function () {
                                return this.$_units;
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__units()) !== null && tmp$0 !== undefined ? tmp$0.clear() : null;
                                this.set__units_java_cache(null);
                            },
                            getUrl: function () {
                                return this.get__url();
                            },
                            setUrl: function (url) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__url(url);
                            },
                            getUnits: function () {
                                return _.kotlin.toList(this.get__units().values());
                            },
                            setUnits: function (units) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (units === null || units === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__units_java_cache(null);
                                if (!Kotlin.equals(this.get__units(), units)) {
                                    this.get__units().clear();
                                    {
                                        var tmp$0 = units.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__units().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addUnits: function (units) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__units_java_cache(null);
                                this.get__units().put(units.getName(), units);
                            },
                            addAllUnits: function (units) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__units_java_cache(null);
                                {
                                    var tmp$0 = units.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__units().put(el.getName(), el);
                                    }
                                }
                            },
                            removeUnits: function (units) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__units_java_cache(null);
                                if (this.get__units().size() !== 0 && this.get__units().containsKey(units.getName())) {
                                    this.get__units().remove(units.getName());
                                }
                            },
                            removeAllUnits: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__units_java_cache(null);
                                this.get__units().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createRepository();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setUrl(this.getUrl());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findUnitsByID: function (key) {
                                return this.get__units().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = 'units';
                                var optionalDetected = firstSepIndex !== 5;
                                if (optionalDetected) {
                                    extraReadChar = extraReadChar - 2;
                                }
                                if (_.js.indexOf(query, '{') === 0) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    if (optionalDetected) {
                                        if (_.js.indexOf(query, '/') !== -1) {
                                            queryID = query.substring(0, _.js.indexOf(query, '/'));
                                        }
                                        else {
                                            queryID = query.substring(0, _.js.get_size(query));
                                        }
                                    }
                                    else {
                                        queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                    }
                                }
                                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
                                tmp$0 = query;
                                if (optionalDetected) {
                                    tmp$1 = 0;
                                }
                                else {
                                    tmp$1 = _.js.get_size(relationName);
                                }
                                var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                for (tmp$3 = 0, tmp$2 = relationName; tmp$3 < 2; ++tmp$3) {
                                    if (tmp$3 === 0)
                                        if (tmp$2 === 'units') {
                                            {
                                                var objFound = this.findUnitsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$4 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$4 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$3 === 1) {
                                        tmp$4 = null;
                                    }
                                }
                                return tmp$4;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.Repository)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getUrl(), similarObjCasted.getUrl())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1v = Kotlin.createTrait(c1i, c1j, {
                        })
                        , ci = Kotlin.createTrait(c1h, c1v, c6, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getGenericTypes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__optional: function () {
                                return this.$_optional;
                            },
                            set__optional: function (tmp$0) {
                                this.$_optional = tmp$0;
                            },
                            get__state: function () {
                                return this.$_state;
                            },
                            set__state: function (tmp$0) {
                                this.$_state = tmp$0;
                            },
                            get__datatype: function () {
                                return this.$_datatype;
                            },
                            set__datatype: function (tmp$0) {
                                this.$_datatype = tmp$0;
                            },
                            get__fragmentDependant: function () {
                                return this.$_fragmentDependant;
                            },
                            set__fragmentDependant: function (tmp$0) {
                                this.$_fragmentDependant = tmp$0;
                            },
                            delete: function () {
                            },
                            getOptional: function () {
                                return this.get__optional();
                            },
                            setOptional: function (optional) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__optional(optional);
                            },
                            getState: function () {
                                return this.get__state();
                            },
                            setState: function (state) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__state(state);
                            },
                            getDatatype: function () {
                                return this.get__datatype();
                            },
                            setDatatype: function (datatype) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__datatype(datatype);
                            },
                            getFragmentDependant: function () {
                                return this.get__fragmentDependant();
                            },
                            setFragmentDependant: function (fragmentDependant) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__fragmentDependant(fragmentDependant);
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createDictionaryAttribute();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setOptional(this.getOptional());
                                selfObjectClone.setState(this.getState());
                                selfObjectClone.setDatatype(this.getDatatype());
                                selfObjectClone.setFragmentDependant(this.getFragmentDependant());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getGenericTypes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addGenericTypes(sub);
                                        }
                                        else {
                                            clonedSelfObject.addGenericTypes(addrs.get(sub));
                                        }
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.DictionaryAttribute)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getOptional(), similarObjCasted.getOptional())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getState(), similarObjCasted.getState())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDatatype(), similarObjCasted.getDatatype())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFragmentDependant(), similarObjCasted.getFragmentDependant())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1y = Kotlin.createTrait(c1i, {
                        })
                        , cj = Kotlin.createTrait(c1h, c1y, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                var subsubsubsubattribute = this.getAttribute();
                                if (subsubsubsubattribute !== null && subsubsubsubattribute !== undefined) {
                                    subsubsubsubattribute.setRecursiveReadOnly();
                                }
                                var subsubsubsubtargetNode = this.getTargetNode();
                                if (subsubsubsubtargetNode !== null && subsubsubsubtargetNode !== undefined) {
                                    subsubsubsubtargetNode.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            get__value: function () {
                                return this.$_value;
                            },
                            set__value: function (tmp$0) {
                                this.$_value = tmp$0;
                            },
                            get__attribute: function () {
                                return this.$_attribute;
                            },
                            set__attribute: function (tmp$0) {
                                this.$_attribute = tmp$0;
                            },
                            get__targetNode: function () {
                                return this.$_targetNode;
                            },
                            set__targetNode: function (tmp$0) {
                                this.$_targetNode = tmp$0;
                            },
                            delete: function () {
                                this.set__attribute(null);
                                this.set__targetNode(null);
                            },
                            getValue: function () {
                                return this.get__value();
                            },
                            setValue: function (value) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__value(value);
                            },
                            getAttribute: function () {
                                return this.get__attribute();
                            },
                            setAttribute: function (attribute) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__attribute(), attribute)) {
                                    this.set__attribute(attribute);
                                }
                            },
                            getTargetNode: function () {
                                return this.get__targetNode();
                            },
                            setTargetNode: function (targetNode) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__targetNode(), targetNode)) {
                                    this.set__targetNode(targetNode);
                                }
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createDictionaryValue();
                                selfObjectClone.setValue(this.getValue());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (this.getAttribute() !== null && this.getAttribute() !== undefined) {
                                    var tmp$0;
                                    if (mutableOnly && ((tmp$0 = this.getAttribute()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$1;
                                        clonedSelfObject.setAttribute((tmp$1 = this.getAttribute()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setAttribute(addrs.get(this.getAttribute()));
                                    }
                                }
                                if (this.getTargetNode() !== null && this.getTargetNode() !== undefined) {
                                    var tmp$2;
                                    if (mutableOnly && ((tmp$2 = this.getTargetNode()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$3;
                                        clonedSelfObject.setTargetNode((tmp$3 = this.getTargetNode()) !== null && tmp$3 !== undefined ? tmp$3 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setTargetNode(addrs.get(this.getTargetNode()));
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findByPath: function (query) {
                                return null;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.DictionaryValue)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getValue(), similarObjCasted.getValue())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1g = Kotlin.createTrait(c1i, c18, c1r, {
                        })
                        , ck = Kotlin.createTrait(c1h, c1g, cx, c11, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                var subsubsubsubtypeDefinition = this.getTypeDefinition();
                                if (subsubsubsubtypeDefinition !== null && subsubsubsubtypeDefinition !== undefined) {
                                    subsubsubsubtypeDefinition.setRecursiveReadOnly();
                                }
                                var subsubsubsubdictionary = this.getDictionary();
                                if (subsubsubsubdictionary !== null && subsubsubsubdictionary !== undefined) {
                                    subsubsubsubdictionary.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__dictionary()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createChannel();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setMetaData(this.getMetaData());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionary = this.getDictionary();
                                if (subsubsubsubdictionary !== null && subsubsubsubdictionary !== undefined) {
                                    subsubsubsubdictionary.getClonelazy(subResult, _factories, mutableOnly);
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (this.getTypeDefinition() !== null && this.getTypeDefinition() !== undefined) {
                                    var tmp$0;
                                    if (mutableOnly && ((tmp$0 = this.getTypeDefinition()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$1;
                                        clonedSelfObject.setTypeDefinition((tmp$1 = this.getTypeDefinition()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setTypeDefinition(addrs.get(this.getTypeDefinition()));
                                    }
                                }
                                if (this.getDictionary() !== null && this.getDictionary() !== undefined) {
                                    var tmp$2;
                                    if (mutableOnly && ((tmp$2 = this.getDictionary()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$3;
                                        clonedSelfObject.setDictionary((tmp$3 = this.getDictionary()) !== null && tmp$3 !== undefined ? tmp$3 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionary(addrs.get(this.getDictionary()));
                                    }
                                }
                                var subsubsubdictionary = this.getDictionary();
                                if (subsubsubdictionary !== null && subsubsubdictionary !== undefined) {
                                    subsubsubdictionary.resolve(addrs, readOnly, mutableOnly);
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.Channel)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getMetaData(), similarObjCasted.getMetaData())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionary(), similarObjCasted.getDictionary())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1u = Kotlin.createTrait(c1i, c18, {
                        })
                        , cl = Kotlin.createTrait(c1h, c1u, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                var subsubsubsubref = this.getRef();
                                if (subsubsubsubref !== null && subsubsubsubref !== undefined) {
                                    subsubsubsubref.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$0 = this.getMappings().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__optional: function () {
                                return this.$_optional;
                            },
                            set__optional: function (tmp$0) {
                                this.$_optional = tmp$0;
                            },
                            get__noDependency: function () {
                                return this.$_noDependency;
                            },
                            set__noDependency: function (tmp$0) {
                                this.$_noDependency = tmp$0;
                            },
                            get__ref: function () {
                                return this.$_ref;
                            },
                            set__ref: function (tmp$0) {
                                this.$_ref = tmp$0;
                            },
                            get__mappings_java_cache: function () {
                                return this.$_mappings_java_cache;
                            },
                            set__mappings_java_cache: function (tmp$0) {
                                this.$_mappings_java_cache = tmp$0;
                            },
                            get__mappings: function () {
                                return this.$_mappings;
                            },
                            delete: function () {
                                {
                                    var tmp$0 = this.get__mappings().iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.delete();
                                    }
                                }
                                this.set__ref(null);
                                var tmp$1;
                                (tmp$1 = this.get__mappings()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__mappings_java_cache(null);
                            },
                            getOptional: function () {
                                return this.get__optional();
                            },
                            setOptional: function (optional) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__optional(optional);
                            },
                            getNoDependency: function () {
                                return this.get__noDependency();
                            },
                            setNoDependency: function (noDependency) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__noDependency(noDependency);
                            },
                            getRef: function () {
                                return this.get__ref();
                            },
                            setRef: function (ref) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__ref(), ref)) {
                                    this.set__ref(ref);
                                }
                            },
                            getMappings: function () {
                                return this.get__mappings();
                            },
                            setMappings: function (mappings) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (mappings === null || mappings === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__mappings_java_cache(null);
                                if (!Kotlin.equals(this.get__mappings(), mappings)) {
                                    this.get__mappings().clear();
                                    this.get__mappings().addAll(mappings);
                                    {
                                        var tmp$0 = mappings.iterator();
                                        while (tmp$0.hasNext()) {
                                            var elem = tmp$0.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f2t, this, elem));
                                            elem.setContainmentRefName('mappings');
                                        }
                                    }
                                }
                            },
                            addMappings: function (mappings) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__mappings_java_cache(null);
                                mappings.setEContainer(this, Kotlin.b0(_f.f2u, this, mappings));
                                mappings.setContainmentRefName('mappings');
                                this.get__mappings().add(mappings);
                            },
                            addAllMappings: function (mappings) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__mappings_java_cache(null);
                                this.get__mappings().addAll(mappings);
                                {
                                    var tmp$0 = mappings.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(this, Kotlin.b0(_f.f2v, this, el));
                                        el.setContainmentRefName('mappings');
                                    }
                                }
                            },
                            removeMappings: function (mappings) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__mappings_java_cache(null);
                                if (this.get__mappings().size() !== 0 && this.get__mappings().indexOf(mappings) !== -1) {
                                    this.get__mappings().remove(this.get__mappings().indexOf(mappings));
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = mappings) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = mappings) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllMappings: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var temp_els = this.getMappings();
                                {
                                    var tmp$0 = temp_els.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__mappings_java_cache(null);
                                this.get__mappings().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createPortTypeRef();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setOptional(this.getOptional());
                                selfObjectClone.setNoDependency(this.getNoDependency());
                                subResult.put(this, selfObjectClone);
                                {
                                    var tmp$0 = this.getMappings().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (this.getRef() !== null && this.getRef() !== undefined) {
                                    var tmp$0;
                                    if (mutableOnly && ((tmp$0 = this.getRef()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$1;
                                        clonedSelfObject.setRef((tmp$1 = this.getRef()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setRef(addrs.get(this.getRef()));
                                    }
                                }
                                {
                                    var tmp$2 = this.getMappings().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub = tmp$2.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addMappings(sub);
                                        }
                                        else {
                                            clonedSelfObject.addMappings(addrs.get(sub));
                                        }
                                    }
                                }
                                {
                                    var tmp$3 = this.getMappings().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        sub_0.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.PortTypeRef)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getOptional(), similarObjCasted.getOptional())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getNoDependency(), similarObjCasted.getNoDependency())) {
                                    return false;
                                }
                                if (this.getMappings().size() !== similarObjCasted.getMappings().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getMappings().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var lookEqualsSub = false;
                                        {
                                            var tmp$1 = similarObjCasted.getMappings().iterator();
                                            while (tmp$1.hasNext()) {
                                                var subElement2 = tmp$1.next();
                                                if (Kotlin.equals(subElement, subElement2)) {
                                                    lookEqualsSub = true;
                                                }
                                            }
                                        }
                                        if (!lookEqualsSub) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c1p = Kotlin.createTrait(c1i, c1t, {
                        })
                        , cm = Kotlin.createTrait(c1h, c1p, cw, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$1 = this.getSuperTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__synchrone: function () {
                                return this.$_synchrone;
                            },
                            set__synchrone: function (tmp$0) {
                                this.$_synchrone = tmp$0;
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                            },
                            getSynchrone: function () {
                                return this.get__synchrone();
                            },
                            setSynchrone: function (synchrone) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__synchrone(synchrone);
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createPortType();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setFactoryBean(this.getFactoryBean());
                                selfObjectClone.setBean(this.getBean());
                                selfObjectClone.setSynchrone(this.getSynchrone());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getDictionaryType() !== null && this.getDictionaryType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getDictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionaryType(addrs.get(this.getDictionaryType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getSuperTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSuperTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addSuperTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                var subsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubdictionaryType !== null && subsubsubdictionaryType !== undefined) {
                                    subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.PortType)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getSynchrone(), similarObjCasted.getSynchrone())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c25 = Kotlin.createTrait(c1i, c18, {
                        })
                        , cn = Kotlin.createTrait(c1h, c25, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                this.setInternalReadOnly();
                            },
                            delete: function () {
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createAdaptationPrimitiveType();
                                selfObjectClone.setName(this.getName());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.AdaptationPrimitiveType)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1s = Kotlin.createTrait(c1i, c1a, {
                        })
                        , co = Kotlin.createTrait(c1h, c1s, c10, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$1 = this.getSuperTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$2 = this.getManagedPrimitiveTypes().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__managedPrimitiveTypes_java_cache: function () {
                                return this.$_managedPrimitiveTypes_java_cache;
                            },
                            set__managedPrimitiveTypes_java_cache: function (tmp$0) {
                                this.$_managedPrimitiveTypes_java_cache = tmp$0;
                            },
                            get__managedPrimitiveTypes: function () {
                                return this.$_managedPrimitiveTypes;
                            },
                            delete: function () {
                                var tmp$0, tmp$1;
                                (tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                                (tmp$1 = this.get__managedPrimitiveTypes()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__managedPrimitiveTypes_java_cache(null);
                            },
                            getManagedPrimitiveTypes: function () {
                                return _.kotlin.toList(this.get__managedPrimitiveTypes().values());
                            },
                            setManagedPrimitiveTypes: function (managedPrimitiveTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (managedPrimitiveTypes === null || managedPrimitiveTypes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__managedPrimitiveTypes_java_cache(null);
                                if (!Kotlin.equals(this.get__managedPrimitiveTypes(), managedPrimitiveTypes)) {
                                    this.get__managedPrimitiveTypes().clear();
                                    {
                                        var tmp$0 = managedPrimitiveTypes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__managedPrimitiveTypes().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addManagedPrimitiveTypes: function (managedPrimitiveTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__managedPrimitiveTypes_java_cache(null);
                                this.get__managedPrimitiveTypes().put(managedPrimitiveTypes.getName(), managedPrimitiveTypes);
                            },
                            addAllManagedPrimitiveTypes: function (managedPrimitiveTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__managedPrimitiveTypes_java_cache(null);
                                {
                                    var tmp$0 = managedPrimitiveTypes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__managedPrimitiveTypes().put(el.getName(), el);
                                    }
                                }
                            },
                            removeManagedPrimitiveTypes: function (managedPrimitiveTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__managedPrimitiveTypes_java_cache(null);
                                if (this.get__managedPrimitiveTypes().size() !== 0 && this.get__managedPrimitiveTypes().containsKey(managedPrimitiveTypes.getName())) {
                                    this.get__managedPrimitiveTypes().remove(managedPrimitiveTypes.getName());
                                }
                            },
                            removeAllManagedPrimitiveTypes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__managedPrimitiveTypes_java_cache(null);
                                this.get__managedPrimitiveTypes().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createNodeType();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setFactoryBean(this.getFactoryBean());
                                selfObjectClone.setBean(this.getBean());
                                selfObjectClone.setStartMethod(this.getStartMethod());
                                selfObjectClone.setStopMethod(this.getStopMethod());
                                selfObjectClone.setUpdateMethod(this.getUpdateMethod());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getDictionaryType() !== null && this.getDictionaryType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getDictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionaryType(addrs.get(this.getDictionaryType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getSuperTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSuperTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addSuperTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                {
                                    var tmp$4 = this.getManagedPrimitiveTypes().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub_1 = tmp$4.next();
                                        if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                                            clonedSelfObject.addManagedPrimitiveTypes(sub_1);
                                        }
                                        else {
                                            clonedSelfObject.addManagedPrimitiveTypes(addrs.get(sub_1));
                                        }
                                    }
                                }
                                var subsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubdictionaryType !== null && subsubsubdictionaryType !== undefined) {
                                    subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findManagedPrimitiveTypesByID: function (key) {
                                return this.get__managedPrimitiveTypes().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 4; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'deployUnits') {
                                            {
                                                var objFound = this.findDeployUnitsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$2 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'superTypes') {
                                            {
                                                var objFound_0 = this.findSuperTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_0 !== null && objFound_0 !== undefined)) {
                                                    tmp$2 = objFound_0.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_0;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2)
                                        if (tmp$0 === 'managedPrimitiveTypes') {
                                            {
                                                var objFound_1 = this.findManagedPrimitiveTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_1 !== null && objFound_1 !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$2 = objFound_1;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 3) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.NodeType)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1z = Kotlin.createTrait(c1i, {
                        })
                        , cp = Kotlin.createTrait(c1h, c1z, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                this.setInternalReadOnly();
                            },
                            get__beanMethodName: function () {
                                return this.$_beanMethodName;
                            },
                            set__beanMethodName: function (tmp$0) {
                                this.$_beanMethodName = tmp$0;
                            },
                            get__serviceMethodName: function () {
                                return this.$_serviceMethodName;
                            },
                            set__serviceMethodName: function (tmp$0) {
                                this.$_serviceMethodName = tmp$0;
                            },
                            delete: function () {
                            },
                            getBeanMethodName: function () {
                                return this.get__beanMethodName();
                            },
                            setBeanMethodName: function (beanMethodName) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__beanMethodName(beanMethodName);
                            },
                            getServiceMethodName: function () {
                                return this.get__serviceMethodName();
                            },
                            setServiceMethodName: function (serviceMethodName) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__serviceMethodName(serviceMethodName);
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createPortTypeMapping();
                                selfObjectClone.setBeanMethodName(this.getBeanMethodName());
                                selfObjectClone.setServiceMethodName(this.getServiceMethodName());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findByPath: function (query) {
                                return null;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.PortTypeMapping)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getBeanMethodName(), similarObjCasted.getBeanMethodName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getServiceMethodName(), similarObjCasted.getServiceMethodName())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , cq = Kotlin.createTrait(c1h, c2, cx, c11, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                var subsubsubsubtypeDefinition = this.getTypeDefinition();
                                if (subsubsubsubtypeDefinition !== null && subsubsubsubtypeDefinition !== undefined) {
                                    subsubsubsubtypeDefinition.setRecursiveReadOnly();
                                }
                                var subsubsubsubdictionary = this.getDictionary();
                                if (subsubsubsubdictionary !== null && subsubsubsubdictionary !== undefined) {
                                    subsubsubsubdictionary.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$0 = this.getComponents().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$1 = this.getHosts().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__components_java_cache: function () {
                                return this.$_components_java_cache;
                            },
                            set__components_java_cache: function (tmp$0) {
                                this.$_components_java_cache = tmp$0;
                            },
                            get__components: function () {
                                return this.$_components;
                            },
                            get__hosts_java_cache: function () {
                                return this.$_hosts_java_cache;
                            },
                            set__hosts_java_cache: function (tmp$0) {
                                this.$_hosts_java_cache = tmp$0;
                            },
                            get__hosts: function () {
                                return this.$_hosts;
                            },
                            delete: function () {
                                var tmp$0, tmp$2, tmp$3;
                                (tmp$0 = this.get__dictionary()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                                {
                                    var tmp$1 = _.kotlin.iterator(this.get__components());
                                    while (tmp$1.hasNext()) {
                                        var el = tmp$1.next();
                                        _.kotlin.get_value(el).delete();
                                    }
                                }
                                (tmp$2 = this.get__components()) !== null && tmp$2 !== undefined ? tmp$2.clear() : null;
                                this.set__components_java_cache(null);
                                (tmp$3 = this.get__hosts()) !== null && tmp$3 !== undefined ? tmp$3.clear() : null;
                                this.set__hosts_java_cache(null);
                            },
                            getComponents: function () {
                                return _.kotlin.toList(this.get__components().values());
                            },
                            setComponents: function (components) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (components === null || components === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__components_java_cache(null);
                                if (!Kotlin.equals(this.get__components(), components)) {
                                    this.get__components().clear();
                                    {
                                        var tmp$0 = components.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__components().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = components.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f2w, this, elem));
                                            elem.setContainmentRefName('components');
                                        }
                                    }
                                }
                            },
                            addComponents: function (components) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__components_java_cache(null);
                                components.setEContainer(this, Kotlin.b0(_f.f2x, this, components));
                                components.setContainmentRefName('components');
                                this.get__components().put(components.getName(), components);
                            },
                            addAllComponents: function (components) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__components_java_cache(null);
                                {
                                    var tmp$0 = components.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__components().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = components.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f2y, this, el_0));
                                        el_0.setContainmentRefName('components');
                                    }
                                }
                            },
                            removeComponents: function (components) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__components_java_cache(null);
                                if (this.get__components().size() !== 0 && this.get__components().containsKey(components.getName())) {
                                    this.get__components().remove(components.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = components) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = components) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllComponents: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getComponents()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__components_java_cache(null);
                                this.get__components().clear();
                            },
                            getHosts: function () {
                                return _.kotlin.toList(this.get__hosts().values());
                            },
                            setHosts: function (hosts) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (hosts === null || hosts === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__hosts_java_cache(null);
                                if (!Kotlin.equals(this.get__hosts(), hosts)) {
                                    this.get__hosts().clear();
                                    {
                                        var tmp$0 = hosts.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__hosts().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addHosts: function (hosts) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__hosts_java_cache(null);
                                this.get__hosts().put(hosts.getName(), hosts);
                            },
                            addAllHosts: function (hosts) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__hosts_java_cache(null);
                                {
                                    var tmp$0 = hosts.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__hosts().put(el.getName(), el);
                                    }
                                }
                            },
                            removeHosts: function (hosts) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__hosts_java_cache(null);
                                if (this.get__hosts().size() !== 0 && this.get__hosts().containsKey(hosts.getName())) {
                                    this.get__hosts().remove(hosts.getName());
                                }
                            },
                            removeAllHosts: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__hosts_java_cache(null);
                                this.get__hosts().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createContainerNode();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setMetaData(this.getMetaData());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionary = this.getDictionary();
                                if (subsubsubsubdictionary !== null && subsubsubsubdictionary !== undefined) {
                                    subsubsubsubdictionary.getClonelazy(subResult, _factories, mutableOnly);
                                }
                                {
                                    var tmp$0 = this.getComponents().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (this.getTypeDefinition() !== null && this.getTypeDefinition() !== undefined) {
                                    var tmp$0;
                                    if (mutableOnly && ((tmp$0 = this.getTypeDefinition()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$1;
                                        clonedSelfObject.setTypeDefinition((tmp$1 = this.getTypeDefinition()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setTypeDefinition(addrs.get(this.getTypeDefinition()));
                                    }
                                }
                                if (this.getDictionary() !== null && this.getDictionary() !== undefined) {
                                    var tmp$2;
                                    if (mutableOnly && ((tmp$2 = this.getDictionary()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$3;
                                        clonedSelfObject.setDictionary((tmp$3 = this.getDictionary()) !== null && tmp$3 !== undefined ? tmp$3 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionary(addrs.get(this.getDictionary()));
                                    }
                                }
                                {
                                    var tmp$4 = this.getComponents().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub = tmp$4.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addComponents(sub);
                                        }
                                        else {
                                            clonedSelfObject.addComponents(addrs.get(sub));
                                        }
                                    }
                                }
                                {
                                    var tmp$5 = this.getHosts().iterator();
                                    while (tmp$5.hasNext()) {
                                        var sub_0 = tmp$5.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addHosts(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addHosts(addrs.get(sub_0));
                                        }
                                    }
                                }
                                var subsubsubdictionary = this.getDictionary();
                                if (subsubsubdictionary !== null && subsubsubdictionary !== undefined) {
                                    subsubsubdictionary.resolve(addrs, readOnly, mutableOnly);
                                }
                                {
                                    var tmp$6 = this.getComponents().iterator();
                                    while (tmp$6.hasNext()) {
                                        var sub_1 = tmp$6.next();
                                        sub_1.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findComponentsByID: function (key) {
                                return this.get__components().get(key);
                            },
                            findHostsByID: function (key) {
                                return this.get__hosts().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 4; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'typeDefinition') {
                                            {
                                                tmp$2 = this.getTypeDefinition();
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'components') {
                                            {
                                                var objFound = this.findComponentsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2)
                                        if (tmp$0 === 'hosts') {
                                            {
                                                var objFound_0 = this.findHostsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_0 !== null && objFound_0 !== undefined)) {
                                                    tmp$2 = objFound_0.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_0;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 3) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.ContainerNode)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getMetaData(), similarObjCasted.getMetaData())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionary(), similarObjCasted.getDictionary())) {
                                    return false;
                                }
                                if (this.getComponents().size() !== similarObjCasted.getComponents().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getComponents().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var foundedElement = similarObjCasted.findComponentsByID(subElement.getName());
                                        if (foundedElement === null || foundedElement === undefined || !Kotlin.equals(foundedElement, subElement)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c1d = Kotlin.createTrait(c1i, c1p, {
                        })
                        , cr = Kotlin.createTrait(c1h, c1d, cm, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$1 = this.getSuperTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$2 = this.getOperations().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__interfaceService: function () {
                                return this.$_interfaceService;
                            },
                            set__interfaceService: function (tmp$0) {
                                this.$_interfaceService = tmp$0;
                            },
                            get__operations_java_cache: function () {
                                return this.$_operations_java_cache;
                            },
                            set__operations_java_cache: function (tmp$0) {
                                this.$_operations_java_cache = tmp$0;
                            },
                            get__operations: function () {
                                return this.$_operations;
                            },
                            delete: function () {
                                var tmp$0, tmp$2;
                                (tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                                {
                                    var tmp$1 = _.kotlin.iterator(this.get__operations());
                                    while (tmp$1.hasNext()) {
                                        var el = tmp$1.next();
                                        _.kotlin.get_value(el).delete();
                                    }
                                }
                                (tmp$2 = this.get__operations()) !== null && tmp$2 !== undefined ? tmp$2.clear() : null;
                                this.set__operations_java_cache(null);
                            },
                            getInterfaceService: function () {
                                return this.get__interfaceService();
                            },
                            setInterfaceService: function (interfaceService) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__interfaceService(interfaceService);
                            },
                            getOperations: function () {
                                return _.kotlin.toList(this.get__operations().values());
                            },
                            setOperations: function (operations) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (operations === null || operations === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__operations_java_cache(null);
                                if (!Kotlin.equals(this.get__operations(), operations)) {
                                    this.get__operations().clear();
                                    {
                                        var tmp$0 = operations.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__operations().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = operations.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f2z, this, elem));
                                            elem.setContainmentRefName('operations');
                                        }
                                    }
                                }
                            },
                            addOperations: function (operations) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__operations_java_cache(null);
                                operations.setEContainer(this, Kotlin.b0(_f.f30, this, operations));
                                operations.setContainmentRefName('operations');
                                this.get__operations().put(operations.getName(), operations);
                            },
                            addAllOperations: function (operations) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__operations_java_cache(null);
                                {
                                    var tmp$0 = operations.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__operations().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = operations.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f31, this, el_0));
                                        el_0.setContainmentRefName('operations');
                                    }
                                }
                            },
                            removeOperations: function (operations) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__operations_java_cache(null);
                                if (this.get__operations().size() !== 0 && this.get__operations().containsKey(operations.getName())) {
                                    this.get__operations().remove(operations.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = operations) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = operations) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllOperations: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getOperations()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__operations_java_cache(null);
                                this.get__operations().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createServicePortType();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setFactoryBean(this.getFactoryBean());
                                selfObjectClone.setBean(this.getBean());
                                selfObjectClone.setSynchrone(this.getSynchrone());
                                selfObjectClone.setInterfaceService(this.getInterfaceService());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
                                }
                                {
                                    var tmp$0 = this.getOperations().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getDictionaryType() !== null && this.getDictionaryType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getDictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionaryType(addrs.get(this.getDictionaryType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getSuperTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSuperTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addSuperTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                {
                                    var tmp$4 = this.getOperations().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub_1 = tmp$4.next();
                                        if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                                            clonedSelfObject.addOperations(sub_1);
                                        }
                                        else {
                                            clonedSelfObject.addOperations(addrs.get(sub_1));
                                        }
                                    }
                                }
                                var subsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubdictionaryType !== null && subsubsubdictionaryType !== undefined) {
                                    subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
                                }
                                {
                                    var tmp$5 = this.getOperations().iterator();
                                    while (tmp$5.hasNext()) {
                                        var sub_2 = tmp$5.next();
                                        sub_2.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findOperationsByID: function (key) {
                                return this.get__operations().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 4; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'deployUnits') {
                                            {
                                                var objFound = this.findDeployUnitsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$2 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'superTypes') {
                                            {
                                                var objFound_0 = this.findSuperTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_0 !== null && objFound_0 !== undefined)) {
                                                    tmp$2 = objFound_0.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_0;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2)
                                        if (tmp$0 === 'operations') {
                                            {
                                                var objFound_1 = this.findOperationsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_1 !== null && objFound_1 !== undefined)) {
                                                    tmp$2 = objFound_1.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_1;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 3) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.ServicePortType)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getSynchrone(), similarObjCasted.getSynchrone())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getInterfaceService(), similarObjCasted.getInterfaceService())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                                    return false;
                                }
                                if (this.getOperations().size() !== similarObjCasted.getOperations().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getOperations().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var foundedElement = similarObjCasted.findOperationsByID(subElement.getName());
                                        if (foundedElement === null || foundedElement === undefined || !Kotlin.equals(foundedElement, subElement)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , cs = Kotlin.createTrait(c1h, c1, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getRequiredLibs().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubtargetNodeType = this.getTargetNodeType();
                                if (subsubsubsubtargetNodeType !== null && subsubsubsubtargetNodeType !== undefined) {
                                    subsubsubsubtargetNodeType.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            get__groupName: function () {
                                return this.$_groupName;
                            },
                            set__groupName: function (tmp$0) {
                                this.$_groupName = tmp$0;
                            },
                            get__unitName: function () {
                                return this.$_unitName;
                            },
                            set__unitName: function (tmp$0) {
                                this.$_unitName = tmp$0;
                            },
                            get__version: function () {
                                return this.$_version;
                            },
                            set__version: function (tmp$0) {
                                this.$_version = tmp$0;
                            },
                            get__url: function () {
                                return this.$_url;
                            },
                            set__url: function (tmp$0) {
                                this.$_url = tmp$0;
                            },
                            get__hashcode: function () {
                                return this.$_hashcode;
                            },
                            set__hashcode: function (tmp$0) {
                                this.$_hashcode = tmp$0;
                            },
                            get__type: function () {
                                return this.$_type;
                            },
                            set__type: function (tmp$0) {
                                this.$_type = tmp$0;
                            },
                            get__requiredLibs_java_cache: function () {
                                return this.$_requiredLibs_java_cache;
                            },
                            set__requiredLibs_java_cache: function (tmp$0) {
                                this.$_requiredLibs_java_cache = tmp$0;
                            },
                            get__requiredLibs: function () {
                                return this.$_requiredLibs;
                            },
                            get__targetNodeType: function () {
                                return this.$_targetNodeType;
                            },
                            set__targetNodeType: function (tmp$0) {
                                this.$_targetNodeType = tmp$0;
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__requiredLibs()) !== null && tmp$0 !== undefined ? tmp$0.clear() : null;
                                this.set__requiredLibs_java_cache(null);
                                this.set__targetNodeType(null);
                            },
                            getGroupName: function () {
                                return this.get__groupName();
                            },
                            setGroupName: function (groupName) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__groupName(groupName);
                            },
                            getUnitName: function () {
                                return this.get__unitName();
                            },
                            setUnitName: function (unitName) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__unitName(unitName);
                            },
                            getVersion: function () {
                                return this.get__version();
                            },
                            setVersion: function (version) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__version(version);
                            },
                            getUrl: function () {
                                return this.get__url();
                            },
                            setUrl: function (url) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__url(url);
                            },
                            getHashcode: function () {
                                return this.get__hashcode();
                            },
                            setHashcode: function (hashcode) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__hashcode(hashcode);
                            },
                            getType: function () {
                                return this.get__type();
                            },
                            setType: function (type) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__type(type);
                            },
                            getRequiredLibs: function () {
                                return _.kotlin.toList(this.get__requiredLibs().values());
                            },
                            setRequiredLibs: function (requiredLibs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (requiredLibs === null || requiredLibs === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__requiredLibs_java_cache(null);
                                if (!Kotlin.equals(this.get__requiredLibs(), requiredLibs)) {
                                    this.get__requiredLibs().clear();
                                    {
                                        var tmp$0 = requiredLibs.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__requiredLibs().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addRequiredLibs: function (requiredLibs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__requiredLibs_java_cache(null);
                                this.get__requiredLibs().put(requiredLibs.getName(), requiredLibs);
                            },
                            addAllRequiredLibs: function (requiredLibs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__requiredLibs_java_cache(null);
                                {
                                    var tmp$0 = requiredLibs.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__requiredLibs().put(el.getName(), el);
                                    }
                                }
                            },
                            removeRequiredLibs: function (requiredLibs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__requiredLibs_java_cache(null);
                                if (this.get__requiredLibs().size() !== 0 && this.get__requiredLibs().containsKey(requiredLibs.getName())) {
                                    this.get__requiredLibs().remove(requiredLibs.getName());
                                }
                            },
                            removeAllRequiredLibs: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__requiredLibs_java_cache(null);
                                this.get__requiredLibs().clear();
                            },
                            getTargetNodeType: function () {
                                return this.get__targetNodeType();
                            },
                            setTargetNodeType: function (targetNodeType) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__targetNodeType(), targetNodeType)) {
                                    this.set__targetNodeType(targetNodeType);
                                }
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createDeployUnit();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setGroupName(this.getGroupName());
                                selfObjectClone.setUnitName(this.getUnitName());
                                selfObjectClone.setVersion(this.getVersion());
                                selfObjectClone.setUrl(this.getUrl());
                                selfObjectClone.setHashcode(this.getHashcode());
                                selfObjectClone.setType(this.getType());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getRequiredLibs().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addRequiredLibs(sub);
                                        }
                                        else {
                                            clonedSelfObject.addRequiredLibs(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getTargetNodeType() !== null && this.getTargetNodeType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getTargetNodeType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setTargetNodeType((tmp$2 = this.getTargetNodeType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setTargetNodeType(addrs.get(this.getTargetNodeType()));
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findRequiredLibsByID: function (key) {
                                return this.get__requiredLibs().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 3; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'requiredLibs') {
                                            {
                                                var objFound = this.findRequiredLibsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$2 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'targetNodeType') {
                                            {
                                                tmp$2 = this.getTargetNodeType();
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.DeployUnit)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getGroupName(), similarObjCasted.getGroupName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getUnitName(), similarObjCasted.getUnitName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getVersion(), similarObjCasted.getVersion())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getUrl(), similarObjCasted.getUrl())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getHashcode(), similarObjCasted.getHashcode())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getType(), similarObjCasted.getType())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1e = Kotlin.createTrait(c1i, c1a, {
                        })
                        , ct = Kotlin.createTrait(c1h, c1e, c10, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$1 = this.getSuperTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__lowerBindings: function () {
                                return this.$_lowerBindings;
                            },
                            set__lowerBindings: function (tmp$0) {
                                this.$_lowerBindings = tmp$0;
                            },
                            get__upperBindings: function () {
                                return this.$_upperBindings;
                            },
                            set__upperBindings: function (tmp$0) {
                                this.$_upperBindings = tmp$0;
                            },
                            get__lowerFragments: function () {
                                return this.$_lowerFragments;
                            },
                            set__lowerFragments: function (tmp$0) {
                                this.$_lowerFragments = tmp$0;
                            },
                            get__upperFragments: function () {
                                return this.$_upperFragments;
                            },
                            set__upperFragments: function (tmp$0) {
                                this.$_upperFragments = tmp$0;
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                            },
                            getLowerBindings: function () {
                                return this.get__lowerBindings();
                            },
                            setLowerBindings: function (lowerBindings) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__lowerBindings(lowerBindings);
                            },
                            getUpperBindings: function () {
                                return this.get__upperBindings();
                            },
                            setUpperBindings: function (upperBindings) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__upperBindings(upperBindings);
                            },
                            getLowerFragments: function () {
                                return this.get__lowerFragments();
                            },
                            setLowerFragments: function (lowerFragments) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__lowerFragments(lowerFragments);
                            },
                            getUpperFragments: function () {
                                return this.get__upperFragments();
                            },
                            setUpperFragments: function (upperFragments) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__upperFragments(upperFragments);
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createChannelType();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setFactoryBean(this.getFactoryBean());
                                selfObjectClone.setBean(this.getBean());
                                selfObjectClone.setStartMethod(this.getStartMethod());
                                selfObjectClone.setStopMethod(this.getStopMethod());
                                selfObjectClone.setUpdateMethod(this.getUpdateMethod());
                                selfObjectClone.setLowerBindings(this.getLowerBindings());
                                selfObjectClone.setUpperBindings(this.getUpperBindings());
                                selfObjectClone.setLowerFragments(this.getLowerFragments());
                                selfObjectClone.setUpperFragments(this.getUpperFragments());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getDictionaryType() !== null && this.getDictionaryType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getDictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionaryType(addrs.get(this.getDictionaryType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getSuperTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSuperTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addSuperTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                var subsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubdictionaryType !== null && subsubsubdictionaryType !== undefined) {
                                    subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.ChannelType)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                                    return false;
                                }
                                if (this.getLowerBindings() !== similarObjCasted.getLowerBindings()) {
                                    return false;
                                }
                                if (this.getUpperBindings() !== similarObjCasted.getUpperBindings()) {
                                    return false;
                                }
                                if (this.getLowerFragments() !== similarObjCasted.getLowerFragments()) {
                                    return false;
                                }
                                if (this.getUpperFragments() !== similarObjCasted.getUpperFragments()) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c21 = Kotlin.createTrait(c1i, {
                        })
                        , cu = Kotlin.createTrait(c1h, c21, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getPortTypes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__portTypes_java_cache: function () {
                                return this.$_portTypes_java_cache;
                            },
                            set__portTypes_java_cache: function (tmp$0) {
                                this.$_portTypes_java_cache = tmp$0;
                            },
                            get__portTypes: function () {
                                return this.$_portTypes;
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__portTypes()) !== null && tmp$0 !== undefined ? tmp$0.clear() : null;
                                this.set__portTypes_java_cache(null);
                            },
                            getPortTypes: function () {
                                return _.kotlin.toList(this.get__portTypes().values());
                            },
                            setPortTypes: function (portTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (portTypes === null || portTypes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__portTypes_java_cache(null);
                                if (!Kotlin.equals(this.get__portTypes(), portTypes)) {
                                    this.get__portTypes().clear();
                                    {
                                        var tmp$0 = portTypes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__portTypes().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addPortTypes: function (portTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__portTypes_java_cache(null);
                                this.get__portTypes().put(portTypes.getName(), portTypes);
                            },
                            addAllPortTypes: function (portTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__portTypes_java_cache(null);
                                {
                                    var tmp$0 = portTypes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__portTypes().put(el.getName(), el);
                                    }
                                }
                            },
                            removePortTypes: function (portTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__portTypes_java_cache(null);
                                if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey(portTypes.getName())) {
                                    this.get__portTypes().remove(portTypes.getName());
                                }
                            },
                            removeAllPortTypes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__portTypes_java_cache(null);
                                this.get__portTypes().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createExtraFonctionalProperty();
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getPortTypes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addPortTypes(sub);
                                        }
                                        else {
                                            clonedSelfObject.addPortTypes(addrs.get(sub));
                                        }
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findPortTypesByID: function (key) {
                                return this.get__portTypes().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = 'portTypes';
                                var optionalDetected = firstSepIndex !== 9;
                                if (optionalDetected) {
                                    extraReadChar = extraReadChar - 2;
                                }
                                if (_.js.indexOf(query, '{') === 0) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    if (optionalDetected) {
                                        if (_.js.indexOf(query, '/') !== -1) {
                                            queryID = query.substring(0, _.js.indexOf(query, '/'));
                                        }
                                        else {
                                            queryID = query.substring(0, _.js.get_size(query));
                                        }
                                    }
                                    else {
                                        queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                    }
                                }
                                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
                                tmp$0 = query;
                                if (optionalDetected) {
                                    tmp$1 = 0;
                                }
                                else {
                                    tmp$1 = _.js.get_size(relationName);
                                }
                                var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                for (tmp$3 = 0, tmp$2 = relationName; tmp$3 < 2; ++tmp$3) {
                                    if (tmp$3 === 0)
                                        if (tmp$2 === 'portTypes') {
                                            {
                                                var objFound = this.findPortTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$4 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$3 === 1) {
                                        tmp$4 = null;
                                    }
                                }
                                return tmp$4;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.ExtraFonctionalProperty)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                return true;
                            }
                        })
                        , c29 = Kotlin.createTrait(c1i, {
                        })
                        , cv = Kotlin.createTrait(c1h, c29, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getValues().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__values_java_cache: function () {
                                return this.$_values_java_cache;
                            },
                            set__values_java_cache: function (tmp$0) {
                                this.$_values_java_cache = tmp$0;
                            },
                            get__values: function () {
                                return this.$_values;
                            },
                            delete: function () {
                                {
                                    var tmp$0 = this.get__values().iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.delete();
                                    }
                                }
                                var tmp$1;
                                (tmp$1 = this.get__values()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__values_java_cache(null);
                            },
                            getValues: function () {
                                return this.get__values();
                            },
                            setValues: function (values) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (values === null || values === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__values_java_cache(null);
                                if (!Kotlin.equals(this.get__values(), values)) {
                                    this.get__values().clear();
                                    this.get__values().addAll(values);
                                    {
                                        var tmp$0 = values.iterator();
                                        while (tmp$0.hasNext()) {
                                            var elem = tmp$0.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f32, this, elem));
                                            elem.setContainmentRefName('values');
                                        }
                                    }
                                }
                            },
                            addValues: function (values) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__values_java_cache(null);
                                values.setEContainer(this, Kotlin.b0(_f.f33, this, values));
                                values.setContainmentRefName('values');
                                this.get__values().add(values);
                            },
                            addAllValues: function (values) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__values_java_cache(null);
                                this.get__values().addAll(values);
                                {
                                    var tmp$0 = values.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(this, Kotlin.b0(_f.f34, this, el));
                                        el.setContainmentRefName('values');
                                    }
                                }
                            },
                            removeValues: function (values) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__values_java_cache(null);
                                if (this.get__values().size() !== 0 && this.get__values().indexOf(values) !== -1) {
                                    this.get__values().remove(this.get__values().indexOf(values));
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = values) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = values) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllValues: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var temp_els = this.getValues();
                                {
                                    var tmp$0 = temp_els.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__values_java_cache(null);
                                this.get__values().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createDictionary();
                                subResult.put(this, selfObjectClone);
                                {
                                    var tmp$0 = this.getValues().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getValues().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addValues(sub);
                                        }
                                        else {
                                            clonedSelfObject.addValues(addrs.get(sub));
                                        }
                                    }
                                }
                                {
                                    var tmp$1 = this.getValues().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findByPath: function (query) {
                                return null;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.Dictionary)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (this.getValues().size() !== similarObjCasted.getValues().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getValues().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var lookEqualsSub = false;
                                        {
                                            var tmp$1 = similarObjCasted.getValues().iterator();
                                            while (tmp$1.hasNext()) {
                                                var subElement2 = tmp$1.next();
                                                if (Kotlin.equals(subElement, subElement2)) {
                                                    lookEqualsSub = true;
                                                }
                                            }
                                        }
                                        if (!lookEqualsSub) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c1w = Kotlin.createTrait(c1i, c24, {
                        })
                        , cy = Kotlin.createTrait(c1h, c1w, c4, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$1 = this.getSuperTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$2 = this.getRequired().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$3 = this.getIntegrationPatterns().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_2 = tmp$3.next();
                                        sub_2.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
                                if (subsubsubsubextraFonctionalProperties !== null && subsubsubsubextraFonctionalProperties !== undefined) {
                                    subsubsubsubextraFonctionalProperties.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$4 = this.getProvided().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub_3 = tmp$4.next();
                                        sub_3.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$5 = this.getChilds().iterator();
                                    while (tmp$5.hasNext()) {
                                        var sub_4 = tmp$5.next();
                                        sub_4.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$6 = this.getWires().iterator();
                                    while (tmp$6.hasNext()) {
                                        var sub_5 = tmp$6.next();
                                        sub_5.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__childs_java_cache: function () {
                                return this.$_childs_java_cache;
                            },
                            set__childs_java_cache: function (tmp$0) {
                                this.$_childs_java_cache = tmp$0;
                            },
                            get__childs: function () {
                                return this.$_childs;
                            },
                            get__wires_java_cache: function () {
                                return this.$_wires_java_cache;
                            },
                            set__wires_java_cache: function (tmp$0) {
                                this.$_wires_java_cache = tmp$0;
                            },
                            get__wires: function () {
                                return this.$_wires;
                            },
                            delete: function () {
                                var tmp$0, tmp$3, tmp$6, tmp$7;
                                (tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                                {
                                    var tmp$1 = _.kotlin.iterator(this.get__required());
                                    while (tmp$1.hasNext()) {
                                        var el = tmp$1.next();
                                        _.kotlin.get_value(el).delete();
                                    }
                                }
                                {
                                    var tmp$2 = _.kotlin.iterator(this.get__integrationPatterns());
                                    while (tmp$2.hasNext()) {
                                        var el_0 = tmp$2.next();
                                        _.kotlin.get_value(el_0).delete();
                                    }
                                }
                                (tmp$3 = this.get__extraFonctionalProperties()) !== null && tmp$3 !== undefined ? tmp$3.delete() : null;
                                {
                                    var tmp$4 = _.kotlin.iterator(this.get__provided());
                                    while (tmp$4.hasNext()) {
                                        var el_1 = tmp$4.next();
                                        _.kotlin.get_value(el_1).delete();
                                    }
                                }
                                {
                                    var tmp$5 = this.get__wires().iterator();
                                    while (tmp$5.hasNext()) {
                                        var el_2 = tmp$5.next();
                                        el_2.delete();
                                    }
                                }
                                (tmp$6 = this.get__childs()) !== null && tmp$6 !== undefined ? tmp$6.clear() : null;
                                this.set__childs_java_cache(null);
                                (tmp$7 = this.get__wires()) !== null && tmp$7 !== undefined ? tmp$7.clear() : null;
                                this.set__wires_java_cache(null);
                            },
                            getChilds: function () {
                                return _.kotlin.toList(this.get__childs().values());
                            },
                            setChilds: function (childs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (childs === null || childs === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__childs_java_cache(null);
                                if (!Kotlin.equals(this.get__childs(), childs)) {
                                    this.get__childs().clear();
                                    {
                                        var tmp$0 = childs.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__childs().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addChilds: function (childs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__childs_java_cache(null);
                                this.get__childs().put(childs.getName(), childs);
                            },
                            addAllChilds: function (childs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__childs_java_cache(null);
                                {
                                    var tmp$0 = childs.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__childs().put(el.getName(), el);
                                    }
                                }
                            },
                            removeChilds: function (childs) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__childs_java_cache(null);
                                if (this.get__childs().size() !== 0 && this.get__childs().containsKey(childs.getName())) {
                                    this.get__childs().remove(childs.getName());
                                }
                            },
                            removeAllChilds: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__childs_java_cache(null);
                                this.get__childs().clear();
                            },
                            getWires: function () {
                                return this.get__wires();
                            },
                            setWires: function (wires) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (wires === null || wires === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__wires_java_cache(null);
                                if (!Kotlin.equals(this.get__wires(), wires)) {
                                    this.get__wires().clear();
                                    this.get__wires().addAll(wires);
                                    {
                                        var tmp$0 = wires.iterator();
                                        while (tmp$0.hasNext()) {
                                            var elem = tmp$0.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f35, this, elem));
                                            elem.setContainmentRefName('wires');
                                        }
                                    }
                                }
                            },
                            addWires: function (wires) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__wires_java_cache(null);
                                wires.setEContainer(this, Kotlin.b0(_f.f36, this, wires));
                                wires.setContainmentRefName('wires');
                                this.get__wires().add(wires);
                            },
                            addAllWires: function (wires) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__wires_java_cache(null);
                                this.get__wires().addAll(wires);
                                {
                                    var tmp$0 = wires.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(this, Kotlin.b0(_f.f37, this, el));
                                        el.setContainmentRefName('wires');
                                    }
                                }
                            },
                            removeWires: function (wires) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__wires_java_cache(null);
                                if (this.get__wires().size() !== 0 && this.get__wires().indexOf(wires) !== -1) {
                                    this.get__wires().remove(this.get__wires().indexOf(wires));
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = wires) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = wires) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllWires: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var temp_els = this.getWires();
                                {
                                    var tmp$0 = temp_els.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__wires_java_cache(null);
                                this.get__wires().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createCompositeType();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setFactoryBean(this.getFactoryBean());
                                selfObjectClone.setBean(this.getBean());
                                selfObjectClone.setStartMethod(this.getStartMethod());
                                selfObjectClone.setStopMethod(this.getStopMethod());
                                selfObjectClone.setUpdateMethod(this.getUpdateMethod());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
                                }
                                {
                                    var tmp$0 = this.getRequired().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$1 = this.getIntegrationPatterns().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                var subsubsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
                                if (subsubsubsubextraFonctionalProperties !== null && subsubsubsubextraFonctionalProperties !== undefined) {
                                    subsubsubsubextraFonctionalProperties.getClonelazy(subResult, _factories, mutableOnly);
                                }
                                {
                                    var tmp$2 = this.getProvided().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$3 = this.getWires().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_2 = tmp$3.next();
                                        sub_2.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getDictionaryType() !== null && this.getDictionaryType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getDictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionaryType(addrs.get(this.getDictionaryType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getSuperTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSuperTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addSuperTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                {
                                    var tmp$4 = this.getRequired().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub_1 = tmp$4.next();
                                        if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                                            clonedSelfObject.addRequired(sub_1);
                                        }
                                        else {
                                            clonedSelfObject.addRequired(addrs.get(sub_1));
                                        }
                                    }
                                }
                                {
                                    var tmp$5 = this.getIntegrationPatterns().iterator();
                                    while (tmp$5.hasNext()) {
                                        var sub_2 = tmp$5.next();
                                        if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                                            clonedSelfObject.addIntegrationPatterns(sub_2);
                                        }
                                        else {
                                            clonedSelfObject.addIntegrationPatterns(addrs.get(sub_2));
                                        }
                                    }
                                }
                                if (this.getExtraFonctionalProperties() !== null && this.getExtraFonctionalProperties() !== undefined) {
                                    var tmp$6;
                                    if (mutableOnly && ((tmp$6 = this.getExtraFonctionalProperties()) !== null && tmp$6 !== undefined ? tmp$6 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$7;
                                        clonedSelfObject.setExtraFonctionalProperties((tmp$7 = this.getExtraFonctionalProperties()) !== null && tmp$7 !== undefined ? tmp$7 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setExtraFonctionalProperties(addrs.get(this.getExtraFonctionalProperties()));
                                    }
                                }
                                {
                                    var tmp$8 = this.getProvided().iterator();
                                    while (tmp$8.hasNext()) {
                                        var sub_3 = tmp$8.next();
                                        if (mutableOnly && sub_3.isRecursiveReadOnly()) {
                                            clonedSelfObject.addProvided(sub_3);
                                        }
                                        else {
                                            clonedSelfObject.addProvided(addrs.get(sub_3));
                                        }
                                    }
                                }
                                {
                                    var tmp$9 = this.getChilds().iterator();
                                    while (tmp$9.hasNext()) {
                                        var sub_4 = tmp$9.next();
                                        if (mutableOnly && sub_4.isRecursiveReadOnly()) {
                                            clonedSelfObject.addChilds(sub_4);
                                        }
                                        else {
                                            clonedSelfObject.addChilds(addrs.get(sub_4));
                                        }
                                    }
                                }
                                {
                                    var tmp$10 = this.getWires().iterator();
                                    while (tmp$10.hasNext()) {
                                        var sub_5 = tmp$10.next();
                                        if (mutableOnly && sub_5.isRecursiveReadOnly()) {
                                            clonedSelfObject.addWires(sub_5);
                                        }
                                        else {
                                            clonedSelfObject.addWires(addrs.get(sub_5));
                                        }
                                    }
                                }
                                var subsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubdictionaryType !== null && subsubsubdictionaryType !== undefined) {
                                    subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
                                }
                                {
                                    var tmp$11 = this.getRequired().iterator();
                                    while (tmp$11.hasNext()) {
                                        var sub_6 = tmp$11.next();
                                        sub_6.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$12 = this.getIntegrationPatterns().iterator();
                                    while (tmp$12.hasNext()) {
                                        var sub_7 = tmp$12.next();
                                        sub_7.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                var subsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
                                if (subsubsubextraFonctionalProperties !== null && subsubsubextraFonctionalProperties !== undefined) {
                                    subsubsubextraFonctionalProperties.resolve(addrs, readOnly, mutableOnly);
                                }
                                {
                                    var tmp$13 = this.getProvided().iterator();
                                    while (tmp$13.hasNext()) {
                                        var sub_8 = tmp$13.next();
                                        sub_8.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                {
                                    var tmp$14 = this.getWires().iterator();
                                    while (tmp$14.hasNext()) {
                                        var sub_9 = tmp$14.next();
                                        sub_9.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findChildsByID: function (key) {
                                return this.get__childs().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 7; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'deployUnits') {
                                            {
                                                var objFound = this.findDeployUnitsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$2 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'superTypes') {
                                            {
                                                var objFound_0 = this.findSuperTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_0 !== null && objFound_0 !== undefined)) {
                                                    tmp$2 = objFound_0.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_0;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2)
                                        if (tmp$0 === 'required') {
                                            {
                                                var objFound_1 = this.findRequiredByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_1 !== null && objFound_1 !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$2 = objFound_1;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 3)
                                        if (tmp$0 === 'integrationPatterns') {
                                            {
                                                var objFound_2 = this.findIntegrationPatternsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_2 !== null && objFound_2 !== undefined)) {
                                                    tmp$2 = objFound_2.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_2;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 4)
                                        if (tmp$0 === 'provided') {
                                            {
                                                var objFound_3 = this.findProvidedByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_3 !== null && objFound_3 !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$2 = objFound_3;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 5)
                                        if (tmp$0 === 'childs') {
                                            {
                                                var objFound_4 = this.findChildsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_4 !== null && objFound_4 !== undefined)) {
                                                    tmp$2 = objFound_4.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_4;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 6) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.CompositeType)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                                    return false;
                                }
                                if (this.getRequired().size() !== similarObjCasted.getRequired().size()) {
                                    return false;
                                }
                                if (this.getIntegrationPatterns().size() !== similarObjCasted.getIntegrationPatterns().size()) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getExtraFonctionalProperties(), similarObjCasted.getExtraFonctionalProperties())) {
                                    return false;
                                }
                                if (this.getProvided().size() !== similarObjCasted.getProvided().size()) {
                                    return false;
                                }
                                if (this.getWires().size() !== similarObjCasted.getWires().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getRequired().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var foundedElement = similarObjCasted.findRequiredByID(subElement.getName());
                                        if (foundedElement === null || foundedElement === undefined || !Kotlin.equals(foundedElement, subElement)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$1 = this.getIntegrationPatterns().iterator();
                                    while (tmp$1.hasNext()) {
                                        var subElement_0 = tmp$1.next();
                                        var foundedElement_0 = similarObjCasted.findIntegrationPatternsByID(subElement_0.getName());
                                        if (foundedElement_0 === null || foundedElement_0 === undefined || !Kotlin.equals(foundedElement_0, subElement_0)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$2 = this.getProvided().iterator();
                                    while (tmp$2.hasNext()) {
                                        var subElement_1 = tmp$2.next();
                                        var foundedElement_1 = similarObjCasted.findProvidedByID(subElement_1.getName());
                                        if (foundedElement_1 === null || foundedElement_1 === undefined || !Kotlin.equals(foundedElement_1, subElement_1)) {
                                            return false;
                                        }
                                    }
                                }
                                {
                                    var tmp$3 = this.getWires().iterator();
                                    while (tmp$3.hasNext()) {
                                        var subElement_2 = tmp$3.next();
                                        var lookEqualsSub = false;
                                        {
                                            var tmp$4 = similarObjCasted.getWires().iterator();
                                            while (tmp$4.hasNext()) {
                                                var subElement2 = tmp$4.next();
                                                if (Kotlin.equals(subElement_2, subElement2)) {
                                                    lookEqualsSub = true;
                                                }
                                            }
                                        }
                                        if (!lookEqualsSub) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c16 = Kotlin.createTrait(c1i, c1p, {
                        })
                        , cz = Kotlin.createTrait(c1h, c16, cm, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.setRecursiveReadOnly();
                                }
                                {
                                    var tmp$1 = this.getSuperTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$2 = this.getFilters().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__filters_java_cache: function () {
                                return this.$_filters_java_cache;
                            },
                            set__filters_java_cache: function (tmp$0) {
                                this.$_filters_java_cache = tmp$0;
                            },
                            get__filters: function () {
                                return this.$_filters;
                            },
                            delete: function () {
                                var tmp$0, tmp$1;
                                (tmp$0 = this.get__dictionaryType()) !== null && tmp$0 !== undefined ? tmp$0.delete() : null;
                                (tmp$1 = this.get__filters()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__filters_java_cache(null);
                            },
                            getFilters: function () {
                                return _.kotlin.toList(this.get__filters().values());
                            },
                            setFilters: function (filters) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (filters === null || filters === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__filters_java_cache(null);
                                if (!Kotlin.equals(this.get__filters(), filters)) {
                                    this.get__filters().clear();
                                    {
                                        var tmp$0 = filters.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__filters().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addFilters: function (filters) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__filters_java_cache(null);
                                this.get__filters().put(filters.getName(), filters);
                            },
                            addAllFilters: function (filters) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__filters_java_cache(null);
                                {
                                    var tmp$0 = filters.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__filters().put(el.getName(), el);
                                    }
                                }
                            },
                            removeFilters: function (filters) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__filters_java_cache(null);
                                if (this.get__filters().size() !== 0 && this.get__filters().containsKey(filters.getName())) {
                                    this.get__filters().remove(filters.getName());
                                }
                            },
                            removeAllFilters: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__filters_java_cache(null);
                                this.get__filters().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createMessagePortType();
                                selfObjectClone.setName(this.getName());
                                selfObjectClone.setFactoryBean(this.getFactoryBean());
                                selfObjectClone.setBean(this.getBean());
                                selfObjectClone.setSynchrone(this.getSynchrone());
                                subResult.put(this, selfObjectClone);
                                var subsubsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubsubdictionaryType !== null && subsubsubsubdictionaryType !== undefined) {
                                    subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getDeployUnits().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addDeployUnits(sub);
                                        }
                                        else {
                                            clonedSelfObject.addDeployUnits(addrs.get(sub));
                                        }
                                    }
                                }
                                if (this.getDictionaryType() !== null && this.getDictionaryType() !== undefined) {
                                    var tmp$1;
                                    if (mutableOnly && ((tmp$1 = this.getDictionaryType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$2;
                                        clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) !== null && tmp$2 !== undefined ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setDictionaryType(addrs.get(this.getDictionaryType()));
                                    }
                                }
                                {
                                    var tmp$3 = this.getSuperTypes().iterator();
                                    while (tmp$3.hasNext()) {
                                        var sub_0 = tmp$3.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSuperTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addSuperTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                {
                                    var tmp$4 = this.getFilters().iterator();
                                    while (tmp$4.hasNext()) {
                                        var sub_1 = tmp$4.next();
                                        if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                                            clonedSelfObject.addFilters(sub_1);
                                        }
                                        else {
                                            clonedSelfObject.addFilters(addrs.get(sub_1));
                                        }
                                    }
                                }
                                var subsubsubdictionaryType = this.getDictionaryType();
                                if (subsubsubdictionaryType !== null && subsubsubdictionaryType !== undefined) {
                                    subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findFiltersByID: function (key) {
                                return this.get__filters().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = query.substring(0, _.js.indexOf(query, '['));
                                if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                }
                                var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = relationName; tmp$1 < 4; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === 'deployUnits') {
                                            {
                                                var objFound = this.findDeployUnitsByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$2 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === 'superTypes') {
                                            {
                                                var objFound_0 = this.findSuperTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_0 !== null && objFound_0 !== undefined)) {
                                                    tmp$2 = objFound_0.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_0;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 2)
                                        if (tmp$0 === 'filters') {
                                            {
                                                var objFound_1 = this.findFiltersByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound_1 !== null && objFound_1 !== undefined)) {
                                                    tmp$2 = objFound_1.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$2 = objFound_1;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$1 === 3) {
                                        tmp$2 = null;
                                    }
                                }
                                return tmp$2;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.MessagePortType)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getSynchrone(), similarObjCasted.getSynchrone())) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1k = Kotlin.createTrait(c1i, c18, {
                        })
                        , c12 = Kotlin.createTrait(c1h, c1k, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                var subsubsubsubtype = this.getType();
                                if (subsubsubsubtype !== null && subsubsubsubtype !== undefined) {
                                    subsubsubsubtype.setRecursiveReadOnly();
                                }
                                this.setInternalReadOnly();
                            },
                            get__type: function () {
                                return this.$_type;
                            },
                            set__type: function (tmp$0) {
                                this.$_type = tmp$0;
                            },
                            delete: function () {
                                this.set__type(null);
                            },
                            getType: function () {
                                return this.get__type();
                            },
                            setType: function (type) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (!Kotlin.equals(this.get__type(), type)) {
                                    this.set__type(type);
                                }
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createParameter();
                                selfObjectClone.setName(this.getName());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                if (this.getType() !== null && this.getType() !== undefined) {
                                    var tmp$0;
                                    if (mutableOnly && ((tmp$0 = this.getType()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                                        var tmp$1;
                                        clonedSelfObject.setType((tmp$1 = this.getType()) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE());
                                    }
                                    else {
                                        clonedSelfObject.setType(addrs.get(this.getType()));
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.Parameter)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c28 = Kotlin.createTrait(c1i, c18, {
                        })
                        , c13 = Kotlin.createTrait(c1h, c28, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getExtraFonctionalProperties().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                {
                                    var tmp$1 = this.getPortTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__extraFonctionalProperties_java_cache: function () {
                                return this.$_extraFonctionalProperties_java_cache;
                            },
                            set__extraFonctionalProperties_java_cache: function (tmp$0) {
                                this.$_extraFonctionalProperties_java_cache = tmp$0;
                            },
                            get__extraFonctionalProperties: function () {
                                return this.$_extraFonctionalProperties;
                            },
                            get__portTypes_java_cache: function () {
                                return this.$_portTypes_java_cache;
                            },
                            set__portTypes_java_cache: function (tmp$0) {
                                this.$_portTypes_java_cache = tmp$0;
                            },
                            get__portTypes: function () {
                                return this.$_portTypes;
                            },
                            delete: function () {
                                {
                                    var tmp$0 = this.get__extraFonctionalProperties().iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.delete();
                                    }
                                }
                                var tmp$1, tmp$2;
                                (tmp$1 = this.get__extraFonctionalProperties()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__extraFonctionalProperties_java_cache(null);
                                (tmp$2 = this.get__portTypes()) !== null && tmp$2 !== undefined ? tmp$2.clear() : null;
                                this.set__portTypes_java_cache(null);
                            },
                            getExtraFonctionalProperties: function () {
                                return this.get__extraFonctionalProperties();
                            },
                            setExtraFonctionalProperties: function (extraFonctionalProperties) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (extraFonctionalProperties === null || extraFonctionalProperties === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__extraFonctionalProperties_java_cache(null);
                                if (!Kotlin.equals(this.get__extraFonctionalProperties(), extraFonctionalProperties)) {
                                    this.get__extraFonctionalProperties().clear();
                                    this.get__extraFonctionalProperties().addAll(extraFonctionalProperties);
                                    {
                                        var tmp$0 = extraFonctionalProperties.iterator();
                                        while (tmp$0.hasNext()) {
                                            var elem = tmp$0.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f38, this, elem));
                                            elem.setContainmentRefName('extraFonctionalProperties');
                                        }
                                    }
                                }
                            },
                            addExtraFonctionalProperties: function (extraFonctionalProperties) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__extraFonctionalProperties_java_cache(null);
                                extraFonctionalProperties.setEContainer(this, Kotlin.b0(_f.f39, this, extraFonctionalProperties));
                                extraFonctionalProperties.setContainmentRefName('extraFonctionalProperties');
                                this.get__extraFonctionalProperties().add(extraFonctionalProperties);
                            },
                            addAllExtraFonctionalProperties: function (extraFonctionalProperties) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__extraFonctionalProperties_java_cache(null);
                                this.get__extraFonctionalProperties().addAll(extraFonctionalProperties);
                                {
                                    var tmp$0 = extraFonctionalProperties.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(this, Kotlin.b0(_f.f3a, this, el));
                                        el.setContainmentRefName('extraFonctionalProperties');
                                    }
                                }
                            },
                            removeExtraFonctionalProperties: function (extraFonctionalProperties) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__extraFonctionalProperties_java_cache(null);
                                if (this.get__extraFonctionalProperties().size() !== 0 && this.get__extraFonctionalProperties().indexOf(extraFonctionalProperties) !== -1) {
                                    this.get__extraFonctionalProperties().remove(this.get__extraFonctionalProperties().indexOf(extraFonctionalProperties));
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = extraFonctionalProperties) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = extraFonctionalProperties) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllExtraFonctionalProperties: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var temp_els = this.getExtraFonctionalProperties();
                                {
                                    var tmp$0 = temp_els.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__extraFonctionalProperties_java_cache(null);
                                this.get__extraFonctionalProperties().clear();
                            },
                            getPortTypes: function () {
                                return _.kotlin.toList(this.get__portTypes().values());
                            },
                            setPortTypes: function (portTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (portTypes === null || portTypes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__portTypes_java_cache(null);
                                if (!Kotlin.equals(this.get__portTypes(), portTypes)) {
                                    this.get__portTypes().clear();
                                    {
                                        var tmp$0 = portTypes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__portTypes().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addPortTypes: function (portTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__portTypes_java_cache(null);
                                this.get__portTypes().put(portTypes.getName(), portTypes);
                            },
                            addAllPortTypes: function (portTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__portTypes_java_cache(null);
                                {
                                    var tmp$0 = portTypes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__portTypes().put(el.getName(), el);
                                    }
                                }
                            },
                            removePortTypes: function (portTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__portTypes_java_cache(null);
                                if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey(portTypes.getName())) {
                                    this.get__portTypes().remove(portTypes.getName());
                                }
                            },
                            removeAllPortTypes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__portTypes_java_cache(null);
                                this.get__portTypes().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createIntegrationPattern();
                                selfObjectClone.setName(this.getName());
                                subResult.put(this, selfObjectClone);
                                {
                                    var tmp$0 = this.getExtraFonctionalProperties().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getExtraFonctionalProperties().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addExtraFonctionalProperties(sub);
                                        }
                                        else {
                                            clonedSelfObject.addExtraFonctionalProperties(addrs.get(sub));
                                        }
                                    }
                                }
                                {
                                    var tmp$1 = this.getPortTypes().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                                            clonedSelfObject.addPortTypes(sub_0);
                                        }
                                        else {
                                            clonedSelfObject.addPortTypes(addrs.get(sub_0));
                                        }
                                    }
                                }
                                {
                                    var tmp$2 = this.getExtraFonctionalProperties().iterator();
                                    while (tmp$2.hasNext()) {
                                        var sub_1 = tmp$2.next();
                                        sub_1.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findPortTypesByID: function (key) {
                                return this.get__portTypes().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = 'portTypes';
                                var optionalDetected = firstSepIndex !== 9;
                                if (optionalDetected) {
                                    extraReadChar = extraReadChar - 2;
                                }
                                if (_.js.indexOf(query, '{') === 0) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    if (optionalDetected) {
                                        if (_.js.indexOf(query, '/') !== -1) {
                                            queryID = query.substring(0, _.js.indexOf(query, '/'));
                                        }
                                        else {
                                            queryID = query.substring(0, _.js.get_size(query));
                                        }
                                    }
                                    else {
                                        queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                    }
                                }
                                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
                                tmp$0 = query;
                                if (optionalDetected) {
                                    tmp$1 = 0;
                                }
                                else {
                                    tmp$1 = _.js.get_size(relationName);
                                }
                                var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                for (tmp$3 = 0, tmp$2 = relationName; tmp$3 < 2; ++tmp$3) {
                                    if (tmp$3 === 0)
                                        if (tmp$2 === 'portTypes') {
                                            {
                                                var objFound = this.findPortTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$4 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$3 === 1) {
                                        tmp$4 = null;
                                    }
                                }
                                return tmp$4;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.IntegrationPattern)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                if (this.getExtraFonctionalProperties().size() !== similarObjCasted.getExtraFonctionalProperties().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getExtraFonctionalProperties().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var lookEqualsSub = false;
                                        {
                                            var tmp$1 = similarObjCasted.getExtraFonctionalProperties().iterator();
                                            while (tmp$1.hasNext()) {
                                                var subElement2 = tmp$1.next();
                                                if (Kotlin.equals(subElement, subElement2)) {
                                                    lookEqualsSub = true;
                                                }
                                            }
                                        }
                                        if (!lookEqualsSub) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c1m = Kotlin.createTrait(c1i, {
                        })
                        , c14 = Kotlin.createTrait(c1h, c1m, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getNetworkProperties().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__networkType: function () {
                                return this.$_networkType;
                            },
                            set__networkType: function (tmp$0) {
                                this.$_networkType = tmp$0;
                            },
                            get__estimatedRate: function () {
                                return this.$_estimatedRate;
                            },
                            set__estimatedRate: function (tmp$0) {
                                this.$_estimatedRate = tmp$0;
                            },
                            get__lastCheck: function () {
                                return this.$_lastCheck;
                            },
                            set__lastCheck: function (tmp$0) {
                                this.$_lastCheck = tmp$0;
                            },
                            get__networkProperties_java_cache: function () {
                                return this.$_networkProperties_java_cache;
                            },
                            set__networkProperties_java_cache: function (tmp$0) {
                                this.$_networkProperties_java_cache = tmp$0;
                            },
                            get__networkProperties: function () {
                                return this.$_networkProperties;
                            },
                            delete: function () {
                                {
                                    var tmp$0 = _.kotlin.iterator(this.get__networkProperties());
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        _.kotlin.get_value(el).delete();
                                    }
                                }
                                var tmp$1;
                                (tmp$1 = this.get__networkProperties()) !== null && tmp$1 !== undefined ? tmp$1.clear() : null;
                                this.set__networkProperties_java_cache(null);
                            },
                            getNetworkType: function () {
                                return this.get__networkType();
                            },
                            setNetworkType: function (networkType) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__networkType(networkType);
                            },
                            getEstimatedRate: function () {
                                return this.get__estimatedRate();
                            },
                            setEstimatedRate: function (estimatedRate) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__estimatedRate(estimatedRate);
                            },
                            getLastCheck: function () {
                                return this.get__lastCheck();
                            },
                            setLastCheck: function (lastCheck) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__lastCheck(lastCheck);
                            },
                            getNetworkProperties: function () {
                                return _.kotlin.toList(this.get__networkProperties().values());
                            },
                            setNetworkProperties: function (networkProperties) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (networkProperties === null || networkProperties === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__networkProperties_java_cache(null);
                                if (!Kotlin.equals(this.get__networkProperties(), networkProperties)) {
                                    this.get__networkProperties().clear();
                                    {
                                        var tmp$0 = networkProperties.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__networkProperties().put(el.getName(), el);
                                        }
                                    }
                                    {
                                        var tmp$1 = networkProperties.iterator();
                                        while (tmp$1.hasNext()) {
                                            var elem = tmp$1.next();
                                            elem.setEContainer(this, Kotlin.b0(_f.f3b, this, elem));
                                            elem.setContainmentRefName('networkProperties');
                                        }
                                    }
                                }
                            },
                            addNetworkProperties: function (networkProperties) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__networkProperties_java_cache(null);
                                networkProperties.setEContainer(this, Kotlin.b0(_f.f3c, this, networkProperties));
                                networkProperties.setContainmentRefName('networkProperties');
                                this.get__networkProperties().put(networkProperties.getName(), networkProperties);
                            },
                            addAllNetworkProperties: function (networkProperties) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__networkProperties_java_cache(null);
                                {
                                    var tmp$0 = networkProperties.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__networkProperties().put(el.getName(), el);
                                    }
                                }
                                {
                                    var tmp$1 = networkProperties.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        el_0.setEContainer(this, Kotlin.b0(_f.f3d, this, el_0));
                                        el_0.setContainmentRefName('networkProperties');
                                    }
                                }
                            },
                            removeNetworkProperties: function (networkProperties) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__networkProperties_java_cache(null);
                                if (this.get__networkProperties().size() !== 0 && this.get__networkProperties().containsKey(networkProperties.getName())) {
                                    this.get__networkProperties().remove(networkProperties.getName());
                                    var tmp$0, tmp$1;
                                    ((tmp$0 = networkProperties) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null);
                                    ((tmp$1 = networkProperties) !== null && tmp$1 !== undefined ? tmp$1 : Kotlin.throwNPE()).setContainmentRefName(null);
                                }
                            },
                            removeAllNetworkProperties: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.getNetworkProperties()) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var elm = tmp$1.next();
                                        var el = elm;
                                        el.setEContainer(null, null);
                                        el.setContainmentRefName(null);
                                    }
                                }
                                this.set__networkProperties_java_cache(null);
                                this.get__networkProperties().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createNodeLink();
                                selfObjectClone.setNetworkType(this.getNetworkType());
                                selfObjectClone.setEstimatedRate(this.getEstimatedRate());
                                selfObjectClone.setLastCheck(this.getLastCheck());
                                subResult.put(this, selfObjectClone);
                                {
                                    var tmp$0 = this.getNetworkProperties().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.getClonelazy(subResult, _factories, mutableOnly);
                                    }
                                }
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getNetworkProperties().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addNetworkProperties(sub);
                                        }
                                        else {
                                            clonedSelfObject.addNetworkProperties(addrs.get(sub));
                                        }
                                    }
                                }
                                {
                                    var tmp$1 = this.getNetworkProperties().iterator();
                                    while (tmp$1.hasNext()) {
                                        var sub_0 = tmp$1.next();
                                        sub_0.resolve(addrs, readOnly, mutableOnly);
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            path: function () {
                                if (this.eContainer() === null || this.eContainer() === undefined) {
                                    return '';
                                }
                                else {
                                    return null;
                                }
                            },
                            findNetworkPropertiesByID: function (key) {
                                return this.get__networkProperties().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = 'networkProperties';
                                var optionalDetected = firstSepIndex !== 17;
                                if (optionalDetected) {
                                    extraReadChar = extraReadChar - 2;
                                }
                                if (_.js.indexOf(query, '{') === 0) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    if (optionalDetected) {
                                        if (_.js.indexOf(query, '/') !== -1) {
                                            queryID = query.substring(0, _.js.indexOf(query, '/'));
                                        }
                                        else {
                                            queryID = query.substring(0, _.js.get_size(query));
                                        }
                                    }
                                    else {
                                        queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                    }
                                }
                                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
                                tmp$0 = query;
                                if (optionalDetected) {
                                    tmp$1 = 0;
                                }
                                else {
                                    tmp$1 = _.js.get_size(relationName);
                                }
                                var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                for (tmp$3 = 0, tmp$2 = relationName; tmp$3 < 2; ++tmp$3) {
                                    if (tmp$3 === 0)
                                        if (tmp$2 === 'networkProperties') {
                                            {
                                                var objFound = this.findNetworkPropertiesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    throw new Kotlin.Exception('KMFQL : rejected sucessor');
                                                }
                                                else {
                                                    tmp$4 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$3 === 1) {
                                        tmp$4 = null;
                                    }
                                }
                                return tmp$4;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.NodeLink)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getNetworkType(), similarObjCasted.getNetworkType())) {
                                    return false;
                                }
                                if (this.getEstimatedRate() !== similarObjCasted.getEstimatedRate()) {
                                    return false;
                                }
                                if (!Kotlin.equals(this.getLastCheck(), similarObjCasted.getLastCheck())) {
                                    return false;
                                }
                                if (this.getNetworkProperties().size() !== similarObjCasted.getNetworkProperties().size()) {
                                    return false;
                                }
                                {
                                    var tmp$0 = this.getNetworkProperties().iterator();
                                    while (tmp$0.hasNext()) {
                                        var subElement = tmp$0.next();
                                        var foundedElement = similarObjCasted.findNetworkPropertiesByID(subElement.getName());
                                        if (foundedElement === null || foundedElement === undefined || !Kotlin.equals(foundedElement, subElement)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                        })
                        , c26 = Kotlin.createTrait(c1i, c18, {
                        })
                        , c15 = Kotlin.createTrait(c1h, c26, cx, {
                            setRecursiveReadOnly: function () {
                                if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                                    return;
                                }
                                this.set_internal_recursive_readOnlyElem(true);
                                {
                                    var tmp$0 = this.getSubTypes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        sub.setRecursiveReadOnly();
                                    }
                                }
                                this.setInternalReadOnly();
                            },
                            get__subTypes_java_cache: function () {
                                return this.$_subTypes_java_cache;
                            },
                            set__subTypes_java_cache: function (tmp$0) {
                                this.$_subTypes_java_cache = tmp$0;
                            },
                            get__subTypes: function () {
                                return this.$_subTypes;
                            },
                            delete: function () {
                                var tmp$0;
                                (tmp$0 = this.get__subTypes()) !== null && tmp$0 !== undefined ? tmp$0.clear() : null;
                                this.set__subTypes_java_cache(null);
                            },
                            getSubTypes: function () {
                                return _.kotlin.toList(this.get__subTypes().values());
                            },
                            setSubTypes: function (subTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                if (subTypes === null || subTypes === undefined) {
                                    throw new Kotlin.IllegalArgumentException('The list in parameter of the setter cannot be null. Use removeAll to empty a collection.');
                                }
                                this.set__subTypes_java_cache(null);
                                if (!Kotlin.equals(this.get__subTypes(), subTypes)) {
                                    this.get__subTypes().clear();
                                    {
                                        var tmp$0 = subTypes.iterator();
                                        while (tmp$0.hasNext()) {
                                            var el = tmp$0.next();
                                            this.get__subTypes().put(el.getName(), el);
                                        }
                                    }
                                }
                            },
                            addSubTypes: function (subTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__subTypes_java_cache(null);
                                this.get__subTypes().put(subTypes.getName(), subTypes);
                            },
                            addAllSubTypes: function (subTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__subTypes_java_cache(null);
                                {
                                    var tmp$0 = subTypes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.get__subTypes().put(el.getName(), el);
                                    }
                                }
                            },
                            removeSubTypes: function (subTypes) {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__subTypes_java_cache(null);
                                if (this.get__subTypes().size() !== 0 && this.get__subTypes().containsKey(subTypes.getName())) {
                                    this.get__subTypes().remove(subTypes.getName());
                                }
                            },
                            removeAllSubTypes: function () {
                                if (this.isReadOnly()) {
                                    throw new Kotlin.Exception('This model is ReadOnly. Elements are not modifiable.');
                                }
                                this.set__subTypes_java_cache(null);
                                this.get__subTypes().clear();
                            },
                            getClonelazy: function (subResult, _factories, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return;
                                }
                                var selfObjectClone = _factories.getKevoreeFactory().createTypeLibrary();
                                selfObjectClone.setName(this.getName());
                                subResult.put(this, selfObjectClone);
                            },
                            resolve: function (addrs, readOnly, mutableOnly) {
                                if (mutableOnly && this.isRecursiveReadOnly()) {
                                    return this;
                                }
                                var clonedSelfObject = addrs.get(this);
                                {
                                    var tmp$0 = this.getSubTypes().iterator();
                                    while (tmp$0.hasNext()) {
                                        var sub = tmp$0.next();
                                        if (mutableOnly && sub.isRecursiveReadOnly()) {
                                            clonedSelfObject.addSubTypes(sub);
                                        }
                                        else {
                                            clonedSelfObject.addSubTypes(addrs.get(sub));
                                        }
                                    }
                                }
                                if (readOnly) {
                                    clonedSelfObject.setInternalReadOnly();
                                }
                                return clonedSelfObject;
                            },
                            internalGetKey: function () {
                                return this.getName();
                            },
                            path: function () {
                                var container = this.eContainer();
                                if (container !== null && container !== undefined) {
                                    var parentPath = container.path();
                                    if (parentPath === null || parentPath === undefined) {
                                        return null;
                                    }
                                    else {
                                        var tmp$0;
                                        if (Kotlin.equals(parentPath, '')) {
                                            tmp$0 = '';
                                        }
                                        else {
                                            tmp$0 = parentPath + '/';
                                        }
                                        return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                                    }
                                }
                                else {
                                    return '';
                                }
                            },
                            findSubTypesByID: function (key) {
                                return this.get__subTypes().get(key);
                            },
                            findByPath: function (query) {
                                var firstSepIndex = _.js.indexOf(query, '[');
                                var queryID = '';
                                var extraReadChar = 2;
                                var relationName = 'subTypes';
                                var optionalDetected = firstSepIndex !== 8;
                                if (optionalDetected) {
                                    extraReadChar = extraReadChar - 2;
                                }
                                if (_.js.indexOf(query, '{') === 0) {
                                    queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                                    extraReadChar = extraReadChar + 2;
                                }
                                else {
                                    if (optionalDetected) {
                                        if (_.js.indexOf(query, '/') !== -1) {
                                            queryID = query.substring(0, _.js.indexOf(query, '/'));
                                        }
                                        else {
                                            queryID = query.substring(0, _.js.get_size(query));
                                        }
                                    }
                                    else {
                                        queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                                    }
                                }
                                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
                                tmp$0 = query;
                                if (optionalDetected) {
                                    tmp$1 = 0;
                                }
                                else {
                                    tmp$1 = _.js.get_size(relationName);
                                }
                                var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
                                if (_.js.indexOf(subquery, '/') !== -1) {
                                    subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
                                }
                                for (tmp$3 = 0, tmp$2 = relationName; tmp$3 < 2; ++tmp$3) {
                                    if (tmp$3 === 0)
                                        if (tmp$2 === 'subTypes') {
                                            {
                                                var objFound = this.findSubTypesByID(queryID);
                                                if (!Kotlin.equals(subquery, '') && (objFound !== null && objFound !== undefined)) {
                                                    tmp$4 = objFound.findByPath(subquery);
                                                }
                                                else {
                                                    tmp$4 = objFound;
                                                }
                                            }
                                            break;
                                        }
                                    if (tmp$3 === 1) {
                                        tmp$4 = null;
                                    }
                                }
                                return tmp$4;
                            },
                            modelEquals: function (similarObj) {
                                if (similarObj === null || similarObj === undefined || !Kotlin.isType(similarObj, _.org.kevoree.TypeLibrary)) {
                                    return false;
                                }
                                var similarObjCasted = similarObj;
                                if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                                    return false;
                                }
                                return true;
                            }
                        })
                        , c1o = Kotlin.createTrait({
                        })
                        , c1x = Kotlin.createTrait({
                        })
                        , c2b = Kotlin.createTrait({
                            handleEvent: function (arg1) {
                                noImpl;
                            }
                        })
                        , c2c = Kotlin.createClass(Kotlin.Iterator, {
                            initialize: function () {
                                this.$state = _.kotlin.support.State.get_NotReady();
                                this.$nextValue = null;
                            },
                            get_state: function () {
                                return this.$state;
                            },
                            set_state: function (tmp$0) {
                                this.$state = tmp$0;
                            },
                            get_nextValue: function () {
                                return this.$nextValue;
                            },
                            set_nextValue: function (tmp$0) {
                                this.$nextValue = tmp$0;
                            },
                            hasNext: function () {
                                _.kotlin.require(this.get_state() !== _.kotlin.support.State.get_Failed(), 'Failed requirement');
                                var tmp$0, tmp$1, tmp$2;
                                for (tmp$1 = 0, tmp$0 = this.get_state(); tmp$1 < 3; ++tmp$1) {
                                    if (tmp$1 === 0)
                                        if (tmp$0 === _.kotlin.support.State.get_Done()) {
                                            tmp$2 = false;
                                            break;
                                        }
                                    if (tmp$1 === 1)
                                        if (tmp$0 === _.kotlin.support.State.get_Ready()) {
                                            tmp$2 = true;
                                            break;
                                        }
                                    if (tmp$1 === 2)
                                        tmp$2 = this.tryToComputeNext();
                                }
                                return tmp$2;
                            },
                            next: function () {
                                if (!this.hasNext())
                                    throw new Kotlin.NoSuchElementException();
                                this.set_state(_.kotlin.support.State.get_NotReady());
                                return this.get_nextValue();
                            },
                            peek: function () {
                                if (!this.hasNext())
                                    throw new Kotlin.NoSuchElementException();
                                return this.get_nextValue();
                            },
                            tryToComputeNext: function () {
                                this.set_state(_.kotlin.support.State.get_Failed());
                                this.computeNext();
                                return this.get_state() === _.kotlin.support.State.get_Ready();
                            },
                            setNext: function (value) {
                                this.set_nextValue(value);
                                this.set_state(_.kotlin.support.State.get_Ready());
                            },
                            done: function () {
                                this.set_state(_.kotlin.support.State.get_Done());
                            }
                        })
                        , c2d = Kotlin.createTrait({
                        });
                    return {c0: c0, c1i: c1i, c18: c18, c1: c1, c1r: c1r, c2: c2, c1h: c1h, c23: c23, cx: cx, c3: c3, c1t: c1t, c1a: c1a, c24: c24, cw: cw, c10: c10, c4: c4, c17: c17, c5: c5, c1j: c1j, c6: c6, c20: c20, c11: c11, c7: c7, c27: c27, c8: c8, c1n: c1n, c9: c9, c1q: c1q, ca: ca, c2a: c2a, cb: cb, c22: c22, cc: cc, c19: c19, cd: cd, c1c: c1c, ce: ce, c1f: c1f, cf: cf, c1l: c1l, cg: cg, c1b: c1b, ch: ch, c1v: c1v, ci: ci, c1y: c1y, cj: cj, c1g: c1g, ck: ck, c1u: c1u, cl: cl, c1p: c1p, cm: cm, c25: c25, cn: cn, c1s: c1s, co: co, c1z: c1z, cp: cp, cq: cq, c1d: c1d, cr: cr, cs: cs, c1e: c1e, ct: ct, c21: c21, cu: cu, c29: c29, cv: cv, c1w: c1w, cy: cy, c16: c16, cz: cz, c1k: c1k, c12: c12, c28: c28, c13: c13, c1m: c1m, c14: c14, c26: c26, c15: c15, c1o: c1o, c1x: c1x, c2b: c2b, c2c: c2c, c2d: c2d};
                }()
                , _ = {
                    kmfjs: Kotlin.definePackage({
                        MyIt: classes.c0,
                        MyClazz: Kotlin.createClass(classes.c0, {
                            initialize: function () {
                                this.$nullableL = null;
                            },
                            get_nullableL: function () {
                                return this.$nullableL;
                            }
                        }),
                        main: function () {
                            var element = document.getElementById('foo');
                            var myString = 'Hello';
                            var i = 0;
                            while (i < _.js.get_size(myString)) {
                                myString.charAt(i);
                                i = i + 1;
                            }
                            var res = new _.kmfjs.MyClazz();
                            var tmp$0, tmp$1, tmp$2;
                            for (tmp$1 = 0, tmp$0 = res; tmp$1 < 2; ++tmp$1) {
                                if (tmp$1 === 0)
                                    if (Kotlin.isType(tmp$0, _.kmfjs.MyClazz) || Kotlin.isType(tmp$0, _.kmfjs.MyIt)) {
                                        {
                                            if (element !== null && element !== undefined) {
                                                var tmp$3;
                                                tmp$2 = element.appendChild((tmp$3 = document.createTextNode('Hello2')) !== null && tmp$3 !== undefined ? tmp$3 : Kotlin.throwNPE());
                                            }
                                        }
                                        break;
                                    }
                                if (tmp$1 === 1) {
                                }
                            }
                            tmp$2;
                        }
                    }),
                    kevoree: Kotlin.definePackage({
                    }),
                    org: Kotlin.definePackage({
                        kevoree: Kotlin.definePackage({
                            DeployUnit: classes.c1,
                            ContainerNode: classes.c2,
                            MessagePortType: classes.c16,
                            GroupType: classes.c17,
                            NamedElement: classes.c18,
                            Wire: classes.c19,
                            LifeCycleTypeDefinition: classes.c1a,
                            Repository: classes.c1b,
                            NetworkProperty: classes.c1c,
                            ServicePortType: classes.c1d,
                            ChannelType: classes.c1e,
                            ContainerRoot: classes.c1f,
                            Channel: classes.c1g,
                            TypedElement: classes.c1j,
                            Parameter: classes.c1k,
                            NodeNetwork: classes.c1l,
                            NodeLink: classes.c1m,
                            MBinding: classes.c1n,
                            PortType: classes.c1p,
                            Operation: classes.c1q,
                            Instance: classes.c1r,
                            NodeType: classes.c1s,
                            TypeDefinition: classes.c1t,
                            PortTypeRef: classes.c1u,
                            DictionaryAttribute: classes.c1v,
                            CompositeType: classes.c1w,
                            KevoreeFactory: classes.c1x,
                            DictionaryValue: classes.c1y,
                            PortTypeMapping: classes.c1z,
                            Group: classes.c20,
                            ExtraFonctionalProperty: classes.c21,
                            DictionaryType: classes.c22,
                            Namespace: classes.c23,
                            ComponentType: classes.c24,
                            AdaptationPrimitiveType: classes.c25,
                            TypeLibrary: classes.c26,
                            Port: classes.c27,
                            IntegrationPattern: classes.c28,
                            Dictionary: classes.c29,
                            ComponentInstance: classes.c2a,
                            impl: Kotlin.definePackage({
                                CompositeTypeImpl: Kotlin.createClass(classes.cy, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_factoryBean = '';
                                        this.$_bean = '';
                                        this.$_startMethod = '';
                                        this.$_stopMethod = '';
                                        this.$_updateMethod = '';
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_dictionaryType = null;
                                        this.$_superTypes_java_cache = null;
                                        this.$_superTypes = new Kotlin.HashMap(0);
                                        this.$_required_java_cache = null;
                                        this.$_required = new Kotlin.HashMap(0);
                                        this.$_integrationPatterns_java_cache = null;
                                        this.$_integrationPatterns = new Kotlin.HashMap(0);
                                        this.$_extraFonctionalProperties = null;
                                        this.$_provided_java_cache = null;
                                        this.$_provided = new Kotlin.HashMap(0);
                                        this.$_childs_java_cache = null;
                                        this.$_childs = new Kotlin.HashMap(0);
                                        this.$_wires_java_cache = null;
                                        this.$_wires = new Kotlin.ArrayList(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__factoryBean: function () {
                                        return this.$_factoryBean;
                                    },
                                    set__factoryBean: function (tmp$0) {
                                        this.$_factoryBean = tmp$0;
                                    },
                                    get__bean: function () {
                                        return this.$_bean;
                                    },
                                    set__bean: function (tmp$0) {
                                        this.$_bean = tmp$0;
                                    },
                                    get__startMethod: function () {
                                        return this.$_startMethod;
                                    },
                                    set__startMethod: function (tmp$0) {
                                        this.$_startMethod = tmp$0;
                                    },
                                    get__stopMethod: function () {
                                        return this.$_stopMethod;
                                    },
                                    set__stopMethod: function (tmp$0) {
                                        this.$_stopMethod = tmp$0;
                                    },
                                    get__updateMethod: function () {
                                        return this.$_updateMethod;
                                    },
                                    set__updateMethod: function (tmp$0) {
                                        this.$_updateMethod = tmp$0;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__dictionaryType: function () {
                                        return this.$_dictionaryType;
                                    },
                                    set__dictionaryType: function (tmp$0) {
                                        this.$_dictionaryType = tmp$0;
                                    },
                                    get__superTypes_java_cache: function () {
                                        return this.$_superTypes_java_cache;
                                    },
                                    set__superTypes_java_cache: function (tmp$0) {
                                        this.$_superTypes_java_cache = tmp$0;
                                    },
                                    get__superTypes: function () {
                                        return this.$_superTypes;
                                    },
                                    get__required_java_cache: function () {
                                        return this.$_required_java_cache;
                                    },
                                    set__required_java_cache: function (tmp$0) {
                                        this.$_required_java_cache = tmp$0;
                                    },
                                    get__required: function () {
                                        return this.$_required;
                                    },
                                    get__integrationPatterns_java_cache: function () {
                                        return this.$_integrationPatterns_java_cache;
                                    },
                                    set__integrationPatterns_java_cache: function (tmp$0) {
                                        this.$_integrationPatterns_java_cache = tmp$0;
                                    },
                                    get__integrationPatterns: function () {
                                        return this.$_integrationPatterns;
                                    },
                                    get__extraFonctionalProperties: function () {
                                        return this.$_extraFonctionalProperties;
                                    },
                                    set__extraFonctionalProperties: function (tmp$0) {
                                        this.$_extraFonctionalProperties = tmp$0;
                                    },
                                    get__provided_java_cache: function () {
                                        return this.$_provided_java_cache;
                                    },
                                    set__provided_java_cache: function (tmp$0) {
                                        this.$_provided_java_cache = tmp$0;
                                    },
                                    get__provided: function () {
                                        return this.$_provided;
                                    },
                                    get__childs_java_cache: function () {
                                        return this.$_childs_java_cache;
                                    },
                                    set__childs_java_cache: function (tmp$0) {
                                        this.$_childs_java_cache = tmp$0;
                                    },
                                    get__childs: function () {
                                        return this.$_childs;
                                    },
                                    get__wires_java_cache: function () {
                                        return this.$_wires_java_cache;
                                    },
                                    set__wires_java_cache: function (tmp$0) {
                                        this.$_wires_java_cache = tmp$0;
                                    },
                                    get__wires: function () {
                                        return this.$_wires;
                                    }
                                }),
                                DictionaryTypeImpl: Kotlin.createClass(classes.cc, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_attributes_java_cache = null;
                                        this.$_attributes = new Kotlin.HashMap(0);
                                        this.$_defaultValues_java_cache = null;
                                        this.$_defaultValues = new Kotlin.ArrayList(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__attributes_java_cache: function () {
                                        return this.$_attributes_java_cache;
                                    },
                                    set__attributes_java_cache: function (tmp$0) {
                                        this.$_attributes_java_cache = tmp$0;
                                    },
                                    get__attributes: function () {
                                        return this.$_attributes;
                                    },
                                    get__defaultValues_java_cache: function () {
                                        return this.$_defaultValues_java_cache;
                                    },
                                    set__defaultValues_java_cache: function (tmp$0) {
                                        this.$_defaultValues_java_cache = tmp$0;
                                    },
                                    get__defaultValues: function () {
                                        return this.$_defaultValues;
                                    }
                                }),
                                ChannelImpl: Kotlin.createClass(classes.ck, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_metaData = '';
                                        this.$_typeDefinition = null;
                                        this.$_dictionary = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__metaData: function () {
                                        return this.$_metaData;
                                    },
                                    set__metaData: function (tmp$0) {
                                        this.$_metaData = tmp$0;
                                    },
                                    get__typeDefinition: function () {
                                        return this.$_typeDefinition;
                                    },
                                    set__typeDefinition: function (tmp$0) {
                                        this.$_typeDefinition = tmp$0;
                                    },
                                    get__dictionary: function () {
                                        return this.$_dictionary;
                                    },
                                    set__dictionary: function (tmp$0) {
                                        this.$_dictionary = tmp$0;
                                    }
                                }),
                                NamespaceImpl: Kotlin.createClass(classes.c3, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_childs_java_cache = null;
                                        this.$_childs = new Kotlin.HashMap(0);
                                        this.$_parent = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__childs_java_cache: function () {
                                        return this.$_childs_java_cache;
                                    },
                                    set__childs_java_cache: function (tmp$0) {
                                        this.$_childs_java_cache = tmp$0;
                                    },
                                    get__childs: function () {
                                        return this.$_childs;
                                    },
                                    get__parent: function () {
                                        return this.$_parent;
                                    },
                                    set__parent: function (tmp$0) {
                                        this.$_parent = tmp$0;
                                    }
                                }),
                                NamespaceInternal: classes.c3,
                                ComponentTypeInternal: classes.c4,
                                GroupTypeInternal: classes.c5,
                                ContainerNodeImpl: Kotlin.createClass(classes.cq, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_metaData = '';
                                        this.$_typeDefinition = null;
                                        this.$_dictionary = null;
                                        this.$_components_java_cache = null;
                                        this.$_components = new Kotlin.HashMap(0);
                                        this.$_hosts_java_cache = null;
                                        this.$_hosts = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__metaData: function () {
                                        return this.$_metaData;
                                    },
                                    set__metaData: function (tmp$0) {
                                        this.$_metaData = tmp$0;
                                    },
                                    get__typeDefinition: function () {
                                        return this.$_typeDefinition;
                                    },
                                    set__typeDefinition: function (tmp$0) {
                                        this.$_typeDefinition = tmp$0;
                                    },
                                    get__dictionary: function () {
                                        return this.$_dictionary;
                                    },
                                    set__dictionary: function (tmp$0) {
                                        this.$_dictionary = tmp$0;
                                    },
                                    get__components_java_cache: function () {
                                        return this.$_components_java_cache;
                                    },
                                    set__components_java_cache: function (tmp$0) {
                                        this.$_components_java_cache = tmp$0;
                                    },
                                    get__components: function () {
                                        return this.$_components;
                                    },
                                    get__hosts_java_cache: function () {
                                        return this.$_hosts_java_cache;
                                    },
                                    set__hosts_java_cache: function (tmp$0) {
                                        this.$_hosts_java_cache = tmp$0;
                                    },
                                    get__hosts: function () {
                                        return this.$_hosts;
                                    }
                                }),
                                ComponentInstanceImpl: Kotlin.createClass(classes.cb, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_metaData = '';
                                        this.$_typeDefinition = null;
                                        this.$_dictionary = null;
                                        this.$_provided_java_cache = null;
                                        this.$_provided = new Kotlin.ArrayList(0);
                                        this.$_required_java_cache = null;
                                        this.$_required = new Kotlin.ArrayList(0);
                                        this.$_namespace = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__metaData: function () {
                                        return this.$_metaData;
                                    },
                                    set__metaData: function (tmp$0) {
                                        this.$_metaData = tmp$0;
                                    },
                                    get__typeDefinition: function () {
                                        return this.$_typeDefinition;
                                    },
                                    set__typeDefinition: function (tmp$0) {
                                        this.$_typeDefinition = tmp$0;
                                    },
                                    get__dictionary: function () {
                                        return this.$_dictionary;
                                    },
                                    set__dictionary: function (tmp$0) {
                                        this.$_dictionary = tmp$0;
                                    },
                                    get__provided_java_cache: function () {
                                        return this.$_provided_java_cache;
                                    },
                                    set__provided_java_cache: function (tmp$0) {
                                        this.$_provided_java_cache = tmp$0;
                                    },
                                    get__provided: function () {
                                        return this.$_provided;
                                    },
                                    get__required_java_cache: function () {
                                        return this.$_required_java_cache;
                                    },
                                    set__required_java_cache: function (tmp$0) {
                                        this.$_required_java_cache = tmp$0;
                                    },
                                    get__required: function () {
                                        return this.$_required;
                                    },
                                    get__namespace: function () {
                                        return this.$_namespace;
                                    },
                                    set__namespace: function (tmp$0) {
                                        this.$_namespace = tmp$0;
                                    }
                                }),
                                TypedElementInternal: classes.c6,
                                MessagePortTypeImpl: Kotlin.createClass(classes.cz, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_factoryBean = '';
                                        this.$_bean = '';
                                        this.$_synchrone = false;
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_dictionaryType = null;
                                        this.$_superTypes_java_cache = null;
                                        this.$_superTypes = new Kotlin.HashMap(0);
                                        this.$_filters_java_cache = null;
                                        this.$_filters = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__factoryBean: function () {
                                        return this.$_factoryBean;
                                    },
                                    set__factoryBean: function (tmp$0) {
                                        this.$_factoryBean = tmp$0;
                                    },
                                    get__bean: function () {
                                        return this.$_bean;
                                    },
                                    set__bean: function (tmp$0) {
                                        this.$_bean = tmp$0;
                                    },
                                    get__synchrone: function () {
                                        return this.$_synchrone;
                                    },
                                    set__synchrone: function (tmp$0) {
                                        this.$_synchrone = tmp$0;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__dictionaryType: function () {
                                        return this.$_dictionaryType;
                                    },
                                    set__dictionaryType: function (tmp$0) {
                                        this.$_dictionaryType = tmp$0;
                                    },
                                    get__superTypes_java_cache: function () {
                                        return this.$_superTypes_java_cache;
                                    },
                                    set__superTypes_java_cache: function (tmp$0) {
                                        this.$_superTypes_java_cache = tmp$0;
                                    },
                                    get__superTypes: function () {
                                        return this.$_superTypes;
                                    },
                                    get__filters_java_cache: function () {
                                        return this.$_filters_java_cache;
                                    },
                                    set__filters_java_cache: function (tmp$0) {
                                        this.$_filters_java_cache = tmp$0;
                                    },
                                    get__filters: function () {
                                        return this.$_filters;
                                    }
                                }),
                                GroupInternal: classes.c7,
                                TypeDefinitionImpl: Kotlin.createClass(classes.cw, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_factoryBean = '';
                                        this.$_bean = '';
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_dictionaryType = null;
                                        this.$_superTypes_java_cache = null;
                                        this.$_superTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__factoryBean: function () {
                                        return this.$_factoryBean;
                                    },
                                    set__factoryBean: function (tmp$0) {
                                        this.$_factoryBean = tmp$0;
                                    },
                                    get__bean: function () {
                                        return this.$_bean;
                                    },
                                    set__bean: function (tmp$0) {
                                        this.$_bean = tmp$0;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__dictionaryType: function () {
                                        return this.$_dictionaryType;
                                    },
                                    set__dictionaryType: function (tmp$0) {
                                        this.$_dictionaryType = tmp$0;
                                    },
                                    get__superTypes_java_cache: function () {
                                        return this.$_superTypes_java_cache;
                                    },
                                    set__superTypes_java_cache: function (tmp$0) {
                                        this.$_superTypes_java_cache = tmp$0;
                                    },
                                    get__superTypes: function () {
                                        return this.$_superTypes;
                                    }
                                }),
                                ParameterImpl: Kotlin.createClass(classes.c12, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_type = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__type: function () {
                                        return this.$_type;
                                    },
                                    set__type: function (tmp$0) {
                                        this.$_type = tmp$0;
                                    }
                                }),
                                PortInternal: classes.c8,
                                MBindingInternal: classes.c9,
                                OperationInternal: classes.ca,
                                ComponentInstanceInternal: classes.cb,
                                DictionaryAttributeImpl: Kotlin.createClass(classes.ci, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_optional = false;
                                        this.$_state = false;
                                        this.$_datatype = '';
                                        this.$_fragmentDependant = false;
                                        this.$_genericTypes_java_cache = null;
                                        this.$_genericTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__optional: function () {
                                        return this.$_optional;
                                    },
                                    set__optional: function (tmp$0) {
                                        this.$_optional = tmp$0;
                                    },
                                    get__state: function () {
                                        return this.$_state;
                                    },
                                    set__state: function (tmp$0) {
                                        this.$_state = tmp$0;
                                    },
                                    get__datatype: function () {
                                        return this.$_datatype;
                                    },
                                    set__datatype: function (tmp$0) {
                                        this.$_datatype = tmp$0;
                                    },
                                    get__fragmentDependant: function () {
                                        return this.$_fragmentDependant;
                                    },
                                    set__fragmentDependant: function (tmp$0) {
                                        this.$_fragmentDependant = tmp$0;
                                    },
                                    get__genericTypes_java_cache: function () {
                                        return this.$_genericTypes_java_cache;
                                    },
                                    set__genericTypes_java_cache: function (tmp$0) {
                                        this.$_genericTypes_java_cache = tmp$0;
                                    },
                                    get__genericTypes: function () {
                                        return this.$_genericTypes;
                                    }
                                }),
                                DictionaryTypeInternal: classes.cc,
                                InstanceImpl: Kotlin.createClass(classes.c11, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_metaData = '';
                                        this.$_typeDefinition = null;
                                        this.$_dictionary = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__metaData: function () {
                                        return this.$_metaData;
                                    },
                                    set__metaData: function (tmp$0) {
                                        this.$_metaData = tmp$0;
                                    },
                                    get__typeDefinition: function () {
                                        return this.$_typeDefinition;
                                    },
                                    set__typeDefinition: function (tmp$0) {
                                        this.$_typeDefinition = tmp$0;
                                    },
                                    get__dictionary: function () {
                                        return this.$_dictionary;
                                    },
                                    set__dictionary: function (tmp$0) {
                                        this.$_dictionary = tmp$0;
                                    }
                                }),
                                TypedElementImpl: Kotlin.createClass(classes.c6, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_genericTypes_java_cache = null;
                                        this.$_genericTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__genericTypes_java_cache: function () {
                                        return this.$_genericTypes_java_cache;
                                    },
                                    set__genericTypes_java_cache: function (tmp$0) {
                                        this.$_genericTypes_java_cache = tmp$0;
                                    },
                                    get__genericTypes: function () {
                                        return this.$_genericTypes;
                                    }
                                }),
                                NodeTypeImpl: Kotlin.createClass(classes.co, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_factoryBean = '';
                                        this.$_bean = '';
                                        this.$_startMethod = '';
                                        this.$_stopMethod = '';
                                        this.$_updateMethod = '';
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_dictionaryType = null;
                                        this.$_superTypes_java_cache = null;
                                        this.$_superTypes = new Kotlin.HashMap(0);
                                        this.$_managedPrimitiveTypes_java_cache = null;
                                        this.$_managedPrimitiveTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__factoryBean: function () {
                                        return this.$_factoryBean;
                                    },
                                    set__factoryBean: function (tmp$0) {
                                        this.$_factoryBean = tmp$0;
                                    },
                                    get__bean: function () {
                                        return this.$_bean;
                                    },
                                    set__bean: function (tmp$0) {
                                        this.$_bean = tmp$0;
                                    },
                                    get__startMethod: function () {
                                        return this.$_startMethod;
                                    },
                                    set__startMethod: function (tmp$0) {
                                        this.$_startMethod = tmp$0;
                                    },
                                    get__stopMethod: function () {
                                        return this.$_stopMethod;
                                    },
                                    set__stopMethod: function (tmp$0) {
                                        this.$_stopMethod = tmp$0;
                                    },
                                    get__updateMethod: function () {
                                        return this.$_updateMethod;
                                    },
                                    set__updateMethod: function (tmp$0) {
                                        this.$_updateMethod = tmp$0;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__dictionaryType: function () {
                                        return this.$_dictionaryType;
                                    },
                                    set__dictionaryType: function (tmp$0) {
                                        this.$_dictionaryType = tmp$0;
                                    },
                                    get__superTypes_java_cache: function () {
                                        return this.$_superTypes_java_cache;
                                    },
                                    set__superTypes_java_cache: function (tmp$0) {
                                        this.$_superTypes_java_cache = tmp$0;
                                    },
                                    get__superTypes: function () {
                                        return this.$_superTypes;
                                    },
                                    get__managedPrimitiveTypes_java_cache: function () {
                                        return this.$_managedPrimitiveTypes_java_cache;
                                    },
                                    set__managedPrimitiveTypes_java_cache: function (tmp$0) {
                                        this.$_managedPrimitiveTypes_java_cache = tmp$0;
                                    },
                                    get__managedPrimitiveTypes: function () {
                                        return this.$_managedPrimitiveTypes;
                                    }
                                }),
                                DeployUnitImpl: Kotlin.createClass(classes.cs, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_groupName = '';
                                        this.$_unitName = '';
                                        this.$_version = '';
                                        this.$_url = '';
                                        this.$_hashcode = '';
                                        this.$_type = '';
                                        this.$_requiredLibs_java_cache = null;
                                        this.$_requiredLibs = new Kotlin.HashMap(0);
                                        this.$_targetNodeType = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__groupName: function () {
                                        return this.$_groupName;
                                    },
                                    set__groupName: function (tmp$0) {
                                        this.$_groupName = tmp$0;
                                    },
                                    get__unitName: function () {
                                        return this.$_unitName;
                                    },
                                    set__unitName: function (tmp$0) {
                                        this.$_unitName = tmp$0;
                                    },
                                    get__version: function () {
                                        return this.$_version;
                                    },
                                    set__version: function (tmp$0) {
                                        this.$_version = tmp$0;
                                    },
                                    get__url: function () {
                                        return this.$_url;
                                    },
                                    set__url: function (tmp$0) {
                                        this.$_url = tmp$0;
                                    },
                                    get__hashcode: function () {
                                        return this.$_hashcode;
                                    },
                                    set__hashcode: function (tmp$0) {
                                        this.$_hashcode = tmp$0;
                                    },
                                    get__type: function () {
                                        return this.$_type;
                                    },
                                    set__type: function (tmp$0) {
                                        this.$_type = tmp$0;
                                    },
                                    get__requiredLibs_java_cache: function () {
                                        return this.$_requiredLibs_java_cache;
                                    },
                                    set__requiredLibs_java_cache: function (tmp$0) {
                                        this.$_requiredLibs_java_cache = tmp$0;
                                    },
                                    get__requiredLibs: function () {
                                        return this.$_requiredLibs;
                                    },
                                    get__targetNodeType: function () {
                                        return this.$_targetNodeType;
                                    },
                                    set__targetNodeType: function (tmp$0) {
                                        this.$_targetNodeType = tmp$0;
                                    }
                                }),
                                GroupTypeImpl: Kotlin.createClass(classes.c5, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_factoryBean = '';
                                        this.$_bean = '';
                                        this.$_startMethod = '';
                                        this.$_stopMethod = '';
                                        this.$_updateMethod = '';
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_dictionaryType = null;
                                        this.$_superTypes_java_cache = null;
                                        this.$_superTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__factoryBean: function () {
                                        return this.$_factoryBean;
                                    },
                                    set__factoryBean: function (tmp$0) {
                                        this.$_factoryBean = tmp$0;
                                    },
                                    get__bean: function () {
                                        return this.$_bean;
                                    },
                                    set__bean: function (tmp$0) {
                                        this.$_bean = tmp$0;
                                    },
                                    get__startMethod: function () {
                                        return this.$_startMethod;
                                    },
                                    set__startMethod: function (tmp$0) {
                                        this.$_startMethod = tmp$0;
                                    },
                                    get__stopMethod: function () {
                                        return this.$_stopMethod;
                                    },
                                    set__stopMethod: function (tmp$0) {
                                        this.$_stopMethod = tmp$0;
                                    },
                                    get__updateMethod: function () {
                                        return this.$_updateMethod;
                                    },
                                    set__updateMethod: function (tmp$0) {
                                        this.$_updateMethod = tmp$0;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__dictionaryType: function () {
                                        return this.$_dictionaryType;
                                    },
                                    set__dictionaryType: function (tmp$0) {
                                        this.$_dictionaryType = tmp$0;
                                    },
                                    get__superTypes_java_cache: function () {
                                        return this.$_superTypes_java_cache;
                                    },
                                    set__superTypes_java_cache: function (tmp$0) {
                                        this.$_superTypes_java_cache = tmp$0;
                                    },
                                    get__superTypes: function () {
                                        return this.$_superTypes;
                                    }
                                }),
                                WireInternal: classes.cd,
                                NetworkPropertyInternal: classes.ce,
                                IntegrationPatternImpl: Kotlin.createClass(classes.c13, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_extraFonctionalProperties_java_cache = null;
                                        this.$_extraFonctionalProperties = new Kotlin.ArrayList(0);
                                        this.$_portTypes_java_cache = null;
                                        this.$_portTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__extraFonctionalProperties_java_cache: function () {
                                        return this.$_extraFonctionalProperties_java_cache;
                                    },
                                    set__extraFonctionalProperties_java_cache: function (tmp$0) {
                                        this.$_extraFonctionalProperties_java_cache = tmp$0;
                                    },
                                    get__extraFonctionalProperties: function () {
                                        return this.$_extraFonctionalProperties;
                                    },
                                    get__portTypes_java_cache: function () {
                                        return this.$_portTypes_java_cache;
                                    },
                                    set__portTypes_java_cache: function (tmp$0) {
                                        this.$_portTypes_java_cache = tmp$0;
                                    },
                                    get__portTypes: function () {
                                        return this.$_portTypes;
                                    }
                                }),
                                ChannelTypeImpl: Kotlin.createClass(classes.ct, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_factoryBean = '';
                                        this.$_bean = '';
                                        this.$_startMethod = '';
                                        this.$_stopMethod = '';
                                        this.$_updateMethod = '';
                                        this.$_lowerBindings = 0;
                                        this.$_upperBindings = 0;
                                        this.$_lowerFragments = 0;
                                        this.$_upperFragments = 0;
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_dictionaryType = null;
                                        this.$_superTypes_java_cache = null;
                                        this.$_superTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__factoryBean: function () {
                                        return this.$_factoryBean;
                                    },
                                    set__factoryBean: function (tmp$0) {
                                        this.$_factoryBean = tmp$0;
                                    },
                                    get__bean: function () {
                                        return this.$_bean;
                                    },
                                    set__bean: function (tmp$0) {
                                        this.$_bean = tmp$0;
                                    },
                                    get__startMethod: function () {
                                        return this.$_startMethod;
                                    },
                                    set__startMethod: function (tmp$0) {
                                        this.$_startMethod = tmp$0;
                                    },
                                    get__stopMethod: function () {
                                        return this.$_stopMethod;
                                    },
                                    set__stopMethod: function (tmp$0) {
                                        this.$_stopMethod = tmp$0;
                                    },
                                    get__updateMethod: function () {
                                        return this.$_updateMethod;
                                    },
                                    set__updateMethod: function (tmp$0) {
                                        this.$_updateMethod = tmp$0;
                                    },
                                    get__lowerBindings: function () {
                                        return this.$_lowerBindings;
                                    },
                                    set__lowerBindings: function (tmp$0) {
                                        this.$_lowerBindings = tmp$0;
                                    },
                                    get__upperBindings: function () {
                                        return this.$_upperBindings;
                                    },
                                    set__upperBindings: function (tmp$0) {
                                        this.$_upperBindings = tmp$0;
                                    },
                                    get__lowerFragments: function () {
                                        return this.$_lowerFragments;
                                    },
                                    set__lowerFragments: function (tmp$0) {
                                        this.$_lowerFragments = tmp$0;
                                    },
                                    get__upperFragments: function () {
                                        return this.$_upperFragments;
                                    },
                                    set__upperFragments: function (tmp$0) {
                                        this.$_upperFragments = tmp$0;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__dictionaryType: function () {
                                        return this.$_dictionaryType;
                                    },
                                    set__dictionaryType: function (tmp$0) {
                                        this.$_dictionaryType = tmp$0;
                                    },
                                    get__superTypes_java_cache: function () {
                                        return this.$_superTypes_java_cache;
                                    },
                                    set__superTypes_java_cache: function (tmp$0) {
                                        this.$_superTypes_java_cache = tmp$0;
                                    },
                                    get__superTypes: function () {
                                        return this.$_superTypes;
                                    }
                                }),
                                ContainerRootInternal: classes.cf,
                                NodeNetworkInternal: classes.cg,
                                ServicePortTypeImpl: Kotlin.createClass(classes.cr, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_factoryBean = '';
                                        this.$_bean = '';
                                        this.$_synchrone = false;
                                        this.$_interfaceService = '';
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_dictionaryType = null;
                                        this.$_superTypes_java_cache = null;
                                        this.$_superTypes = new Kotlin.HashMap(0);
                                        this.$_operations_java_cache = null;
                                        this.$_operations = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__factoryBean: function () {
                                        return this.$_factoryBean;
                                    },
                                    set__factoryBean: function (tmp$0) {
                                        this.$_factoryBean = tmp$0;
                                    },
                                    get__bean: function () {
                                        return this.$_bean;
                                    },
                                    set__bean: function (tmp$0) {
                                        this.$_bean = tmp$0;
                                    },
                                    get__synchrone: function () {
                                        return this.$_synchrone;
                                    },
                                    set__synchrone: function (tmp$0) {
                                        this.$_synchrone = tmp$0;
                                    },
                                    get__interfaceService: function () {
                                        return this.$_interfaceService;
                                    },
                                    set__interfaceService: function (tmp$0) {
                                        this.$_interfaceService = tmp$0;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__dictionaryType: function () {
                                        return this.$_dictionaryType;
                                    },
                                    set__dictionaryType: function (tmp$0) {
                                        this.$_dictionaryType = tmp$0;
                                    },
                                    get__superTypes_java_cache: function () {
                                        return this.$_superTypes_java_cache;
                                    },
                                    set__superTypes_java_cache: function (tmp$0) {
                                        this.$_superTypes_java_cache = tmp$0;
                                    },
                                    get__superTypes: function () {
                                        return this.$_superTypes;
                                    },
                                    get__operations_java_cache: function () {
                                        return this.$_operations_java_cache;
                                    },
                                    set__operations_java_cache: function (tmp$0) {
                                        this.$_operations_java_cache = tmp$0;
                                    },
                                    get__operations: function () {
                                        return this.$_operations;
                                    }
                                }),
                                RepositoryInternal: classes.ch,
                                NamedElementImpl: Kotlin.createClass(classes.cx, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    }
                                }),
                                GroupImpl: Kotlin.createClass(classes.c7, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_metaData = '';
                                        this.$_typeDefinition = null;
                                        this.$_dictionary = null;
                                        this.$_subNodes_java_cache = null;
                                        this.$_subNodes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__metaData: function () {
                                        return this.$_metaData;
                                    },
                                    set__metaData: function (tmp$0) {
                                        this.$_metaData = tmp$0;
                                    },
                                    get__typeDefinition: function () {
                                        return this.$_typeDefinition;
                                    },
                                    set__typeDefinition: function (tmp$0) {
                                        this.$_typeDefinition = tmp$0;
                                    },
                                    get__dictionary: function () {
                                        return this.$_dictionary;
                                    },
                                    set__dictionary: function (tmp$0) {
                                        this.$_dictionary = tmp$0;
                                    },
                                    get__subNodes_java_cache: function () {
                                        return this.$_subNodes_java_cache;
                                    },
                                    set__subNodes_java_cache: function (tmp$0) {
                                        this.$_subNodes_java_cache = tmp$0;
                                    },
                                    get__subNodes: function () {
                                        return this.$_subNodes;
                                    }
                                }),
                                DictionaryAttributeInternal: classes.ci,
                                NodeNetworkImpl: Kotlin.createClass(classes.cg, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_link_java_cache = null;
                                        this.$_link = new Kotlin.ArrayList(0);
                                        this.$_initBy = null;
                                        this.$_target = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__link_java_cache: function () {
                                        return this.$_link_java_cache;
                                    },
                                    set__link_java_cache: function (tmp$0) {
                                        this.$_link_java_cache = tmp$0;
                                    },
                                    get__link: function () {
                                        return this.$_link;
                                    },
                                    get__initBy: function () {
                                        return this.$_initBy;
                                    },
                                    set__initBy: function (tmp$0) {
                                        this.$_initBy = tmp$0;
                                    },
                                    get__target: function () {
                                        return this.$_target;
                                    },
                                    set__target: function (tmp$0) {
                                        this.$_target = tmp$0;
                                    }
                                }),
                                NetworkPropertyImpl: Kotlin.createClass(classes.ce, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_value = '';
                                        this.$_lastCheck = '';
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__value: function () {
                                        return this.$_value;
                                    },
                                    set__value: function (tmp$0) {
                                        this.$_value = tmp$0;
                                    },
                                    get__lastCheck: function () {
                                        return this.$_lastCheck;
                                    },
                                    set__lastCheck: function (tmp$0) {
                                        this.$_lastCheck = tmp$0;
                                    }
                                }),
                                AdaptationPrimitiveTypeImpl: Kotlin.createClass(classes.cn, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    }
                                }),
                                DictionaryValueInternal: classes.cj,
                                NodeLinkImpl: Kotlin.createClass(classes.c14, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_networkType = '';
                                        this.$_estimatedRate = 0;
                                        this.$_lastCheck = '';
                                        this.$_networkProperties_java_cache = null;
                                        this.$_networkProperties = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__networkType: function () {
                                        return this.$_networkType;
                                    },
                                    set__networkType: function (tmp$0) {
                                        this.$_networkType = tmp$0;
                                    },
                                    get__estimatedRate: function () {
                                        return this.$_estimatedRate;
                                    },
                                    set__estimatedRate: function (tmp$0) {
                                        this.$_estimatedRate = tmp$0;
                                    },
                                    get__lastCheck: function () {
                                        return this.$_lastCheck;
                                    },
                                    set__lastCheck: function (tmp$0) {
                                        this.$_lastCheck = tmp$0;
                                    },
                                    get__networkProperties_java_cache: function () {
                                        return this.$_networkProperties_java_cache;
                                    },
                                    set__networkProperties_java_cache: function (tmp$0) {
                                        this.$_networkProperties_java_cache = tmp$0;
                                    },
                                    get__networkProperties: function () {
                                        return this.$_networkProperties;
                                    }
                                }),
                                ChannelInternal: classes.ck,
                                DictionaryValueImpl: Kotlin.createClass(classes.cj, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_value = '';
                                        this.$_attribute = null;
                                        this.$_targetNode = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__value: function () {
                                        return this.$_value;
                                    },
                                    set__value: function (tmp$0) {
                                        this.$_value = tmp$0;
                                    },
                                    get__attribute: function () {
                                        return this.$_attribute;
                                    },
                                    set__attribute: function (tmp$0) {
                                        this.$_attribute = tmp$0;
                                    },
                                    get__targetNode: function () {
                                        return this.$_targetNode;
                                    },
                                    set__targetNode: function (tmp$0) {
                                        this.$_targetNode = tmp$0;
                                    }
                                }),
                                PortTypeRefInternal: classes.cl,
                                OperationImpl: Kotlin.createClass(classes.ca, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_parameters_java_cache = null;
                                        this.$_parameters = new Kotlin.HashMap(0);
                                        this.$_returnType = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__parameters_java_cache: function () {
                                        return this.$_parameters_java_cache;
                                    },
                                    set__parameters_java_cache: function (tmp$0) {
                                        this.$_parameters_java_cache = tmp$0;
                                    },
                                    get__parameters: function () {
                                        return this.$_parameters;
                                    },
                                    get__returnType: function () {
                                        return this.$_returnType;
                                    },
                                    set__returnType: function (tmp$0) {
                                        this.$_returnType = tmp$0;
                                    }
                                }),
                                PortTypeInternal: classes.cm,
                                DefaultKevoreeFactory: Kotlin.createClass(classes.c1x, {
                                    initialize: function () {
                                    },
                                    getVersion: function () {
                                        return '1.0.0';
                                    },
                                    createComponentInstance: function () {
                                        return new _.org.kevoree.impl.ComponentInstanceImpl();
                                    },
                                    createComponentType: function () {
                                        return new _.org.kevoree.impl.ComponentTypeImpl();
                                    },
                                    createContainerNode: function () {
                                        return new _.org.kevoree.impl.ContainerNodeImpl();
                                    },
                                    createContainerRoot: function () {
                                        return new _.org.kevoree.impl.ContainerRootImpl();
                                    },
                                    createPortType: function () {
                                        return new _.org.kevoree.impl.PortTypeImpl();
                                    },
                                    createPort: function () {
                                        return new _.org.kevoree.impl.PortImpl();
                                    },
                                    createNamespace: function () {
                                        return new _.org.kevoree.impl.NamespaceImpl();
                                    },
                                    createDictionary: function () {
                                        return new _.org.kevoree.impl.DictionaryImpl();
                                    },
                                    createDictionaryType: function () {
                                        return new _.org.kevoree.impl.DictionaryTypeImpl();
                                    },
                                    createDictionaryAttribute: function () {
                                        return new _.org.kevoree.impl.DictionaryAttributeImpl();
                                    },
                                    createDictionaryValue: function () {
                                        return new _.org.kevoree.impl.DictionaryValueImpl();
                                    },
                                    createCompositeType: function () {
                                        return new _.org.kevoree.impl.CompositeTypeImpl();
                                    },
                                    createPortTypeRef: function () {
                                        return new _.org.kevoree.impl.PortTypeRefImpl();
                                    },
                                    createWire: function () {
                                        return new _.org.kevoree.impl.WireImpl();
                                    },
                                    createServicePortType: function () {
                                        return new _.org.kevoree.impl.ServicePortTypeImpl();
                                    },
                                    createOperation: function () {
                                        return new _.org.kevoree.impl.OperationImpl();
                                    },
                                    createParameter: function () {
                                        return new _.org.kevoree.impl.ParameterImpl();
                                    },
                                    createTypedElement: function () {
                                        return new _.org.kevoree.impl.TypedElementImpl();
                                    },
                                    createMessagePortType: function () {
                                        return new _.org.kevoree.impl.MessagePortTypeImpl();
                                    },
                                    createRepository: function () {
                                        return new _.org.kevoree.impl.RepositoryImpl();
                                    },
                                    createDeployUnit: function () {
                                        return new _.org.kevoree.impl.DeployUnitImpl();
                                    },
                                    createTypeLibrary: function () {
                                        return new _.org.kevoree.impl.TypeLibraryImpl();
                                    },
                                    createNamedElement: function () {
                                        return new _.org.kevoree.impl.NamedElementImpl();
                                    },
                                    createIntegrationPattern: function () {
                                        return new _.org.kevoree.impl.IntegrationPatternImpl();
                                    },
                                    createExtraFonctionalProperty: function () {
                                        return new _.org.kevoree.impl.ExtraFonctionalPropertyImpl();
                                    },
                                    createPortTypeMapping: function () {
                                        return new _.org.kevoree.impl.PortTypeMappingImpl();
                                    },
                                    createChannel: function () {
                                        return new _.org.kevoree.impl.ChannelImpl();
                                    },
                                    createMBinding: function () {
                                        return new _.org.kevoree.impl.MBindingImpl();
                                    },
                                    createNodeNetwork: function () {
                                        return new _.org.kevoree.impl.NodeNetworkImpl();
                                    },
                                    createNodeLink: function () {
                                        return new _.org.kevoree.impl.NodeLinkImpl();
                                    },
                                    createNetworkProperty: function () {
                                        return new _.org.kevoree.impl.NetworkPropertyImpl();
                                    },
                                    createChannelType: function () {
                                        return new _.org.kevoree.impl.ChannelTypeImpl();
                                    },
                                    createTypeDefinition: function () {
                                        return new _.org.kevoree.impl.TypeDefinitionImpl();
                                    },
                                    createInstance: function () {
                                        return new _.org.kevoree.impl.InstanceImpl();
                                    },
                                    createLifeCycleTypeDefinition: function () {
                                        return new _.org.kevoree.impl.LifeCycleTypeDefinitionImpl();
                                    },
                                    createGroup: function () {
                                        return new _.org.kevoree.impl.GroupImpl();
                                    },
                                    createGroupType: function () {
                                        return new _.org.kevoree.impl.GroupTypeImpl();
                                    },
                                    createNodeType: function () {
                                        return new _.org.kevoree.impl.NodeTypeImpl();
                                    },
                                    createAdaptationPrimitiveType: function () {
                                        return new _.org.kevoree.impl.AdaptationPrimitiveTypeImpl();
                                    }
                                }),
                                ContainerRootImpl: Kotlin.createClass(classes.cf, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_nodes_java_cache = null;
                                        this.$_nodes = new Kotlin.HashMap(0);
                                        this.$_typeDefinitions_java_cache = null;
                                        this.$_typeDefinitions = new Kotlin.HashMap(0);
                                        this.$_repositories_java_cache = null;
                                        this.$_repositories = new Kotlin.HashMap(0);
                                        this.$_dataTypes_java_cache = null;
                                        this.$_dataTypes = new Kotlin.HashMap(0);
                                        this.$_libraries_java_cache = null;
                                        this.$_libraries = new Kotlin.HashMap(0);
                                        this.$_hubs_java_cache = null;
                                        this.$_hubs = new Kotlin.HashMap(0);
                                        this.$_mBindings_java_cache = null;
                                        this.$_mBindings = new Kotlin.ArrayList(0);
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_nodeNetworks_java_cache = null;
                                        this.$_nodeNetworks = new Kotlin.ArrayList(0);
                                        this.$_groups_java_cache = null;
                                        this.$_groups = new Kotlin.HashMap(0);
                                        this.$_groupTypes_java_cache = null;
                                        this.$_groupTypes = new Kotlin.HashMap(0);
                                        this.$_adaptationPrimitiveTypes_java_cache = null;
                                        this.$_adaptationPrimitiveTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__nodes_java_cache: function () {
                                        return this.$_nodes_java_cache;
                                    },
                                    set__nodes_java_cache: function (tmp$0) {
                                        this.$_nodes_java_cache = tmp$0;
                                    },
                                    get__nodes: function () {
                                        return this.$_nodes;
                                    },
                                    get__typeDefinitions_java_cache: function () {
                                        return this.$_typeDefinitions_java_cache;
                                    },
                                    set__typeDefinitions_java_cache: function (tmp$0) {
                                        this.$_typeDefinitions_java_cache = tmp$0;
                                    },
                                    get__typeDefinitions: function () {
                                        return this.$_typeDefinitions;
                                    },
                                    get__repositories_java_cache: function () {
                                        return this.$_repositories_java_cache;
                                    },
                                    set__repositories_java_cache: function (tmp$0) {
                                        this.$_repositories_java_cache = tmp$0;
                                    },
                                    get__repositories: function () {
                                        return this.$_repositories;
                                    },
                                    get__dataTypes_java_cache: function () {
                                        return this.$_dataTypes_java_cache;
                                    },
                                    set__dataTypes_java_cache: function (tmp$0) {
                                        this.$_dataTypes_java_cache = tmp$0;
                                    },
                                    get__dataTypes: function () {
                                        return this.$_dataTypes;
                                    },
                                    get__libraries_java_cache: function () {
                                        return this.$_libraries_java_cache;
                                    },
                                    set__libraries_java_cache: function (tmp$0) {
                                        this.$_libraries_java_cache = tmp$0;
                                    },
                                    get__libraries: function () {
                                        return this.$_libraries;
                                    },
                                    get__hubs_java_cache: function () {
                                        return this.$_hubs_java_cache;
                                    },
                                    set__hubs_java_cache: function (tmp$0) {
                                        this.$_hubs_java_cache = tmp$0;
                                    },
                                    get__hubs: function () {
                                        return this.$_hubs;
                                    },
                                    get__mBindings_java_cache: function () {
                                        return this.$_mBindings_java_cache;
                                    },
                                    set__mBindings_java_cache: function (tmp$0) {
                                        this.$_mBindings_java_cache = tmp$0;
                                    },
                                    get__mBindings: function () {
                                        return this.$_mBindings;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__nodeNetworks_java_cache: function () {
                                        return this.$_nodeNetworks_java_cache;
                                    },
                                    set__nodeNetworks_java_cache: function (tmp$0) {
                                        this.$_nodeNetworks_java_cache = tmp$0;
                                    },
                                    get__nodeNetworks: function () {
                                        return this.$_nodeNetworks;
                                    },
                                    get__groups_java_cache: function () {
                                        return this.$_groups_java_cache;
                                    },
                                    set__groups_java_cache: function (tmp$0) {
                                        this.$_groups_java_cache = tmp$0;
                                    },
                                    get__groups: function () {
                                        return this.$_groups;
                                    },
                                    get__groupTypes_java_cache: function () {
                                        return this.$_groupTypes_java_cache;
                                    },
                                    set__groupTypes_java_cache: function (tmp$0) {
                                        this.$_groupTypes_java_cache = tmp$0;
                                    },
                                    get__groupTypes: function () {
                                        return this.$_groupTypes;
                                    },
                                    get__adaptationPrimitiveTypes_java_cache: function () {
                                        return this.$_adaptationPrimitiveTypes_java_cache;
                                    },
                                    set__adaptationPrimitiveTypes_java_cache: function (tmp$0) {
                                        this.$_adaptationPrimitiveTypes_java_cache = tmp$0;
                                    },
                                    get__adaptationPrimitiveTypes: function () {
                                        return this.$_adaptationPrimitiveTypes;
                                    }
                                }),
                                AdaptationPrimitiveTypeInternal: classes.cn,
                                NodeTypeInternal: classes.co,
                                PortImpl: Kotlin.createClass(classes.c8, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_portTypeRef = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__portTypeRef: function () {
                                        return this.$_portTypeRef;
                                    },
                                    set__portTypeRef: function (tmp$0) {
                                        this.$_portTypeRef = tmp$0;
                                    }
                                }),
                                RepositoryImpl: Kotlin.createClass(classes.ch, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_url = '';
                                        this.$_units_java_cache = null;
                                        this.$_units = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__url: function () {
                                        return this.$_url;
                                    },
                                    set__url: function (tmp$0) {
                                        this.$_url = tmp$0;
                                    },
                                    get__units_java_cache: function () {
                                        return this.$_units_java_cache;
                                    },
                                    set__units_java_cache: function (tmp$0) {
                                        this.$_units_java_cache = tmp$0;
                                    },
                                    get__units: function () {
                                        return this.$_units;
                                    }
                                }),
                                PortTypeMappingInternal: classes.cp,
                                ContainerNodeInternal: classes.cq,
                                DictionaryImpl: Kotlin.createClass(classes.cv, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_values_java_cache = null;
                                        this.$_values = new Kotlin.ArrayList(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__values_java_cache: function () {
                                        return this.$_values_java_cache;
                                    },
                                    set__values_java_cache: function (tmp$0) {
                                        this.$_values_java_cache = tmp$0;
                                    },
                                    get__values: function () {
                                        return this.$_values;
                                    }
                                }),
                                ServicePortTypeInternal: classes.cr,
                                DeployUnitInternal: classes.cs,
                                ChannelTypeInternal: classes.ct,
                                TypeLibraryImpl: Kotlin.createClass(classes.c15, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_subTypes_java_cache = null;
                                        this.$_subTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__subTypes_java_cache: function () {
                                        return this.$_subTypes_java_cache;
                                    },
                                    set__subTypes_java_cache: function (tmp$0) {
                                        this.$_subTypes_java_cache = tmp$0;
                                    },
                                    get__subTypes: function () {
                                        return this.$_subTypes;
                                    }
                                }),
                                PortTypeMappingImpl: Kotlin.createClass(classes.cp, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_beanMethodName = '';
                                        this.$_serviceMethodName = '';
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__beanMethodName: function () {
                                        return this.$_beanMethodName;
                                    },
                                    set__beanMethodName: function (tmp$0) {
                                        this.$_beanMethodName = tmp$0;
                                    },
                                    get__serviceMethodName: function () {
                                        return this.$_serviceMethodName;
                                    },
                                    set__serviceMethodName: function (tmp$0) {
                                        this.$_serviceMethodName = tmp$0;
                                    }
                                }),
                                WireImpl: Kotlin.createClass(classes.cd, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_ports_java_cache = null;
                                        this.$_ports = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__ports_java_cache: function () {
                                        return this.$_ports_java_cache;
                                    },
                                    set__ports_java_cache: function (tmp$0) {
                                        this.$_ports_java_cache = tmp$0;
                                    },
                                    get__ports: function () {
                                        return this.$_ports;
                                    }
                                }),
                                ExtraFonctionalPropertyInternal: classes.cu,
                                DictionaryInternal: classes.cv,
                                TypeDefinitionInternal: classes.cw,
                                PortTypeImpl: Kotlin.createClass(classes.cm, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_factoryBean = '';
                                        this.$_bean = '';
                                        this.$_synchrone = false;
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_dictionaryType = null;
                                        this.$_superTypes_java_cache = null;
                                        this.$_superTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__factoryBean: function () {
                                        return this.$_factoryBean;
                                    },
                                    set__factoryBean: function (tmp$0) {
                                        this.$_factoryBean = tmp$0;
                                    },
                                    get__bean: function () {
                                        return this.$_bean;
                                    },
                                    set__bean: function (tmp$0) {
                                        this.$_bean = tmp$0;
                                    },
                                    get__synchrone: function () {
                                        return this.$_synchrone;
                                    },
                                    set__synchrone: function (tmp$0) {
                                        this.$_synchrone = tmp$0;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__dictionaryType: function () {
                                        return this.$_dictionaryType;
                                    },
                                    set__dictionaryType: function (tmp$0) {
                                        this.$_dictionaryType = tmp$0;
                                    },
                                    get__superTypes_java_cache: function () {
                                        return this.$_superTypes_java_cache;
                                    },
                                    set__superTypes_java_cache: function (tmp$0) {
                                        this.$_superTypes_java_cache = tmp$0;
                                    },
                                    get__superTypes: function () {
                                        return this.$_superTypes;
                                    }
                                }),
                                MBindingImpl: Kotlin.createClass(classes.c9, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_port = null;
                                        this.$_hub = null;
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__port: function () {
                                        return this.$_port;
                                    },
                                    set__port: function (tmp$0) {
                                        this.$_port = tmp$0;
                                    },
                                    get__hub: function () {
                                        return this.$_hub;
                                    },
                                    set__hub: function (tmp$0) {
                                        this.$_hub = tmp$0;
                                    }
                                }),
                                NamedElementInternal: classes.cx,
                                ComponentTypeImpl: Kotlin.createClass(classes.c4, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_factoryBean = '';
                                        this.$_bean = '';
                                        this.$_startMethod = '';
                                        this.$_stopMethod = '';
                                        this.$_updateMethod = '';
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_dictionaryType = null;
                                        this.$_superTypes_java_cache = null;
                                        this.$_superTypes = new Kotlin.HashMap(0);
                                        this.$_required_java_cache = null;
                                        this.$_required = new Kotlin.HashMap(0);
                                        this.$_integrationPatterns_java_cache = null;
                                        this.$_integrationPatterns = new Kotlin.HashMap(0);
                                        this.$_extraFonctionalProperties = null;
                                        this.$_provided_java_cache = null;
                                        this.$_provided = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__factoryBean: function () {
                                        return this.$_factoryBean;
                                    },
                                    set__factoryBean: function (tmp$0) {
                                        this.$_factoryBean = tmp$0;
                                    },
                                    get__bean: function () {
                                        return this.$_bean;
                                    },
                                    set__bean: function (tmp$0) {
                                        this.$_bean = tmp$0;
                                    },
                                    get__startMethod: function () {
                                        return this.$_startMethod;
                                    },
                                    set__startMethod: function (tmp$0) {
                                        this.$_startMethod = tmp$0;
                                    },
                                    get__stopMethod: function () {
                                        return this.$_stopMethod;
                                    },
                                    set__stopMethod: function (tmp$0) {
                                        this.$_stopMethod = tmp$0;
                                    },
                                    get__updateMethod: function () {
                                        return this.$_updateMethod;
                                    },
                                    set__updateMethod: function (tmp$0) {
                                        this.$_updateMethod = tmp$0;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__dictionaryType: function () {
                                        return this.$_dictionaryType;
                                    },
                                    set__dictionaryType: function (tmp$0) {
                                        this.$_dictionaryType = tmp$0;
                                    },
                                    get__superTypes_java_cache: function () {
                                        return this.$_superTypes_java_cache;
                                    },
                                    set__superTypes_java_cache: function (tmp$0) {
                                        this.$_superTypes_java_cache = tmp$0;
                                    },
                                    get__superTypes: function () {
                                        return this.$_superTypes;
                                    },
                                    get__required_java_cache: function () {
                                        return this.$_required_java_cache;
                                    },
                                    set__required_java_cache: function (tmp$0) {
                                        this.$_required_java_cache = tmp$0;
                                    },
                                    get__required: function () {
                                        return this.$_required;
                                    },
                                    get__integrationPatterns_java_cache: function () {
                                        return this.$_integrationPatterns_java_cache;
                                    },
                                    set__integrationPatterns_java_cache: function (tmp$0) {
                                        this.$_integrationPatterns_java_cache = tmp$0;
                                    },
                                    get__integrationPatterns: function () {
                                        return this.$_integrationPatterns;
                                    },
                                    get__extraFonctionalProperties: function () {
                                        return this.$_extraFonctionalProperties;
                                    },
                                    set__extraFonctionalProperties: function (tmp$0) {
                                        this.$_extraFonctionalProperties = tmp$0;
                                    },
                                    get__provided_java_cache: function () {
                                        return this.$_provided_java_cache;
                                    },
                                    set__provided_java_cache: function (tmp$0) {
                                        this.$_provided_java_cache = tmp$0;
                                    },
                                    get__provided: function () {
                                        return this.$_provided;
                                    }
                                }),
                                LifeCycleTypeDefinitionImpl: Kotlin.createClass(classes.c10, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_factoryBean = '';
                                        this.$_bean = '';
                                        this.$_startMethod = '';
                                        this.$_stopMethod = '';
                                        this.$_updateMethod = '';
                                        this.$_deployUnits_java_cache = null;
                                        this.$_deployUnits = new Kotlin.HashMap(0);
                                        this.$_dictionaryType = null;
                                        this.$_superTypes_java_cache = null;
                                        this.$_superTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__factoryBean: function () {
                                        return this.$_factoryBean;
                                    },
                                    set__factoryBean: function (tmp$0) {
                                        this.$_factoryBean = tmp$0;
                                    },
                                    get__bean: function () {
                                        return this.$_bean;
                                    },
                                    set__bean: function (tmp$0) {
                                        this.$_bean = tmp$0;
                                    },
                                    get__startMethod: function () {
                                        return this.$_startMethod;
                                    },
                                    set__startMethod: function (tmp$0) {
                                        this.$_startMethod = tmp$0;
                                    },
                                    get__stopMethod: function () {
                                        return this.$_stopMethod;
                                    },
                                    set__stopMethod: function (tmp$0) {
                                        this.$_stopMethod = tmp$0;
                                    },
                                    get__updateMethod: function () {
                                        return this.$_updateMethod;
                                    },
                                    set__updateMethod: function (tmp$0) {
                                        this.$_updateMethod = tmp$0;
                                    },
                                    get__deployUnits_java_cache: function () {
                                        return this.$_deployUnits_java_cache;
                                    },
                                    set__deployUnits_java_cache: function (tmp$0) {
                                        this.$_deployUnits_java_cache = tmp$0;
                                    },
                                    get__deployUnits: function () {
                                        return this.$_deployUnits;
                                    },
                                    get__dictionaryType: function () {
                                        return this.$_dictionaryType;
                                    },
                                    set__dictionaryType: function (tmp$0) {
                                        this.$_dictionaryType = tmp$0;
                                    },
                                    get__superTypes_java_cache: function () {
                                        return this.$_superTypes_java_cache;
                                    },
                                    set__superTypes_java_cache: function (tmp$0) {
                                        this.$_superTypes_java_cache = tmp$0;
                                    },
                                    get__superTypes: function () {
                                        return this.$_superTypes;
                                    }
                                }),
                                CompositeTypeInternal: classes.cy,
                                MessagePortTypeInternal: classes.cz,
                                LifeCycleTypeDefinitionInternal: classes.c10,
                                InstanceInternal: classes.c11,
                                ParameterInternal: classes.c12,
                                IntegrationPatternInternal: classes.c13,
                                ExtraFonctionalPropertyImpl: Kotlin.createClass(classes.cu, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_portTypes_java_cache = null;
                                        this.$_portTypes = new Kotlin.HashMap(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__portTypes_java_cache: function () {
                                        return this.$_portTypes_java_cache;
                                    },
                                    set__portTypes_java_cache: function (tmp$0) {
                                        this.$_portTypes_java_cache = tmp$0;
                                    },
                                    get__portTypes: function () {
                                        return this.$_portTypes;
                                    }
                                }),
                                PortTypeRefImpl: Kotlin.createClass(classes.cl, {
                                    initialize: function () {
                                        this.$internal_eContainer = null;
                                        this.$internal_containmentRefName = null;
                                        this.$internal_unsetCmd = null;
                                        this.$internal_readOnlyElem = false;
                                        this.$internal_recursive_readOnlyElem = false;
                                        this.$_name = '';
                                        this.$_optional = false;
                                        this.$_noDependency = false;
                                        this.$_ref = null;
                                        this.$_mappings_java_cache = null;
                                        this.$_mappings = new Kotlin.ArrayList(0);
                                    },
                                    get_internal_eContainer: function () {
                                        return this.$internal_eContainer;
                                    },
                                    set_internal_eContainer: function (tmp$0) {
                                        this.$internal_eContainer = tmp$0;
                                    },
                                    get_internal_containmentRefName: function () {
                                        return this.$internal_containmentRefName;
                                    },
                                    set_internal_containmentRefName: function (tmp$0) {
                                        this.$internal_containmentRefName = tmp$0;
                                    },
                                    get_internal_unsetCmd: function () {
                                        return this.$internal_unsetCmd;
                                    },
                                    set_internal_unsetCmd: function (tmp$0) {
                                        this.$internal_unsetCmd = tmp$0;
                                    },
                                    get_internal_readOnlyElem: function () {
                                        return this.$internal_readOnlyElem;
                                    },
                                    set_internal_readOnlyElem: function (tmp$0) {
                                        this.$internal_readOnlyElem = tmp$0;
                                    },
                                    get_internal_recursive_readOnlyElem: function () {
                                        return this.$internal_recursive_readOnlyElem;
                                    },
                                    set_internal_recursive_readOnlyElem: function (tmp$0) {
                                        this.$internal_recursive_readOnlyElem = tmp$0;
                                    },
                                    get__name: function () {
                                        return this.$_name;
                                    },
                                    set__name: function (tmp$0) {
                                        this.$_name = tmp$0;
                                    },
                                    get__optional: function () {
                                        return this.$_optional;
                                    },
                                    set__optional: function (tmp$0) {
                                        this.$_optional = tmp$0;
                                    },
                                    get__noDependency: function () {
                                        return this.$_noDependency;
                                    },
                                    set__noDependency: function (tmp$0) {
                                        this.$_noDependency = tmp$0;
                                    },
                                    get__ref: function () {
                                        return this.$_ref;
                                    },
                                    set__ref: function (tmp$0) {
                                        this.$_ref = tmp$0;
                                    },
                                    get__mappings_java_cache: function () {
                                        return this.$_mappings_java_cache;
                                    },
                                    set__mappings_java_cache: function (tmp$0) {
                                        this.$_mappings_java_cache = tmp$0;
                                    },
                                    get__mappings: function () {
                                        return this.$_mappings;
                                    }
                                }),
                                NodeLinkInternal: classes.c14,
                                TypeLibraryInternal: classes.c15
                            }),
                            container: Kotlin.definePackage({
                                KMFContainerImpl: classes.c1h,
                                KMFContainer: classes.c1i
                            }),
                            serializer: Kotlin.definePackage({
                                ModelSerializer: classes.c1o,
                                JSONModelSerializer: Kotlin.createClass(classes.c1o, {
                                    initialize: function () {
                                    },
                                    serialize: function (oMS, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = oMS; tmp$1 < 2; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ContainerRoot) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ContainerRootImpl)) {
                                                    {
                                                        var context = this.getContainerRootJsonAddr(oMS, '/');
                                                        var wt = new _.java.io.PrintStream(ostream);
                                                        this.ContainerRoottoJson(oMS, context, wt);
                                                        wt.flush();
                                                        tmp$2 = wt.close();
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1) {
                                            }
                                        }
                                        tmp$2;
                                    },
                                    escapeJson: function (ostream, chain) {
                                        var i = 0;
                                        while (i < _.js.get_size(chain)) {
                                            var c = chain.charAt(i);
                                            if (c === '"') {
                                                ostream.print('&quot;');
                                            }
                                            else if (c === "'") {
                                                ostream.print('&apos;');
                                            }
                                            else {
                                                ostream.print_0(c);
                                            }
                                            i = i + 1;
                                        }
                                    },
                                    getComponentInstanceJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        var subdictionary = selfObject.getDictionary();
                                        if (subdictionary !== null && subdictionary !== undefined) {
                                            var subPath_dictionary = subdictionary.path();
                                            if (subPath_dictionary !== null && subPath_dictionary !== undefined) {
                                                subResult.put(subdictionary, subPath_dictionary);
                                            }
                                            else {
                                                subResult.put(subdictionary, previousAddr + '/@dictionary');
                                            }
                                            subResult.putAll(this.getDictionaryJsonAddr(subdictionary, previousAddr + '/@dictionary'));
                                        }
                                        {
                                            var tmp$0 = selfObject.getProvided().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_provided = sub.path();
                                                if (subPath_provided !== null && subPath_provided !== undefined) {
                                                    subResult.put(sub, subPath_provided);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@provided.' + i);
                                                }
                                                subResult.putAll(this.getPortJsonAddr(sub, previousAddr + '/@provided.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$1 = selfObject.getRequired().iterator();
                                            while (tmp$1.hasNext()) {
                                                var sub_0 = tmp$1.next();
                                                var subPath_required = sub_0.path();
                                                if (subPath_required !== null && subPath_required !== undefined) {
                                                    subResult.put(sub_0, subPath_required);
                                                }
                                                else {
                                                    subResult.put(sub_0, previousAddr + '/@required.' + i);
                                                }
                                                subResult.putAll(this.getPortJsonAddr(sub_0, previousAddr + '/@required.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    ComponentInstancetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:ComponentInstance" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getMetaData().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "metaData":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getMetaData());
                                                    ostream.print_0('"');
                                                }
                                                var subsubtypeDefinition = selfObject.getTypeDefinition();
                                                if (subsubtypeDefinition !== null && subsubtypeDefinition !== undefined) {
                                                    var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                                                    if (subsubsubtypeDefinition !== null && subsubsubtypeDefinition !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF ComponentInstance Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                                                    }
                                                }
                                                var subsubnamespace = selfObject.getNamespace();
                                                if (subsubnamespace !== null && subsubnamespace !== undefined) {
                                                    var subsubsubnamespace = addrs.get(subsubnamespace);
                                                    if (subsubsubnamespace !== null && subsubsubnamespace !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "namespace":"' + subsubsubnamespace + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF ComponentInstance Serialization error : No address found for reference namespace(id:' + subsubnamespace + ' container:' + subsubnamespace.eContainer() + ')');
                                                    }
                                                }
                                                var subdictionary = selfObject.getDictionary();
                                                if (subdictionary !== null && subdictionary !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionary":');
                                                    this.DictionarytoJson(subdictionary, addrs, ostream);
                                                }
                                                if (selfObject.getProvided().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"provided": [');
                                                    var iloop_first_provided = true;
                                                    {
                                                        var tmp$3 = selfObject.getProvided().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var so = tmp$3.next();
                                                            if (!iloop_first_provided) {
                                                                ostream.println(',');
                                                            }
                                                            this.PorttoJson(so, addrs, ostream);
                                                            iloop_first_provided = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getRequired().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"required": [');
                                                    var iloop_first_required = true;
                                                    {
                                                        var tmp$4 = selfObject.getRequired().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var so_0 = tmp$4.next();
                                                            if (!iloop_first_required) {
                                                                ostream.println(',');
                                                            }
                                                            this.PorttoJson(so_0, addrs, ostream);
                                                            iloop_first_required = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getComponentTypeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        var subdictionaryType = selfObject.getDictionaryType();
                                        if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                            var subPath_dictionaryType = subdictionaryType.path();
                                            if (subPath_dictionaryType !== null && subPath_dictionaryType !== undefined) {
                                                subResult.put(subdictionaryType, subPath_dictionaryType);
                                            }
                                            else {
                                                subResult.put(subdictionaryType, previousAddr + '/@dictionaryType');
                                            }
                                            subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType, previousAddr + '/@dictionaryType'));
                                        }
                                        {
                                            var tmp$0 = selfObject.getRequired().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_required = sub.path();
                                                if (subPath_required !== null && subPath_required !== undefined) {
                                                    subResult.put(sub, subPath_required);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@required.' + i);
                                                }
                                                subResult.putAll(this.getPortTypeRefJsonAddr(sub, previousAddr + '/@required.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$1 = selfObject.getIntegrationPatterns().iterator();
                                            while (tmp$1.hasNext()) {
                                                var sub_0 = tmp$1.next();
                                                var subPath_integrationPatterns = sub_0.path();
                                                if (subPath_integrationPatterns !== null && subPath_integrationPatterns !== undefined) {
                                                    subResult.put(sub_0, subPath_integrationPatterns);
                                                }
                                                else {
                                                    subResult.put(sub_0, previousAddr + '/@integrationPatterns.' + i);
                                                }
                                                subResult.putAll(this.getIntegrationPatternJsonAddr(sub_0, previousAddr + '/@integrationPatterns.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        var subextraFonctionalProperties = selfObject.getExtraFonctionalProperties();
                                        if (subextraFonctionalProperties !== null && subextraFonctionalProperties !== undefined) {
                                            var subPath_extraFonctionalProperties = subextraFonctionalProperties.path();
                                            if (subPath_extraFonctionalProperties !== null && subPath_extraFonctionalProperties !== undefined) {
                                                subResult.put(subextraFonctionalProperties, subPath_extraFonctionalProperties);
                                            }
                                            else {
                                                subResult.put(subextraFonctionalProperties, previousAddr + '/@extraFonctionalProperties');
                                            }
                                            subResult.putAll(this.getExtraFonctionalPropertyJsonAddr(subextraFonctionalProperties, previousAddr + '/@extraFonctionalProperties'));
                                        }
                                        i = 0;
                                        {
                                            var tmp$2 = selfObject.getProvided().iterator();
                                            while (tmp$2.hasNext()) {
                                                var sub_1 = tmp$2.next();
                                                var subPath_provided = sub_1.path();
                                                if (subPath_provided !== null && subPath_provided !== undefined) {
                                                    subResult.put(sub_1, subPath_provided);
                                                }
                                                else {
                                                    subResult.put(sub_1, previousAddr + '/@provided.' + i);
                                                }
                                                subResult.putAll(this.getPortTypeRefJsonAddr(sub_1, previousAddr + '/@provided.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        var tmp$3, tmp$4, tmp$5;
                                        for (tmp$4 = 0, tmp$3 = selfObject; tmp$4 < 2; ++tmp$4) {
                                            if (tmp$4 === 0)
                                                if (Kotlin.isType(tmp$3, _.org.kevoree.CompositeType) || Kotlin.isType(tmp$3, _.org.kevoree.impl.CompositeTypeImpl)) {
                                                    {
                                                        tmp$5 = subResult.putAll(this.getCompositeTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$4 === 1) {
                                            }
                                        }
                                        tmp$5;
                                        return subResult;
                                    },
                                    ComponentTypetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 2; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.CompositeType)) {
                                                    {
                                                        tmp$2 = this.CompositeTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:ComponentType" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "factoryBean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getFactoryBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "bean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "startMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStartMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "stopMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStopMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "updateMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getUpdateMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "deployUnits": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference ComponentType/deployUnits ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getSuperTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "superTypes": [');
                                                    var firstItLoop_0 = true;
                                                    {
                                                        var tmp$4 = selfObject.getSuperTypes().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var sub_0 = tmp$4.next();
                                                            if (!firstItLoop_0) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_0 = addrs.get(sub_0);
                                                            if (subsub_0 !== null && subsub_0 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_0);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference ComponentType/superTypes ');
                                                            }
                                                            firstItLoop_0 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionaryType = selfObject.getDictionaryType();
                                                if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionaryType":');
                                                    this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                                                }
                                                if (selfObject.getRequired().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"required": [');
                                                    var iloop_first_required = true;
                                                    {
                                                        var tmp$5 = selfObject.getRequired().iterator();
                                                        while (tmp$5.hasNext()) {
                                                            var so = tmp$5.next();
                                                            if (!iloop_first_required) {
                                                                ostream.println(',');
                                                            }
                                                            this.PortTypeReftoJson(so, addrs, ostream);
                                                            iloop_first_required = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getIntegrationPatterns().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"integrationPatterns": [');
                                                    var iloop_first_integrationPatterns = true;
                                                    {
                                                        var tmp$6 = selfObject.getIntegrationPatterns().iterator();
                                                        while (tmp$6.hasNext()) {
                                                            var so_0 = tmp$6.next();
                                                            if (!iloop_first_integrationPatterns) {
                                                                ostream.println(',');
                                                            }
                                                            this.IntegrationPatterntoJson(so_0, addrs, ostream);
                                                            iloop_first_integrationPatterns = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                var subextraFonctionalProperties = selfObject.getExtraFonctionalProperties();
                                                if (subextraFonctionalProperties !== null && subextraFonctionalProperties !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"extraFonctionalProperties":');
                                                    this.ExtraFonctionalPropertytoJson(subextraFonctionalProperties, addrs, ostream);
                                                }
                                                if (selfObject.getProvided().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"provided": [');
                                                    var iloop_first_provided = true;
                                                    {
                                                        var tmp$7 = selfObject.getProvided().iterator();
                                                        while (tmp$7.hasNext()) {
                                                            var so_1 = tmp$7.next();
                                                            if (!iloop_first_provided) {
                                                                ostream.println(',');
                                                            }
                                                            this.PortTypeReftoJson(so_1, addrs, ostream);
                                                            iloop_first_provided = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getContainerNodeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        var subdictionary = selfObject.getDictionary();
                                        if (subdictionary !== null && subdictionary !== undefined) {
                                            var subPath_dictionary = subdictionary.path();
                                            if (subPath_dictionary !== null && subPath_dictionary !== undefined) {
                                                subResult.put(subdictionary, subPath_dictionary);
                                            }
                                            else {
                                                subResult.put(subdictionary, previousAddr + '/@dictionary');
                                            }
                                            subResult.putAll(this.getDictionaryJsonAddr(subdictionary, previousAddr + '/@dictionary'));
                                        }
                                        {
                                            var tmp$0 = selfObject.getComponents().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_components = sub.path();
                                                if (subPath_components !== null && subPath_components !== undefined) {
                                                    subResult.put(sub, subPath_components);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@components.' + i);
                                                }
                                                subResult.putAll(this.getComponentInstanceJsonAddr(sub, previousAddr + '/@components.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    ContainerNodetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:ContainerNode" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getMetaData().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "metaData":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getMetaData());
                                                    ostream.print_0('"');
                                                }
                                                var subsubtypeDefinition = selfObject.getTypeDefinition();
                                                if (subsubtypeDefinition !== null && subsubtypeDefinition !== undefined) {
                                                    var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                                                    if (subsubsubtypeDefinition !== null && subsubsubtypeDefinition !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF ContainerNode Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                                                    }
                                                }
                                                if (selfObject.getHosts().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "hosts": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getHosts().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference ContainerNode/hosts ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionary = selfObject.getDictionary();
                                                if (subdictionary !== null && subdictionary !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionary":');
                                                    this.DictionarytoJson(subdictionary, addrs, ostream);
                                                }
                                                if (selfObject.getComponents().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"components": [');
                                                    var iloop_first_components = true;
                                                    {
                                                        var tmp$4 = selfObject.getComponents().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var so = tmp$4.next();
                                                            if (!iloop_first_components) {
                                                                ostream.println(',');
                                                            }
                                                            this.ComponentInstancetoJson(so, addrs, ostream);
                                                            iloop_first_components = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getContainerRootJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        {
                                            var tmp$0 = selfObject.getNodes().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_nodes = sub.path();
                                                if (subPath_nodes !== null && subPath_nodes !== undefined) {
                                                    subResult.put(sub, subPath_nodes);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@nodes.' + i);
                                                }
                                                subResult.putAll(this.getContainerNodeJsonAddr(sub, previousAddr + '/@nodes.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$1 = selfObject.getTypeDefinitions().iterator();
                                            while (tmp$1.hasNext()) {
                                                var sub_0 = tmp$1.next();
                                                var subPath_typeDefinitions = sub_0.path();
                                                if (subPath_typeDefinitions !== null && subPath_typeDefinitions !== undefined) {
                                                    subResult.put(sub_0, subPath_typeDefinitions);
                                                }
                                                else {
                                                    subResult.put(sub_0, previousAddr + '/@typeDefinitions.' + i);
                                                }
                                                subResult.putAll(this.getTypeDefinitionJsonAddr(sub_0, previousAddr + '/@typeDefinitions.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$2 = selfObject.getRepositories().iterator();
                                            while (tmp$2.hasNext()) {
                                                var sub_1 = tmp$2.next();
                                                var subPath_repositories = sub_1.path();
                                                if (subPath_repositories !== null && subPath_repositories !== undefined) {
                                                    subResult.put(sub_1, subPath_repositories);
                                                }
                                                else {
                                                    subResult.put(sub_1, previousAddr + '/@repositories.' + i);
                                                }
                                                subResult.putAll(this.getRepositoryJsonAddr(sub_1, previousAddr + '/@repositories.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$3 = selfObject.getDataTypes().iterator();
                                            while (tmp$3.hasNext()) {
                                                var sub_2 = tmp$3.next();
                                                var subPath_dataTypes = sub_2.path();
                                                if (subPath_dataTypes !== null && subPath_dataTypes !== undefined) {
                                                    subResult.put(sub_2, subPath_dataTypes);
                                                }
                                                else {
                                                    subResult.put(sub_2, previousAddr + '/@dataTypes.' + i);
                                                }
                                                subResult.putAll(this.getTypedElementJsonAddr(sub_2, previousAddr + '/@dataTypes.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$4 = selfObject.getLibraries().iterator();
                                            while (tmp$4.hasNext()) {
                                                var sub_3 = tmp$4.next();
                                                var subPath_libraries = sub_3.path();
                                                if (subPath_libraries !== null && subPath_libraries !== undefined) {
                                                    subResult.put(sub_3, subPath_libraries);
                                                }
                                                else {
                                                    subResult.put(sub_3, previousAddr + '/@libraries.' + i);
                                                }
                                                subResult.putAll(this.getTypeLibraryJsonAddr(sub_3, previousAddr + '/@libraries.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$5 = selfObject.getHubs().iterator();
                                            while (tmp$5.hasNext()) {
                                                var sub_4 = tmp$5.next();
                                                var subPath_hubs = sub_4.path();
                                                if (subPath_hubs !== null && subPath_hubs !== undefined) {
                                                    subResult.put(sub_4, subPath_hubs);
                                                }
                                                else {
                                                    subResult.put(sub_4, previousAddr + '/@hubs.' + i);
                                                }
                                                subResult.putAll(this.getChannelJsonAddr(sub_4, previousAddr + '/@hubs.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$6 = selfObject.getMBindings().iterator();
                                            while (tmp$6.hasNext()) {
                                                var sub_5 = tmp$6.next();
                                                var subPath_mBindings = sub_5.path();
                                                if (subPath_mBindings !== null && subPath_mBindings !== undefined) {
                                                    subResult.put(sub_5, subPath_mBindings);
                                                }
                                                else {
                                                    subResult.put(sub_5, previousAddr + '/@mBindings.' + i);
                                                }
                                                subResult.putAll(this.getMBindingJsonAddr(sub_5, previousAddr + '/@mBindings.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$7 = selfObject.getDeployUnits().iterator();
                                            while (tmp$7.hasNext()) {
                                                var sub_6 = tmp$7.next();
                                                var subPath_deployUnits = sub_6.path();
                                                if (subPath_deployUnits !== null && subPath_deployUnits !== undefined) {
                                                    subResult.put(sub_6, subPath_deployUnits);
                                                }
                                                else {
                                                    subResult.put(sub_6, previousAddr + '/@deployUnits.' + i);
                                                }
                                                subResult.putAll(this.getDeployUnitJsonAddr(sub_6, previousAddr + '/@deployUnits.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$8 = selfObject.getNodeNetworks().iterator();
                                            while (tmp$8.hasNext()) {
                                                var sub_7 = tmp$8.next();
                                                var subPath_nodeNetworks = sub_7.path();
                                                if (subPath_nodeNetworks !== null && subPath_nodeNetworks !== undefined) {
                                                    subResult.put(sub_7, subPath_nodeNetworks);
                                                }
                                                else {
                                                    subResult.put(sub_7, previousAddr + '/@nodeNetworks.' + i);
                                                }
                                                subResult.putAll(this.getNodeNetworkJsonAddr(sub_7, previousAddr + '/@nodeNetworks.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$9 = selfObject.getGroups().iterator();
                                            while (tmp$9.hasNext()) {
                                                var sub_8 = tmp$9.next();
                                                var subPath_groups = sub_8.path();
                                                if (subPath_groups !== null && subPath_groups !== undefined) {
                                                    subResult.put(sub_8, subPath_groups);
                                                }
                                                else {
                                                    subResult.put(sub_8, previousAddr + '/@groups.' + i);
                                                }
                                                subResult.putAll(this.getGroupJsonAddr(sub_8, previousAddr + '/@groups.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$10 = selfObject.getGroupTypes().iterator();
                                            while (tmp$10.hasNext()) {
                                                var sub_9 = tmp$10.next();
                                                var subPath_groupTypes = sub_9.path();
                                                if (subPath_groupTypes !== null && subPath_groupTypes !== undefined) {
                                                    subResult.put(sub_9, subPath_groupTypes);
                                                }
                                                else {
                                                    subResult.put(sub_9, previousAddr + '/@groupTypes.' + i);
                                                }
                                                subResult.putAll(this.getGroupTypeJsonAddr(sub_9, previousAddr + '/@groupTypes.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$11 = selfObject.getAdaptationPrimitiveTypes().iterator();
                                            while (tmp$11.hasNext()) {
                                                var sub_10 = tmp$11.next();
                                                var subPath_adaptationPrimitiveTypes = sub_10.path();
                                                if (subPath_adaptationPrimitiveTypes !== null && subPath_adaptationPrimitiveTypes !== undefined) {
                                                    subResult.put(sub_10, subPath_adaptationPrimitiveTypes);
                                                }
                                                else {
                                                    subResult.put(sub_10, previousAddr + '/@adaptationPrimitiveTypes.' + i);
                                                }
                                                subResult.putAll(this.getAdaptationPrimitiveTypeJsonAddr(sub_10, previousAddr + '/@adaptationPrimitiveTypes.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    ContainerRoottoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:ContainerRoot" ');
                                                if (selfObject.getNodes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"nodes": [');
                                                    var iloop_first_nodes = true;
                                                    {
                                                        var tmp$3 = selfObject.getNodes().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var so = tmp$3.next();
                                                            if (!iloop_first_nodes) {
                                                                ostream.println(',');
                                                            }
                                                            this.ContainerNodetoJson(so, addrs, ostream);
                                                            iloop_first_nodes = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getTypeDefinitions().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"typeDefinitions": [');
                                                    var iloop_first_typeDefinitions = true;
                                                    {
                                                        var tmp$4 = selfObject.getTypeDefinitions().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var so_0 = tmp$4.next();
                                                            if (!iloop_first_typeDefinitions) {
                                                                ostream.println(',');
                                                            }
                                                            this.TypeDefinitiontoJson(so_0, addrs, ostream);
                                                            iloop_first_typeDefinitions = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getRepositories().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"repositories": [');
                                                    var iloop_first_repositories = true;
                                                    {
                                                        var tmp$5 = selfObject.getRepositories().iterator();
                                                        while (tmp$5.hasNext()) {
                                                            var so_1 = tmp$5.next();
                                                            if (!iloop_first_repositories) {
                                                                ostream.println(',');
                                                            }
                                                            this.RepositorytoJson(so_1, addrs, ostream);
                                                            iloop_first_repositories = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getDataTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"dataTypes": [');
                                                    var iloop_first_dataTypes = true;
                                                    {
                                                        var tmp$6 = selfObject.getDataTypes().iterator();
                                                        while (tmp$6.hasNext()) {
                                                            var so_2 = tmp$6.next();
                                                            if (!iloop_first_dataTypes) {
                                                                ostream.println(',');
                                                            }
                                                            this.TypedElementtoJson(so_2, addrs, ostream);
                                                            iloop_first_dataTypes = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getLibraries().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"libraries": [');
                                                    var iloop_first_libraries = true;
                                                    {
                                                        var tmp$7 = selfObject.getLibraries().iterator();
                                                        while (tmp$7.hasNext()) {
                                                            var so_3 = tmp$7.next();
                                                            if (!iloop_first_libraries) {
                                                                ostream.println(',');
                                                            }
                                                            this.TypeLibrarytoJson(so_3, addrs, ostream);
                                                            iloop_first_libraries = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getHubs().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"hubs": [');
                                                    var iloop_first_hubs = true;
                                                    {
                                                        var tmp$8 = selfObject.getHubs().iterator();
                                                        while (tmp$8.hasNext()) {
                                                            var so_4 = tmp$8.next();
                                                            if (!iloop_first_hubs) {
                                                                ostream.println(',');
                                                            }
                                                            this.ChanneltoJson(so_4, addrs, ostream);
                                                            iloop_first_hubs = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getMBindings().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"mBindings": [');
                                                    var iloop_first_mBindings = true;
                                                    {
                                                        var tmp$9 = selfObject.getMBindings().iterator();
                                                        while (tmp$9.hasNext()) {
                                                            var so_5 = tmp$9.next();
                                                            if (!iloop_first_mBindings) {
                                                                ostream.println(',');
                                                            }
                                                            this.MBindingtoJson(so_5, addrs, ostream);
                                                            iloop_first_mBindings = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"deployUnits": [');
                                                    var iloop_first_deployUnits = true;
                                                    {
                                                        var tmp$10 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$10.hasNext()) {
                                                            var so_6 = tmp$10.next();
                                                            if (!iloop_first_deployUnits) {
                                                                ostream.println(',');
                                                            }
                                                            this.DeployUnittoJson(so_6, addrs, ostream);
                                                            iloop_first_deployUnits = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getNodeNetworks().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"nodeNetworks": [');
                                                    var iloop_first_nodeNetworks = true;
                                                    {
                                                        var tmp$11 = selfObject.getNodeNetworks().iterator();
                                                        while (tmp$11.hasNext()) {
                                                            var so_7 = tmp$11.next();
                                                            if (!iloop_first_nodeNetworks) {
                                                                ostream.println(',');
                                                            }
                                                            this.NodeNetworktoJson(so_7, addrs, ostream);
                                                            iloop_first_nodeNetworks = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getGroups().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"groups": [');
                                                    var iloop_first_groups = true;
                                                    {
                                                        var tmp$12 = selfObject.getGroups().iterator();
                                                        while (tmp$12.hasNext()) {
                                                            var so_8 = tmp$12.next();
                                                            if (!iloop_first_groups) {
                                                                ostream.println(',');
                                                            }
                                                            this.GrouptoJson(so_8, addrs, ostream);
                                                            iloop_first_groups = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getGroupTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"groupTypes": [');
                                                    var iloop_first_groupTypes = true;
                                                    {
                                                        var tmp$13 = selfObject.getGroupTypes().iterator();
                                                        while (tmp$13.hasNext()) {
                                                            var so_9 = tmp$13.next();
                                                            if (!iloop_first_groupTypes) {
                                                                ostream.println(',');
                                                            }
                                                            this.GroupTypetoJson(so_9, addrs, ostream);
                                                            iloop_first_groupTypes = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getAdaptationPrimitiveTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"adaptationPrimitiveTypes": [');
                                                    var iloop_first_adaptationPrimitiveTypes = true;
                                                    {
                                                        var tmp$14 = selfObject.getAdaptationPrimitiveTypes().iterator();
                                                        while (tmp$14.hasNext()) {
                                                            var so_10 = tmp$14.next();
                                                            if (!iloop_first_adaptationPrimitiveTypes) {
                                                                ostream.println(',');
                                                            }
                                                            this.AdaptationPrimitiveTypetoJson(so_10, addrs, ostream);
                                                            iloop_first_adaptationPrimitiveTypes = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getPortTypeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var subdictionaryType = selfObject.getDictionaryType();
                                        if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                            var subPath_dictionaryType = subdictionaryType.path();
                                            if (subPath_dictionaryType !== null && subPath_dictionaryType !== undefined) {
                                                subResult.put(subdictionaryType, subPath_dictionaryType);
                                            }
                                            else {
                                                subResult.put(subdictionaryType, previousAddr + '/@dictionaryType');
                                            }
                                            subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType, previousAddr + '/@dictionaryType'));
                                        }
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 3; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ServicePortType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ServicePortTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getServicePortTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.MessagePortType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.MessagePortTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getMessagePortTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 2) {
                                            }
                                        }
                                        tmp$2;
                                        return subResult;
                                    },
                                    PortTypetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 3; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ServicePortType)) {
                                                    {
                                                        tmp$2 = this.ServicePortTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.MessagePortType)) {
                                                    {
                                                        tmp$2 = this.MessagePortTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 2) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:PortType" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "factoryBean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getFactoryBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "bean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getSynchrone().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "synchrone":');
                                                    ostream.print_1(selfObject.getSynchrone());
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "deployUnits": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference PortType/deployUnits ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getSuperTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "superTypes": [');
                                                    var firstItLoop_0 = true;
                                                    {
                                                        var tmp$4 = selfObject.getSuperTypes().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var sub_0 = tmp$4.next();
                                                            if (!firstItLoop_0) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_0 = addrs.get(sub_0);
                                                            if (subsub_0 !== null && subsub_0 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_0);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference PortType/superTypes ');
                                                            }
                                                            firstItLoop_0 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionaryType = selfObject.getDictionaryType();
                                                if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionaryType":');
                                                    this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getPortJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    PorttoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:Port" ');
                                                var subsubportTypeRef = selfObject.getPortTypeRef();
                                                if (subsubportTypeRef !== null && subsubportTypeRef !== undefined) {
                                                    var subsubsubportTypeRef = addrs.get(subsubportTypeRef);
                                                    if (subsubsubportTypeRef !== null && subsubsubportTypeRef !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "portTypeRef":"' + subsubsubportTypeRef + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF Port Serialization error : No address found for reference portTypeRef(id:' + subsubportTypeRef + ' container:' + subsubportTypeRef.eContainer() + ')');
                                                    }
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getNamespaceJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        {
                                            var tmp$0 = selfObject.getChilds().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_childs = sub.path();
                                                if (subPath_childs !== null && subPath_childs !== undefined) {
                                                    subResult.put(sub, subPath_childs);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@childs.' + i);
                                                }
                                                subResult.putAll(this.getNamespaceJsonAddr(sub, previousAddr + '/@childs.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    NamespacetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:Namespace" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                var subsubparent = selfObject.getParent();
                                                if (subsubparent !== null && subsubparent !== undefined) {
                                                    var subsubsubparent = addrs.get(subsubparent);
                                                    if (subsubsubparent !== null && subsubsubparent !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "parent":"' + subsubsubparent + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF Namespace Serialization error : No address found for reference parent(id:' + subsubparent + ' container:' + subsubparent.eContainer() + ')');
                                                    }
                                                }
                                                if (selfObject.getChilds().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"childs": [');
                                                    var iloop_first_childs = true;
                                                    {
                                                        var tmp$3 = selfObject.getChilds().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var so = tmp$3.next();
                                                            if (!iloop_first_childs) {
                                                                ostream.println(',');
                                                            }
                                                            this.NamespacetoJson(so, addrs, ostream);
                                                            iloop_first_childs = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getDictionaryJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        {
                                            var tmp$0 = selfObject.getValues().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_values = sub.path();
                                                if (subPath_values !== null && subPath_values !== undefined) {
                                                    subResult.put(sub, subPath_values);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@values.' + i);
                                                }
                                                subResult.putAll(this.getDictionaryValueJsonAddr(sub, previousAddr + '/@values.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    DictionarytoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:Dictionary" ');
                                                if (selfObject.getValues().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"values": [');
                                                    var iloop_first_values = true;
                                                    {
                                                        var tmp$3 = selfObject.getValues().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var so = tmp$3.next();
                                                            if (!iloop_first_values) {
                                                                ostream.println(',');
                                                            }
                                                            this.DictionaryValuetoJson(so, addrs, ostream);
                                                            iloop_first_values = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getDictionaryTypeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        {
                                            var tmp$0 = selfObject.getAttributes().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_attributes = sub.path();
                                                if (subPath_attributes !== null && subPath_attributes !== undefined) {
                                                    subResult.put(sub, subPath_attributes);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@attributes.' + i);
                                                }
                                                subResult.putAll(this.getDictionaryAttributeJsonAddr(sub, previousAddr + '/@attributes.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$1 = selfObject.getDefaultValues().iterator();
                                            while (tmp$1.hasNext()) {
                                                var sub_0 = tmp$1.next();
                                                var subPath_defaultValues = sub_0.path();
                                                if (subPath_defaultValues !== null && subPath_defaultValues !== undefined) {
                                                    subResult.put(sub_0, subPath_defaultValues);
                                                }
                                                else {
                                                    subResult.put(sub_0, previousAddr + '/@defaultValues.' + i);
                                                }
                                                subResult.putAll(this.getDictionaryValueJsonAddr(sub_0, previousAddr + '/@defaultValues.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    DictionaryTypetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:DictionaryType" ');
                                                if (selfObject.getAttributes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"attributes": [');
                                                    var iloop_first_attributes = true;
                                                    {
                                                        var tmp$3 = selfObject.getAttributes().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var so = tmp$3.next();
                                                            if (!iloop_first_attributes) {
                                                                ostream.println(',');
                                                            }
                                                            this.DictionaryAttributetoJson(so, addrs, ostream);
                                                            iloop_first_attributes = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getDefaultValues().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"defaultValues": [');
                                                    var iloop_first_defaultValues = true;
                                                    {
                                                        var tmp$4 = selfObject.getDefaultValues().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var so_0 = tmp$4.next();
                                                            if (!iloop_first_defaultValues) {
                                                                ostream.println(',');
                                                            }
                                                            this.DictionaryValuetoJson(so_0, addrs, ostream);
                                                            iloop_first_defaultValues = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getDictionaryAttributeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    DictionaryAttributetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:DictionaryAttribute" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getOptional().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "optional":');
                                                    ostream.print_1(selfObject.getOptional());
                                                }
                                                if (!Kotlin.equals(selfObject.getState().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "state":');
                                                    ostream.print_1(selfObject.getState());
                                                }
                                                if (!Kotlin.equals(selfObject.getDatatype().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "datatype":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getDatatype());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFragmentDependant().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "fragmentDependant":');
                                                    ostream.print_1(selfObject.getFragmentDependant());
                                                }
                                                if (selfObject.getGenericTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "genericTypes": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getGenericTypes().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference DictionaryAttribute/genericTypes ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getDictionaryValueJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    DictionaryValuetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:DictionaryValue" ');
                                                if (!Kotlin.equals(selfObject.getValue().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "value":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getValue());
                                                    ostream.print_0('"');
                                                }
                                                var subsubattribute = selfObject.getAttribute();
                                                if (subsubattribute !== null && subsubattribute !== undefined) {
                                                    var subsubsubattribute = addrs.get(subsubattribute);
                                                    if (subsubsubattribute !== null && subsubsubattribute !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "attribute":"' + subsubsubattribute + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF DictionaryValue Serialization error : No address found for reference attribute(id:' + subsubattribute + ' container:' + subsubattribute.eContainer() + ')');
                                                    }
                                                }
                                                var subsubtargetNode = selfObject.getTargetNode();
                                                if (subsubtargetNode !== null && subsubtargetNode !== undefined) {
                                                    var subsubsubtargetNode = addrs.get(subsubtargetNode);
                                                    if (subsubsubtargetNode !== null && subsubsubtargetNode !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "targetNode":"' + subsubsubtargetNode + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF DictionaryValue Serialization error : No address found for reference targetNode(id:' + subsubtargetNode + ' container:' + subsubtargetNode.eContainer() + ')');
                                                    }
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getCompositeTypeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        var subdictionaryType = selfObject.getDictionaryType();
                                        if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                            var subPath_dictionaryType = subdictionaryType.path();
                                            if (subPath_dictionaryType !== null && subPath_dictionaryType !== undefined) {
                                                subResult.put(subdictionaryType, subPath_dictionaryType);
                                            }
                                            else {
                                                subResult.put(subdictionaryType, previousAddr + '/@dictionaryType');
                                            }
                                            subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType, previousAddr + '/@dictionaryType'));
                                        }
                                        {
                                            var tmp$0 = selfObject.getRequired().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_required = sub.path();
                                                if (subPath_required !== null && subPath_required !== undefined) {
                                                    subResult.put(sub, subPath_required);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@required.' + i);
                                                }
                                                subResult.putAll(this.getPortTypeRefJsonAddr(sub, previousAddr + '/@required.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$1 = selfObject.getIntegrationPatterns().iterator();
                                            while (tmp$1.hasNext()) {
                                                var sub_0 = tmp$1.next();
                                                var subPath_integrationPatterns = sub_0.path();
                                                if (subPath_integrationPatterns !== null && subPath_integrationPatterns !== undefined) {
                                                    subResult.put(sub_0, subPath_integrationPatterns);
                                                }
                                                else {
                                                    subResult.put(sub_0, previousAddr + '/@integrationPatterns.' + i);
                                                }
                                                subResult.putAll(this.getIntegrationPatternJsonAddr(sub_0, previousAddr + '/@integrationPatterns.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        var subextraFonctionalProperties = selfObject.getExtraFonctionalProperties();
                                        if (subextraFonctionalProperties !== null && subextraFonctionalProperties !== undefined) {
                                            var subPath_extraFonctionalProperties = subextraFonctionalProperties.path();
                                            if (subPath_extraFonctionalProperties !== null && subPath_extraFonctionalProperties !== undefined) {
                                                subResult.put(subextraFonctionalProperties, subPath_extraFonctionalProperties);
                                            }
                                            else {
                                                subResult.put(subextraFonctionalProperties, previousAddr + '/@extraFonctionalProperties');
                                            }
                                            subResult.putAll(this.getExtraFonctionalPropertyJsonAddr(subextraFonctionalProperties, previousAddr + '/@extraFonctionalProperties'));
                                        }
                                        i = 0;
                                        {
                                            var tmp$2 = selfObject.getProvided().iterator();
                                            while (tmp$2.hasNext()) {
                                                var sub_1 = tmp$2.next();
                                                var subPath_provided = sub_1.path();
                                                if (subPath_provided !== null && subPath_provided !== undefined) {
                                                    subResult.put(sub_1, subPath_provided);
                                                }
                                                else {
                                                    subResult.put(sub_1, previousAddr + '/@provided.' + i);
                                                }
                                                subResult.putAll(this.getPortTypeRefJsonAddr(sub_1, previousAddr + '/@provided.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        i = 0;
                                        {
                                            var tmp$3 = selfObject.getWires().iterator();
                                            while (tmp$3.hasNext()) {
                                                var sub_2 = tmp$3.next();
                                                var subPath_wires = sub_2.path();
                                                if (subPath_wires !== null && subPath_wires !== undefined) {
                                                    subResult.put(sub_2, subPath_wires);
                                                }
                                                else {
                                                    subResult.put(sub_2, previousAddr + '/@wires.' + i);
                                                }
                                                subResult.putAll(this.getWireJsonAddr(sub_2, previousAddr + '/@wires.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    CompositeTypetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:CompositeType" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "factoryBean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getFactoryBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "bean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "startMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStartMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "stopMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStopMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "updateMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getUpdateMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "deployUnits": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference CompositeType/deployUnits ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getSuperTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "superTypes": [');
                                                    var firstItLoop_0 = true;
                                                    {
                                                        var tmp$4 = selfObject.getSuperTypes().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var sub_0 = tmp$4.next();
                                                            if (!firstItLoop_0) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_0 = addrs.get(sub_0);
                                                            if (subsub_0 !== null && subsub_0 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_0);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference CompositeType/superTypes ');
                                                            }
                                                            firstItLoop_0 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getChilds().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "childs": [');
                                                    var firstItLoop_1 = true;
                                                    {
                                                        var tmp$5 = selfObject.getChilds().iterator();
                                                        while (tmp$5.hasNext()) {
                                                            var sub_1 = tmp$5.next();
                                                            if (!firstItLoop_1) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_1 = addrs.get(sub_1);
                                                            if (subsub_1 !== null && subsub_1 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_1);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference CompositeType/childs ');
                                                            }
                                                            firstItLoop_1 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionaryType = selfObject.getDictionaryType();
                                                if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionaryType":');
                                                    this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                                                }
                                                if (selfObject.getRequired().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"required": [');
                                                    var iloop_first_required = true;
                                                    {
                                                        var tmp$6 = selfObject.getRequired().iterator();
                                                        while (tmp$6.hasNext()) {
                                                            var so = tmp$6.next();
                                                            if (!iloop_first_required) {
                                                                ostream.println(',');
                                                            }
                                                            this.PortTypeReftoJson(so, addrs, ostream);
                                                            iloop_first_required = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getIntegrationPatterns().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"integrationPatterns": [');
                                                    var iloop_first_integrationPatterns = true;
                                                    {
                                                        var tmp$7 = selfObject.getIntegrationPatterns().iterator();
                                                        while (tmp$7.hasNext()) {
                                                            var so_0 = tmp$7.next();
                                                            if (!iloop_first_integrationPatterns) {
                                                                ostream.println(',');
                                                            }
                                                            this.IntegrationPatterntoJson(so_0, addrs, ostream);
                                                            iloop_first_integrationPatterns = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                var subextraFonctionalProperties = selfObject.getExtraFonctionalProperties();
                                                if (subextraFonctionalProperties !== null && subextraFonctionalProperties !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"extraFonctionalProperties":');
                                                    this.ExtraFonctionalPropertytoJson(subextraFonctionalProperties, addrs, ostream);
                                                }
                                                if (selfObject.getProvided().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"provided": [');
                                                    var iloop_first_provided = true;
                                                    {
                                                        var tmp$8 = selfObject.getProvided().iterator();
                                                        while (tmp$8.hasNext()) {
                                                            var so_1 = tmp$8.next();
                                                            if (!iloop_first_provided) {
                                                                ostream.println(',');
                                                            }
                                                            this.PortTypeReftoJson(so_1, addrs, ostream);
                                                            iloop_first_provided = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                if (selfObject.getWires().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"wires": [');
                                                    var iloop_first_wires = true;
                                                    {
                                                        var tmp$9 = selfObject.getWires().iterator();
                                                        while (tmp$9.hasNext()) {
                                                            var so_2 = tmp$9.next();
                                                            if (!iloop_first_wires) {
                                                                ostream.println(',');
                                                            }
                                                            this.WiretoJson(so_2, addrs, ostream);
                                                            iloop_first_wires = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getPortTypeRefJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        {
                                            var tmp$0 = selfObject.getMappings().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_mappings = sub.path();
                                                if (subPath_mappings !== null && subPath_mappings !== undefined) {
                                                    subResult.put(sub, subPath_mappings);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@mappings.' + i);
                                                }
                                                subResult.putAll(this.getPortTypeMappingJsonAddr(sub, previousAddr + '/@mappings.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    PortTypeReftoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:PortTypeRef" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getOptional().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "optional":');
                                                    ostream.print_1(selfObject.getOptional());
                                                }
                                                if (!Kotlin.equals(selfObject.getNoDependency().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "noDependency":');
                                                    ostream.print_1(selfObject.getNoDependency());
                                                }
                                                var subsubref = selfObject.getRef();
                                                if (subsubref !== null && subsubref !== undefined) {
                                                    var subsubsubref = addrs.get(subsubref);
                                                    if (subsubsubref !== null && subsubsubref !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "ref":"' + subsubsubref + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF PortTypeRef Serialization error : No address found for reference ref(id:' + subsubref + ' container:' + subsubref.eContainer() + ')');
                                                    }
                                                }
                                                if (selfObject.getMappings().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"mappings": [');
                                                    var iloop_first_mappings = true;
                                                    {
                                                        var tmp$3 = selfObject.getMappings().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var so = tmp$3.next();
                                                            if (!iloop_first_mappings) {
                                                                ostream.println(',');
                                                            }
                                                            this.PortTypeMappingtoJson(so, addrs, ostream);
                                                            iloop_first_mappings = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getWireJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    WiretoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:Wire" ');
                                                if (selfObject.getPorts().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "ports": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getPorts().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference Wire/ports ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getServicePortTypeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        var subdictionaryType = selfObject.getDictionaryType();
                                        if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                            var subPath_dictionaryType = subdictionaryType.path();
                                            if (subPath_dictionaryType !== null && subPath_dictionaryType !== undefined) {
                                                subResult.put(subdictionaryType, subPath_dictionaryType);
                                            }
                                            else {
                                                subResult.put(subdictionaryType, previousAddr + '/@dictionaryType');
                                            }
                                            subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType, previousAddr + '/@dictionaryType'));
                                        }
                                        {
                                            var tmp$0 = selfObject.getOperations().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_operations = sub.path();
                                                if (subPath_operations !== null && subPath_operations !== undefined) {
                                                    subResult.put(sub, subPath_operations);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@operations.' + i);
                                                }
                                                subResult.putAll(this.getOperationJsonAddr(sub, previousAddr + '/@operations.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    ServicePortTypetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:ServicePortType" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "factoryBean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getFactoryBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "bean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getSynchrone().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "synchrone":');
                                                    ostream.print_1(selfObject.getSynchrone());
                                                }
                                                if (!Kotlin.equals(selfObject.getInterfaceService().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "interfaceService":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getInterfaceService());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "deployUnits": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference ServicePortType/deployUnits ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getSuperTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "superTypes": [');
                                                    var firstItLoop_0 = true;
                                                    {
                                                        var tmp$4 = selfObject.getSuperTypes().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var sub_0 = tmp$4.next();
                                                            if (!firstItLoop_0) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_0 = addrs.get(sub_0);
                                                            if (subsub_0 !== null && subsub_0 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_0);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference ServicePortType/superTypes ');
                                                            }
                                                            firstItLoop_0 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionaryType = selfObject.getDictionaryType();
                                                if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionaryType":');
                                                    this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                                                }
                                                if (selfObject.getOperations().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"operations": [');
                                                    var iloop_first_operations = true;
                                                    {
                                                        var tmp$5 = selfObject.getOperations().iterator();
                                                        while (tmp$5.hasNext()) {
                                                            var so = tmp$5.next();
                                                            if (!iloop_first_operations) {
                                                                ostream.println(',');
                                                            }
                                                            this.OperationtoJson(so, addrs, ostream);
                                                            iloop_first_operations = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getOperationJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        {
                                            var tmp$0 = selfObject.getParameters().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_parameters = sub.path();
                                                if (subPath_parameters !== null && subPath_parameters !== undefined) {
                                                    subResult.put(sub, subPath_parameters);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@parameters.' + i);
                                                }
                                                subResult.putAll(this.getParameterJsonAddr(sub, previousAddr + '/@parameters.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    OperationtoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:Operation" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                var subsubreturnType = selfObject.getReturnType();
                                                if (subsubreturnType !== null && subsubreturnType !== undefined) {
                                                    var subsubsubreturnType = addrs.get(subsubreturnType);
                                                    if (subsubsubreturnType !== null && subsubsubreturnType !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "returnType":"' + subsubsubreturnType + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF Operation Serialization error : No address found for reference returnType(id:' + subsubreturnType + ' container:' + subsubreturnType.eContainer() + ')');
                                                    }
                                                }
                                                if (selfObject.getParameters().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"parameters": [');
                                                    var iloop_first_parameters = true;
                                                    {
                                                        var tmp$3 = selfObject.getParameters().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var so = tmp$3.next();
                                                            if (!iloop_first_parameters) {
                                                                ostream.println(',');
                                                            }
                                                            this.ParametertoJson(so, addrs, ostream);
                                                            iloop_first_parameters = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getParameterJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    ParametertoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:Parameter" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                var subsubtype = selfObject.getType();
                                                if (subsubtype !== null && subsubtype !== undefined) {
                                                    var subsubsubtype = addrs.get(subsubtype);
                                                    if (subsubsubtype !== null && subsubsubtype !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "type":"' + subsubsubtype + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF Parameter Serialization error : No address found for reference type(id:' + subsubtype + ' container:' + subsubtype.eContainer() + ')');
                                                    }
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getTypedElementJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 2; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.DictionaryAttribute) || Kotlin.isType(tmp$0, _.org.kevoree.impl.DictionaryAttributeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getDictionaryAttributeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1) {
                                            }
                                        }
                                        tmp$2;
                                        return subResult;
                                    },
                                    TypedElementtoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 2; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.DictionaryAttribute)) {
                                                    {
                                                        tmp$2 = this.DictionaryAttributetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:TypedElement" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getGenericTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "genericTypes": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getGenericTypes().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference TypedElement/genericTypes ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getMessagePortTypeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var subdictionaryType = selfObject.getDictionaryType();
                                        if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                            var subPath_dictionaryType = subdictionaryType.path();
                                            if (subPath_dictionaryType !== null && subPath_dictionaryType !== undefined) {
                                                subResult.put(subdictionaryType, subPath_dictionaryType);
                                            }
                                            else {
                                                subResult.put(subdictionaryType, previousAddr + '/@dictionaryType');
                                            }
                                            subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType, previousAddr + '/@dictionaryType'));
                                        }
                                        return subResult;
                                    },
                                    MessagePortTypetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:MessagePortType" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "factoryBean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getFactoryBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "bean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getSynchrone().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "synchrone":');
                                                    ostream.print_1(selfObject.getSynchrone());
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "deployUnits": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference MessagePortType/deployUnits ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getSuperTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "superTypes": [');
                                                    var firstItLoop_0 = true;
                                                    {
                                                        var tmp$4 = selfObject.getSuperTypes().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var sub_0 = tmp$4.next();
                                                            if (!firstItLoop_0) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_0 = addrs.get(sub_0);
                                                            if (subsub_0 !== null && subsub_0 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_0);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference MessagePortType/superTypes ');
                                                            }
                                                            firstItLoop_0 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getFilters().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "filters": [');
                                                    var firstItLoop_1 = true;
                                                    {
                                                        var tmp$5 = selfObject.getFilters().iterator();
                                                        while (tmp$5.hasNext()) {
                                                            var sub_1 = tmp$5.next();
                                                            if (!firstItLoop_1) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_1 = addrs.get(sub_1);
                                                            if (subsub_1 !== null && subsub_1 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_1);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference MessagePortType/filters ');
                                                            }
                                                            firstItLoop_1 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionaryType = selfObject.getDictionaryType();
                                                if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionaryType":');
                                                    this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getRepositoryJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    RepositorytoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:Repository" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUrl().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "url":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getUrl());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "units": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference Repository/units ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getDeployUnitJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    DeployUnittoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:DeployUnit" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getGroupName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "groupName":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getGroupName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUnitName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "unitName":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getUnitName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getVersion().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "version":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getVersion());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUrl().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "url":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getUrl());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getHashcode().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "hashcode":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getHashcode());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getType().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "type":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getType());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getRequiredLibs().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "requiredLibs": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getRequiredLibs().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference DeployUnit/requiredLibs ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subsubtargetNodeType = selfObject.getTargetNodeType();
                                                if (subsubtargetNodeType !== null && subsubtargetNodeType !== undefined) {
                                                    var subsubsubtargetNodeType = addrs.get(subsubtargetNodeType);
                                                    if (subsubsubtargetNodeType !== null && subsubsubtargetNodeType !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "targetNodeType":"' + subsubsubtargetNodeType + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF DeployUnit Serialization error : No address found for reference targetNodeType(id:' + subsubtargetNodeType + ' container:' + subsubtargetNodeType.eContainer() + ')');
                                                    }
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getTypeLibraryJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    TypeLibrarytoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:TypeLibrary" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getSubTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "subTypes": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getSubTypes().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference TypeLibrary/subTypes ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getNamedElementJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 19; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ComponentType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ComponentTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getComponentTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Namespace) || Kotlin.isType(tmp$0, _.org.kevoree.impl.NamespaceImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getNamespaceJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 2)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.PortTypeRef) || Kotlin.isType(tmp$0, _.org.kevoree.impl.PortTypeRefImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getPortTypeRefJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 3)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ServicePortType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ServicePortTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getServicePortTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 4)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Operation) || Kotlin.isType(tmp$0, _.org.kevoree.impl.OperationImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getOperationJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 5)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Parameter) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ParameterImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getParameterJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 6)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.TypedElement) || Kotlin.isType(tmp$0, _.org.kevoree.impl.TypedElementImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getTypedElementJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 7)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.MessagePortType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.MessagePortTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getMessagePortTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 8)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Repository) || Kotlin.isType(tmp$0, _.org.kevoree.impl.RepositoryImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getRepositoryJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 9)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.DeployUnit) || Kotlin.isType(tmp$0, _.org.kevoree.impl.DeployUnitImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getDeployUnitJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 10)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.TypeLibrary) || Kotlin.isType(tmp$0, _.org.kevoree.impl.TypeLibraryImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getTypeLibraryJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 11)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.IntegrationPattern) || Kotlin.isType(tmp$0, _.org.kevoree.impl.IntegrationPatternImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getIntegrationPatternJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 12)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.NetworkProperty) || Kotlin.isType(tmp$0, _.org.kevoree.impl.NetworkPropertyImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getNetworkPropertyJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 13)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ChannelType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ChannelTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getChannelTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 14)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Instance) || Kotlin.isType(tmp$0, _.org.kevoree.impl.InstanceImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getInstanceJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 15)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.GroupType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.GroupTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getGroupTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 16)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.NodeType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.NodeTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getNodeTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 17)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.AdaptationPrimitiveType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getAdaptationPrimitiveTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 18) {
                                            }
                                        }
                                        tmp$2;
                                        return subResult;
                                    },
                                    NamedElementtoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 19; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ComponentType)) {
                                                    {
                                                        tmp$2 = this.ComponentTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Namespace)) {
                                                    {
                                                        tmp$2 = this.NamespacetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 2)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.PortTypeRef)) {
                                                    {
                                                        tmp$2 = this.PortTypeReftoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 3)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ServicePortType)) {
                                                    {
                                                        tmp$2 = this.ServicePortTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 4)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Operation)) {
                                                    {
                                                        tmp$2 = this.OperationtoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 5)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Parameter)) {
                                                    {
                                                        tmp$2 = this.ParametertoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 6)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.TypedElement)) {
                                                    {
                                                        tmp$2 = this.TypedElementtoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 7)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.MessagePortType)) {
                                                    {
                                                        tmp$2 = this.MessagePortTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 8)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Repository)) {
                                                    {
                                                        tmp$2 = this.RepositorytoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 9)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.DeployUnit)) {
                                                    {
                                                        tmp$2 = this.DeployUnittoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 10)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.TypeLibrary)) {
                                                    {
                                                        tmp$2 = this.TypeLibrarytoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 11)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.IntegrationPattern)) {
                                                    {
                                                        tmp$2 = this.IntegrationPatterntoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 12)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.NetworkProperty)) {
                                                    {
                                                        tmp$2 = this.NetworkPropertytoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 13)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ChannelType)) {
                                                    {
                                                        tmp$2 = this.ChannelTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 14)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Instance)) {
                                                    {
                                                        tmp$2 = this.InstancetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 15)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.GroupType)) {
                                                    {
                                                        tmp$2 = this.GroupTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 16)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.NodeType)) {
                                                    {
                                                        tmp$2 = this.NodeTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 17)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.AdaptationPrimitiveType)) {
                                                    {
                                                        tmp$2 = this.AdaptationPrimitiveTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 18) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:NamedElement" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getIntegrationPatternJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        {
                                            var tmp$0 = selfObject.getExtraFonctionalProperties().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_extraFonctionalProperties = sub.path();
                                                if (subPath_extraFonctionalProperties !== null && subPath_extraFonctionalProperties !== undefined) {
                                                    subResult.put(sub, subPath_extraFonctionalProperties);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@extraFonctionalProperties.' + i);
                                                }
                                                subResult.putAll(this.getExtraFonctionalPropertyJsonAddr(sub, previousAddr + '/@extraFonctionalProperties.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    IntegrationPatterntoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:IntegrationPattern" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getPortTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "portTypes": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getPortTypes().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference IntegrationPattern/portTypes ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getExtraFonctionalProperties().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"extraFonctionalProperties": [');
                                                    var iloop_first_extraFonctionalProperties = true;
                                                    {
                                                        var tmp$4 = selfObject.getExtraFonctionalProperties().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var so = tmp$4.next();
                                                            if (!iloop_first_extraFonctionalProperties) {
                                                                ostream.println(',');
                                                            }
                                                            this.ExtraFonctionalPropertytoJson(so, addrs, ostream);
                                                            iloop_first_extraFonctionalProperties = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getExtraFonctionalPropertyJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    ExtraFonctionalPropertytoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:ExtraFonctionalProperty" ');
                                                if (selfObject.getPortTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "portTypes": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getPortTypes().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference ExtraFonctionalProperty/portTypes ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getPortTypeMappingJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    PortTypeMappingtoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:PortTypeMapping" ');
                                                if (!Kotlin.equals(selfObject.getBeanMethodName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "beanMethodName":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBeanMethodName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getServiceMethodName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "serviceMethodName":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getServiceMethodName());
                                                    ostream.print_0('"');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getChannelJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var subdictionary = selfObject.getDictionary();
                                        if (subdictionary !== null && subdictionary !== undefined) {
                                            var subPath_dictionary = subdictionary.path();
                                            if (subPath_dictionary !== null && subPath_dictionary !== undefined) {
                                                subResult.put(subdictionary, subPath_dictionary);
                                            }
                                            else {
                                                subResult.put(subdictionary, previousAddr + '/@dictionary');
                                            }
                                            subResult.putAll(this.getDictionaryJsonAddr(subdictionary, previousAddr + '/@dictionary'));
                                        }
                                        return subResult;
                                    },
                                    ChanneltoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:Channel" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getMetaData().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "metaData":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getMetaData());
                                                    ostream.print_0('"');
                                                }
                                                var subsubtypeDefinition = selfObject.getTypeDefinition();
                                                if (subsubtypeDefinition !== null && subsubtypeDefinition !== undefined) {
                                                    var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                                                    if (subsubsubtypeDefinition !== null && subsubsubtypeDefinition !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF Channel Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                                                    }
                                                }
                                                var subdictionary = selfObject.getDictionary();
                                                if (subdictionary !== null && subdictionary !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionary":');
                                                    this.DictionarytoJson(subdictionary, addrs, ostream);
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getMBindingJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    MBindingtoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:MBinding" ');
                                                var subsubport = selfObject.getPort();
                                                if (subsubport !== null && subsubport !== undefined) {
                                                    var subsubsubport = addrs.get(subsubport);
                                                    if (subsubsubport !== null && subsubsubport !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "port":"' + subsubsubport + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF MBinding Serialization error : No address found for reference port(id:' + subsubport + ' container:' + subsubport.eContainer() + ')');
                                                    }
                                                }
                                                var subsubhub = selfObject.getHub();
                                                if (subsubhub !== null && subsubhub !== undefined) {
                                                    var subsubsubhub = addrs.get(subsubhub);
                                                    if (subsubsubhub !== null && subsubsubhub !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "hub":"' + subsubsubhub + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF MBinding Serialization error : No address found for reference hub(id:' + subsubhub + ' container:' + subsubhub.eContainer() + ')');
                                                    }
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getNodeNetworkJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        {
                                            var tmp$0 = selfObject.getLink().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_link = sub.path();
                                                if (subPath_link !== null && subPath_link !== undefined) {
                                                    subResult.put(sub, subPath_link);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@link.' + i);
                                                }
                                                subResult.putAll(this.getNodeLinkJsonAddr(sub, previousAddr + '/@link.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    NodeNetworktoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:NodeNetwork" ');
                                                var subsubinitBy = selfObject.getInitBy();
                                                if (subsubinitBy !== null && subsubinitBy !== undefined) {
                                                    var subsubsubinitBy = addrs.get(subsubinitBy);
                                                    if (subsubsubinitBy !== null && subsubsubinitBy !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "initBy":"' + subsubsubinitBy + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF NodeNetwork Serialization error : No address found for reference initBy(id:' + subsubinitBy + ' container:' + subsubinitBy.eContainer() + ')');
                                                    }
                                                }
                                                var subsubtarget = selfObject.getTarget();
                                                if (subsubtarget !== null && subsubtarget !== undefined) {
                                                    var subsubsubtarget = addrs.get(subsubtarget);
                                                    if (subsubsubtarget !== null && subsubsubtarget !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "target":"' + subsubsubtarget + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF NodeNetwork Serialization error : No address found for reference target(id:' + subsubtarget + ' container:' + subsubtarget.eContainer() + ')');
                                                    }
                                                }
                                                if (selfObject.getLink().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"link": [');
                                                    var iloop_first_link = true;
                                                    {
                                                        var tmp$3 = selfObject.getLink().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var so = tmp$3.next();
                                                            if (!iloop_first_link) {
                                                                ostream.println(',');
                                                            }
                                                            this.NodeLinktoJson(so, addrs, ostream);
                                                            iloop_first_link = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getNodeLinkJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var i = 0;
                                        {
                                            var tmp$0 = selfObject.getNetworkProperties().iterator();
                                            while (tmp$0.hasNext()) {
                                                var sub = tmp$0.next();
                                                var subPath_networkProperties = sub.path();
                                                if (subPath_networkProperties !== null && subPath_networkProperties !== undefined) {
                                                    subResult.put(sub, subPath_networkProperties);
                                                }
                                                else {
                                                    subResult.put(sub, previousAddr + '/@networkProperties.' + i);
                                                }
                                                subResult.putAll(this.getNetworkPropertyJsonAddr(sub, previousAddr + '/@networkProperties.' + i));
                                                i = i + 1;
                                            }
                                        }
                                        return subResult;
                                    },
                                    NodeLinktoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:NodeLink" ');
                                                if (!Kotlin.equals(selfObject.getNetworkType().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "networkType":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getNetworkType());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getEstimatedRate().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "estimatedRate":');
                                                    ostream.print('"');
                                                    ostream.print_2(selfObject.getEstimatedRate());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getLastCheck().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "lastCheck":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getLastCheck());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getNetworkProperties().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.println_0('"networkProperties": [');
                                                    var iloop_first_networkProperties = true;
                                                    {
                                                        var tmp$3 = selfObject.getNetworkProperties().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var so = tmp$3.next();
                                                            if (!iloop_first_networkProperties) {
                                                                ostream.println(',');
                                                            }
                                                            this.NetworkPropertytoJson(so, addrs, ostream);
                                                            iloop_first_networkProperties = false;
                                                        }
                                                    }
                                                    ostream.println(']');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getNetworkPropertyJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    NetworkPropertytoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:NetworkProperty" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getValue().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "value":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getValue());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getLastCheck().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "lastCheck":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getLastCheck());
                                                    ostream.print_0('"');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getChannelTypeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var subdictionaryType = selfObject.getDictionaryType();
                                        if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                            var subPath_dictionaryType = subdictionaryType.path();
                                            if (subPath_dictionaryType !== null && subPath_dictionaryType !== undefined) {
                                                subResult.put(subdictionaryType, subPath_dictionaryType);
                                            }
                                            else {
                                                subResult.put(subdictionaryType, previousAddr + '/@dictionaryType');
                                            }
                                            subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType, previousAddr + '/@dictionaryType'));
                                        }
                                        return subResult;
                                    },
                                    ChannelTypetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:ChannelType" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "factoryBean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getFactoryBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "bean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "startMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStartMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "stopMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStopMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "updateMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getUpdateMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getLowerBindings().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "lowerBindings":');
                                                    ostream.print('"');
                                                    ostream.print_2(selfObject.getLowerBindings());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUpperBindings().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "upperBindings":');
                                                    ostream.print('"');
                                                    ostream.print_2(selfObject.getUpperBindings());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getLowerFragments().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "lowerFragments":');
                                                    ostream.print('"');
                                                    ostream.print_2(selfObject.getLowerFragments());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUpperFragments().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "upperFragments":');
                                                    ostream.print('"');
                                                    ostream.print_2(selfObject.getUpperFragments());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "deployUnits": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference ChannelType/deployUnits ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getSuperTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "superTypes": [');
                                                    var firstItLoop_0 = true;
                                                    {
                                                        var tmp$4 = selfObject.getSuperTypes().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var sub_0 = tmp$4.next();
                                                            if (!firstItLoop_0) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_0 = addrs.get(sub_0);
                                                            if (subsub_0 !== null && subsub_0 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_0);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference ChannelType/superTypes ');
                                                            }
                                                            firstItLoop_0 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionaryType = selfObject.getDictionaryType();
                                                if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionaryType":');
                                                    this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getTypeDefinitionJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var subdictionaryType = selfObject.getDictionaryType();
                                        if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                            var subPath_dictionaryType = subdictionaryType.path();
                                            if (subPath_dictionaryType !== null && subPath_dictionaryType !== undefined) {
                                                subResult.put(subdictionaryType, subPath_dictionaryType);
                                            }
                                            else {
                                                subResult.put(subdictionaryType, previousAddr + '/@dictionaryType');
                                            }
                                            subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType, previousAddr + '/@dictionaryType'));
                                        }
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 7; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ComponentType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ComponentTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getComponentTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ServicePortType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ServicePortTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getServicePortTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 2)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.MessagePortType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.MessagePortTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getMessagePortTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 3)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ChannelType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ChannelTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getChannelTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 4)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.GroupType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.GroupTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getGroupTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 5)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.NodeType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.NodeTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getNodeTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 6) {
                                            }
                                        }
                                        tmp$2;
                                        return subResult;
                                    },
                                    TypeDefinitiontoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 7; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ComponentType)) {
                                                    {
                                                        tmp$2 = this.ComponentTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ServicePortType)) {
                                                    {
                                                        tmp$2 = this.ServicePortTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 2)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.MessagePortType)) {
                                                    {
                                                        tmp$2 = this.MessagePortTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 3)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ChannelType)) {
                                                    {
                                                        tmp$2 = this.ChannelTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 4)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.GroupType)) {
                                                    {
                                                        tmp$2 = this.GroupTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 5)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.NodeType)) {
                                                    {
                                                        tmp$2 = this.NodeTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 6) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:TypeDefinition" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "factoryBean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getFactoryBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "bean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBean());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "deployUnits": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference TypeDefinition/deployUnits ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getSuperTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "superTypes": [');
                                                    var firstItLoop_0 = true;
                                                    {
                                                        var tmp$4 = selfObject.getSuperTypes().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var sub_0 = tmp$4.next();
                                                            if (!firstItLoop_0) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_0 = addrs.get(sub_0);
                                                            if (subsub_0 !== null && subsub_0 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_0);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference TypeDefinition/superTypes ');
                                                            }
                                                            firstItLoop_0 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionaryType = selfObject.getDictionaryType();
                                                if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionaryType":');
                                                    this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getInstanceJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var subdictionary = selfObject.getDictionary();
                                        if (subdictionary !== null && subdictionary !== undefined) {
                                            var subPath_dictionary = subdictionary.path();
                                            if (subPath_dictionary !== null && subPath_dictionary !== undefined) {
                                                subResult.put(subdictionary, subPath_dictionary);
                                            }
                                            else {
                                                subResult.put(subdictionary, previousAddr + '/@dictionary');
                                            }
                                            subResult.putAll(this.getDictionaryJsonAddr(subdictionary, previousAddr + '/@dictionary'));
                                        }
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 5; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ComponentInstance) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ComponentInstanceImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getComponentInstanceJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ContainerNode) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ContainerNodeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getContainerNodeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 2)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Channel) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ChannelImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getChannelJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 3)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Group) || Kotlin.isType(tmp$0, _.org.kevoree.impl.GroupImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getGroupJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 4) {
                                            }
                                        }
                                        tmp$2;
                                        return subResult;
                                    },
                                    InstancetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 5; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ComponentInstance)) {
                                                    {
                                                        tmp$2 = this.ComponentInstancetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ContainerNode)) {
                                                    {
                                                        tmp$2 = this.ContainerNodetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 2)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Channel)) {
                                                    {
                                                        tmp$2 = this.ChanneltoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 3)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.Group)) {
                                                    {
                                                        tmp$2 = this.GrouptoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 4) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:Instance" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getMetaData().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "metaData":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getMetaData());
                                                    ostream.print_0('"');
                                                }
                                                var subsubtypeDefinition = selfObject.getTypeDefinition();
                                                if (subsubtypeDefinition !== null && subsubtypeDefinition !== undefined) {
                                                    var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                                                    if (subsubsubtypeDefinition !== null && subsubsubtypeDefinition !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF Instance Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                                                    }
                                                }
                                                var subdictionary = selfObject.getDictionary();
                                                if (subdictionary !== null && subdictionary !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionary":');
                                                    this.DictionarytoJson(subdictionary, addrs, ostream);
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getLifeCycleTypeDefinitionJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var subdictionaryType = selfObject.getDictionaryType();
                                        if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                            var subPath_dictionaryType = subdictionaryType.path();
                                            if (subPath_dictionaryType !== null && subPath_dictionaryType !== undefined) {
                                                subResult.put(subdictionaryType, subPath_dictionaryType);
                                            }
                                            else {
                                                subResult.put(subdictionaryType, previousAddr + '/@dictionaryType');
                                            }
                                            subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType, previousAddr + '/@dictionaryType'));
                                        }
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 5; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ComponentType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ComponentTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getComponentTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ChannelType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.ChannelTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getChannelTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 2)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.GroupType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.GroupTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getGroupTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 3)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.NodeType) || Kotlin.isType(tmp$0, _.org.kevoree.impl.NodeTypeImpl)) {
                                                    {
                                                        tmp$2 = subResult.putAll(this.getNodeTypeJsonAddr(selfObject, previousAddr));
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 4) {
                                            }
                                        }
                                        tmp$2;
                                        return subResult;
                                    },
                                    LifeCycleTypeDefinitiontoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 5; ++tmp$1) {
                                            if (tmp$1 === 0)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ComponentType)) {
                                                    {
                                                        tmp$2 = this.ComponentTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 1)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.ChannelType)) {
                                                    {
                                                        tmp$2 = this.ChannelTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 2)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.GroupType)) {
                                                    {
                                                        tmp$2 = this.GroupTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 3)
                                                if (Kotlin.isType(tmp$0, _.org.kevoree.NodeType)) {
                                                    {
                                                        tmp$2 = this.NodeTypetoJson(selfObject, addrs, ostream);
                                                    }
                                                    break;
                                                }
                                            if (tmp$1 === 4) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:LifeCycleTypeDefinition" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "factoryBean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getFactoryBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "bean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "startMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStartMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "stopMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStopMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "updateMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getUpdateMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "deployUnits": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference LifeCycleTypeDefinition/deployUnits ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getSuperTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "superTypes": [');
                                                    var firstItLoop_0 = true;
                                                    {
                                                        var tmp$4 = selfObject.getSuperTypes().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var sub_0 = tmp$4.next();
                                                            if (!firstItLoop_0) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_0 = addrs.get(sub_0);
                                                            if (subsub_0 !== null && subsub_0 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_0);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference LifeCycleTypeDefinition/superTypes ');
                                                            }
                                                            firstItLoop_0 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionaryType = selfObject.getDictionaryType();
                                                if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionaryType":');
                                                    this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getGroupJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var subdictionary = selfObject.getDictionary();
                                        if (subdictionary !== null && subdictionary !== undefined) {
                                            var subPath_dictionary = subdictionary.path();
                                            if (subPath_dictionary !== null && subPath_dictionary !== undefined) {
                                                subResult.put(subdictionary, subPath_dictionary);
                                            }
                                            else {
                                                subResult.put(subdictionary, previousAddr + '/@dictionary');
                                            }
                                            subResult.putAll(this.getDictionaryJsonAddr(subdictionary, previousAddr + '/@dictionary'));
                                        }
                                        return subResult;
                                    },
                                    GrouptoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:Group" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getMetaData().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "metaData":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getMetaData());
                                                    ostream.print_0('"');
                                                }
                                                var subsubtypeDefinition = selfObject.getTypeDefinition();
                                                if (subsubtypeDefinition !== null && subsubtypeDefinition !== undefined) {
                                                    var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                                                    if (subsubsubtypeDefinition !== null && subsubsubtypeDefinition !== undefined) {
                                                        ostream.println(',');
                                                        ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                                                    }
                                                    else {
                                                        throw new Kotlin.Exception('KMF Group Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                                                    }
                                                }
                                                if (selfObject.getSubNodes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "subNodes": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getSubNodes().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference Group/subNodes ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionary = selfObject.getDictionary();
                                                if (subdictionary !== null && subdictionary !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionary":');
                                                    this.DictionarytoJson(subdictionary, addrs, ostream);
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getGroupTypeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var subdictionaryType = selfObject.getDictionaryType();
                                        if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                            var subPath_dictionaryType = subdictionaryType.path();
                                            if (subPath_dictionaryType !== null && subPath_dictionaryType !== undefined) {
                                                subResult.put(subdictionaryType, subPath_dictionaryType);
                                            }
                                            else {
                                                subResult.put(subdictionaryType, previousAddr + '/@dictionaryType');
                                            }
                                            subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType, previousAddr + '/@dictionaryType'));
                                        }
                                        return subResult;
                                    },
                                    GroupTypetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:GroupType" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "factoryBean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getFactoryBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "bean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "startMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStartMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "stopMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStopMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "updateMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getUpdateMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "deployUnits": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference GroupType/deployUnits ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getSuperTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "superTypes": [');
                                                    var firstItLoop_0 = true;
                                                    {
                                                        var tmp$4 = selfObject.getSuperTypes().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var sub_0 = tmp$4.next();
                                                            if (!firstItLoop_0) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_0 = addrs.get(sub_0);
                                                            if (subsub_0 !== null && subsub_0 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_0);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference GroupType/superTypes ');
                                                            }
                                                            firstItLoop_0 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionaryType = selfObject.getDictionaryType();
                                                if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionaryType":');
                                                    this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getNodeTypeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        var subdictionaryType = selfObject.getDictionaryType();
                                        if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                            var subPath_dictionaryType = subdictionaryType.path();
                                            if (subPath_dictionaryType !== null && subPath_dictionaryType !== undefined) {
                                                subResult.put(subdictionaryType, subPath_dictionaryType);
                                            }
                                            else {
                                                subResult.put(subdictionaryType, previousAddr + '/@dictionaryType');
                                            }
                                            subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType, previousAddr + '/@dictionaryType'));
                                        }
                                        return subResult;
                                    },
                                    NodeTypetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:NodeType" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "factoryBean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getFactoryBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "bean":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getBean());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "startMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStartMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "stopMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getStopMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "updateMethod":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getUpdateMethod());
                                                    ostream.print_0('"');
                                                }
                                                if (selfObject.getDeployUnits().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "deployUnits": [');
                                                    var firstItLoop = true;
                                                    {
                                                        var tmp$3 = selfObject.getDeployUnits().iterator();
                                                        while (tmp$3.hasNext()) {
                                                            var sub = tmp$3.next();
                                                            if (!firstItLoop) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub = addrs.get(sub);
                                                            if (subsub !== null && subsub !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference NodeType/deployUnits ');
                                                            }
                                                            firstItLoop = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getSuperTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "superTypes": [');
                                                    var firstItLoop_0 = true;
                                                    {
                                                        var tmp$4 = selfObject.getSuperTypes().iterator();
                                                        while (tmp$4.hasNext()) {
                                                            var sub_0 = tmp$4.next();
                                                            if (!firstItLoop_0) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_0 = addrs.get(sub_0);
                                                            if (subsub_0 !== null && subsub_0 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_0);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference NodeType/superTypes ');
                                                            }
                                                            firstItLoop_0 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                if (selfObject.getManagedPrimitiveTypes().size() > 0) {
                                                    ostream.println(',');
                                                    ostream.print(' "managedPrimitiveTypes": [');
                                                    var firstItLoop_1 = true;
                                                    {
                                                        var tmp$5 = selfObject.getManagedPrimitiveTypes().iterator();
                                                        while (tmp$5.hasNext()) {
                                                            var sub_1 = tmp$5.next();
                                                            if (!firstItLoop_1) {
                                                                ostream.println_0(',');
                                                            }
                                                            var subsub_1 = addrs.get(sub_1);
                                                            if (subsub_1 !== null && subsub_1 !== undefined) {
                                                                ostream.print_0('"');
                                                                ostream.print(subsub_1);
                                                                ostream.print_0('"');
                                                            }
                                                            else {
                                                                throw new Kotlin.Exception('KMF Serialization error : non contained reference NodeType/managedPrimitiveTypes ');
                                                            }
                                                            firstItLoop_1 = false;
                                                        }
                                                    }
                                                    ostream.print(']');
                                                }
                                                var subdictionaryType = selfObject.getDictionaryType();
                                                if (subdictionaryType !== null && subdictionaryType !== undefined) {
                                                    ostream.println(',');
                                                    ostream.print('"dictionaryType":');
                                                    this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    },
                                    getAdaptationPrimitiveTypeJsonAddr: function (selfObject, previousAddr) {
                                        var subResult = new Kotlin.HashMap(0);
                                        if (Kotlin.equals(previousAddr, '/')) {
                                            subResult.put(selfObject, '/');
                                        }
                                        return subResult;
                                    },
                                    AdaptationPrimitiveTypetoJson: function (selfObject, addrs, ostream) {
                                        var tmp$0, tmp$1, tmp$2;
                                        for (tmp$1 = 0, tmp$0 = selfObject; tmp$1 < 1; ++tmp$1) {
                                            if (tmp$1 === 0) {
                                                ostream.print_0('{');
                                                ostream.print(' "eClass":"org.kevoree:AdaptationPrimitiveType" ');
                                                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                                                    ostream.println(',');
                                                    ostream.print(' "name":');
                                                    ostream.print('"');
                                                    this.escapeJson(ostream, selfObject.getName());
                                                    ostream.print_0('"');
                                                }
                                                tmp$2 = ostream.println('}');
                                            }
                                        }
                                        tmp$2;
                                    }
                                })
                            }),
                            cloner: Kotlin.definePackage({
                                ModelCloner: Kotlin.createClass({
                                    initialize: function () {
                                        this.$mainFactory = new _.org.kevoree.factory.MainFactory();
                                    },
                                    clone: function (o) {
                                        return this.clone_0(o, false);
                                    },
                                    clone_0: function (o, readOnly) {
                                        return this.clone_1(o, readOnly, false);
                                    },
                                    cloneMutableOnly: function (o, readOnly) {
                                        return this.clone_1(o, readOnly, true);
                                    },
                                    clone_1: function (o, readOnly, mutableOnly) {
                                        if (Kotlin.isType(o, _.org.kevoree.ContainerRoot)) {
                                            var context = new Kotlin.HashMap(0);
                                            o.getClonelazy(context, this.get_mainFactory(), mutableOnly);
                                            return o.resolve(context, readOnly, mutableOnly);
                                        }
                                        else {
                                            return null;
                                        }
                                    },
                                    get_mainFactory: function () {
                                        return this.$mainFactory;
                                    },
                                    set_mainFactory: function (tmp$0) {
                                        this.$mainFactory = tmp$0;
                                    },
                                    setKevoreeFactory: function (fct) {
                                        this.get_mainFactory().setKevoreeFactory(fct);
                                    }
                                })
                            }),
                            factory: Kotlin.definePackage({
                                MainFactory: Kotlin.createClass({
                                    initialize: function () {
                                        this.$factories = Kotlin.arrayFromFun(1, function (i) {
                                            return new _.jet.Any();
                                        });
                                        {
                                            this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()] = new _.org.kevoree.impl.DefaultKevoreeFactory();
                                        }
                                    },
                                    get_factories: function () {
                                        return this.$factories;
                                    },
                                    set_factories: function (tmp$0) {
                                        this.$factories = tmp$0;
                                    },
                                    getFactoryForPackage: function (pack) {
                                        return this.get_factories()[pack];
                                    },
                                    getKevoreeFactory: function () {
                                        return this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()];
                                    },
                                    setKevoreeFactory: function (fct) {
                                        this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()] = fct;
                                    }
                                })
                            })
                        }),
                        w3c: Kotlin.definePackage({
                            dom: Kotlin.definePackage({
                                events: Kotlin.definePackage({
                                    EventListener: classes.c2b
                                })
                            })
                        })
                    }),
                    java: Kotlin.definePackage({
                        io: Kotlin.definePackage({
                            PrintStream: Kotlin.createClass({
                                initialize: function (oo) {
                                    this.$oo = oo;
                                    this.$result = '';
                                },
                                get_oo: function () {
                                    return this.$oo;
                                },
                                get_result: function () {
                                    return this.$result;
                                },
                                set_result: function (tmp$0) {
                                    this.$result = tmp$0;
                                },
                                println_1: function () {
                                    this.set_result(this.get_result() + '\n');
                                },
                                print: function (s) {
                                    this.set_result(this.get_result() + s);
                                },
                                println_0: function (s) {
                                    this.print(s);
                                    this.println_1();
                                },
                                print_0: function (s) {
                                    this.set_result(this.get_result() + s);
                                },
                                print_2: function (s) {
                                    this.set_result(this.get_result() + s);
                                },
                                print_1: function (s) {
                                    if (s) {
                                        this.set_result(this.get_result() + 'true');
                                    }
                                    else {
                                        this.set_result(this.get_result() + 'false');
                                    }
                                },
                                println: function (s) {
                                    this.print_0(s);
                                    this.println_1();
                                },
                                flush: function () {
                                    this.get_oo().set_result(this.get_result());
                                },
                                close: function () {
                                }
                            }),
                            OutputStream: Kotlin.createClass({
                                initialize: function () {
                                    this.$result = '';
                                },
                                flush: function () {
                                },
                                close: function () {
                                },
                                get_result: function () {
                                    return this.$result;
                                },
                                set_result: function (tmp$0) {
                                    this.$result = tmp$0;
                                }
                            })
                        }),
                        util: Kotlin.definePackage({
                            Collections: Kotlin.definePackage({
                            })
                        })
                    }),
                    js: Kotlin.definePackage({
                        lastIndexOf: function (receiver, ch, fromIndex) {
                            return receiver.lastIndexOf(ch.toString(), fromIndex);
                        },
                        lastIndexOf_0: function (receiver, ch) {
                            return receiver.lastIndexOf(ch.toString());
                        },
                        indexOf: function (receiver, ch) {
                            return receiver.indexOf(ch.toString());
                        },
                        indexOf_0: function (receiver, ch, fromIndex) {
                            return receiver.indexOf(ch.toString(), fromIndex);
                        },
                        matches: function (receiver, regex) {
                            var result = receiver.match(regex);
                            return result !== null && result !== undefined && result.length > 0;
                        },
                        length: function (receiver) {
                            return receiver.length;
                        },
                        get_size: function (receiver) {
                            return receiver.length;
                        },
                        startsWith: function (receiver, ch) {
                            return _.js.get_size(receiver) > 0 ? receiver.charAt(0) === ch : false;
                        },
                        endsWith: function (receiver, ch) {
                            var s = _.js.get_size(receiver);
                            return s > 0 ? receiver.charAt(s - 1) === ch : false;
                        },
                        startsWith_0: function (receiver, text) {
                            var size = text.length;
                            var tmp$0;
                            if (size <= receiver.length) {
                                tmp$0 = Kotlin.equals(receiver.substring(0, size), text);
                            }
                            else
                                tmp$0 = false;
                            return tmp$0;
                        },
                        endsWith_0: function (receiver, text) {
                            var matchSize = text.length;
                            var thisSize = receiver.length;
                            var tmp$0;
                            if (matchSize <= thisSize) {
                                tmp$0 = Kotlin.equals(receiver.substring(thisSize - matchSize, thisSize), text);
                            }
                            else
                                tmp$0 = false;
                            return tmp$0;
                        },
                        capitalize: function (receiver) {
                            return _.kotlin.notEmpty(receiver) ? receiver.substring(0, 1).toUpperCase() + receiver.substring(1) : receiver;
                        },
                        decapitalize: function (receiver) {
                            return _.kotlin.notEmpty(receiver) ? receiver.substring(0, 1).toLowerCase() + receiver.substring(1) : receiver;
                        }
                    }),
                    kotlin: Kotlin.definePackage({
                        support: Kotlin.definePackage({
                            AbstractIterator: classes.c2c
                        }),
                        notEmpty_0: function (receiver) {
                            return !_.kotlin.isEmpty(receiver);
                        },
                        isEmpty: function (receiver) {
                            return receiver.length === 0;
                        },
                        orEmpty: function (receiver) {
                            return receiver !== null && receiver !== undefined ? receiver : Kotlin.array([]);
                        },
                        get_lastIndex: function (receiver) {
                            return receiver.length - 1;
                        },
                        get_lastIndex_0: function (receiver) {
                            return receiver.length - 1;
                        },
                        get_lastIndex_1: function (receiver) {
                            return receiver.length - 1;
                        },
                        get_lastIndex_2: function (receiver) {
                            return receiver.length - 1;
                        },
                        get_lastIndex_3: function (receiver) {
                            return receiver.length - 1;
                        },
                        get_lastIndex_4: function (receiver) {
                            return receiver.length - 1;
                        },
                        get_lastIndex_5: function (receiver) {
                            return receiver.length - 1;
                        },
                        get_lastIndex_6: function (receiver) {
                            return receiver.length - 1;
                        },
                        get_lastIndex_7: function (receiver) {
                            return receiver.length - 1;
                        },
                        count: function (receiver) {
                            if (Kotlin.isType(receiver, _.jet.Collection)) {
                                return receiver.size();
                            }
                            var number = 0;
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var elem = tmp$0.next();
                                    ++number;
                                }
                            }
                            return number;
                        },
                        countTo: function (n) {
                            var count = 0;
                            return function (it) {
                                ++count;
                                return count <= n;
                            };
                        },
                        first: function (receiver) {
                            if (Kotlin.isType(receiver, _.jet.List)) {
                                return _.kotlin.first(receiver);
                            }
                            return receiver.iterator().next();
                        },
                        containsItem: function (receiver, item) {
                            if (Kotlin.isType(receiver, Kotlin.AbstractCollection)) {
                                return receiver.contains(item);
                            }
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var elem = tmp$0.next();
                                    if (Kotlin.equals(elem, item)) {
                                        return true;
                                    }
                                }
                            }
                            return false;
                        },
                        sort: function (receiver) {
                            var list = _.kotlin.toCollection(receiver, new Kotlin.ArrayList(0));
                            Kotlin.collectionsSort(list);
                            return list;
                        },
                        sort_0: function (receiver, comparator) {
                            var list = _.kotlin.toCollection(receiver, new Kotlin.ArrayList(0));
                            Kotlin.collectionsSort(list, comparator);
                            return list;
                        },
                        iterate: function (nextFunction) {
                            return new _.kotlin.FunctionIterator(nextFunction);
                        },
                        FilterIterator: Kotlin.createClass(classes.c2c, {
                            initialize: function (iterator, predicate) {
                                this.$iterator = iterator;
                                this.$predicate = predicate;
                                this.super_init();
                            },
                            get_iterator: function () {
                                return this.$iterator;
                            },
                            get_predicate: function () {
                                return this.$predicate;
                            },
                            computeNext: function () {
                                while (this.get_iterator().hasNext()) {
                                    var next = this.get_iterator().next();
                                    if (this.get_predicate()(next)) {
                                        this.setNext(next);
                                        return;
                                    }
                                }
                                this.done();
                            }
                        }),
                        FilterNotNullIterator: Kotlin.createClass(classes.c2c, {
                            initialize: function (iterator) {
                                this.$iterator = iterator;
                                this.super_init();
                            },
                            get_iterator: function () {
                                return this.$iterator;
                            },
                            computeNext: function () {
                                if (this.get_iterator() !== null && this.get_iterator() !== undefined) {
                                    while (this.get_iterator().hasNext()) {
                                        var next = this.get_iterator().next();
                                        if (next !== null && next !== undefined) {
                                            this.setNext(next);
                                            return;
                                        }
                                    }
                                }
                                this.done();
                            }
                        }),
                        MapIterator: Kotlin.createClass(classes.c2c, {
                            initialize: function (iterator, transform) {
                                this.$iterator = iterator;
                                this.$transform = transform;
                                this.super_init();
                            },
                            get_iterator: function () {
                                return this.$iterator;
                            },
                            get_transform: function () {
                                return this.$transform;
                            },
                            computeNext: function () {
                                if (this.get_iterator().hasNext()) {
                                    this.setNext(this.get_transform()(this.get_iterator().next()));
                                }
                                else {
                                    this.done();
                                }
                            }
                        }),
                        FlatMapIterator: Kotlin.createClass(classes.c2c, {
                            initialize: function (iterator, transform) {
                                this.$iterator = iterator;
                                this.$transform = transform;
                                this.super_init();
                                this.$transformed = _.kotlin.iterate(function () {
                                    return null;
                                });
                            },
                            get_iterator: function () {
                                return this.$iterator;
                            },
                            get_transform: function () {
                                return this.$transform;
                            },
                            get_transformed: function () {
                                return this.$transformed;
                            },
                            set_transformed: function (tmp$0) {
                                this.$transformed = tmp$0;
                            },
                            computeNext: function () {
                                while (true) {
                                    if (this.get_transformed().hasNext()) {
                                        this.setNext(this.get_transformed().next());
                                        return;
                                    }
                                    if (this.get_iterator().hasNext()) {
                                        this.set_transformed(this.get_transform()(this.get_iterator().next()));
                                    }
                                    else {
                                        this.done();
                                        return;
                                    }
                                }
                            }
                        }),
                        TakeWhileIterator: Kotlin.createClass(classes.c2c, {
                            initialize: function (iterator, predicate) {
                                this.$iterator = iterator;
                                this.$predicate = predicate;
                                this.super_init();
                            },
                            get_iterator: function () {
                                return this.$iterator;
                            },
                            get_predicate: function () {
                                return this.$predicate;
                            },
                            computeNext: function () {
                                if (this.get_iterator().hasNext()) {
                                    var item = this.get_iterator().next();
                                    if (this.get_predicate()(item)) {
                                        this.setNext(item);
                                        return;
                                    }
                                }
                                this.done();
                            }
                        }),
                        FunctionIterator: Kotlin.createClass(classes.c2c, {
                            initialize: function (nextFunction) {
                                this.$nextFunction = nextFunction;
                                this.super_init();
                            },
                            get_nextFunction: function () {
                                return this.$nextFunction;
                            },
                            computeNext: function () {
                                var next = this.get_nextFunction()();
                                if (next === null || next === undefined) {
                                    this.done();
                                }
                                else {
                                    this.setNext(next);
                                }
                            }
                        }),
                        CompositeIterator: Kotlin.createClass(classes.c2c, {
                            initialize: function (iterators) {
                                this.super_init();
                                this.$iteratorsIter = Kotlin.arrayIterator(iterators);
                                this.$currentIter = null;
                            },
                            get_iteratorsIter: function () {
                                return this.$iteratorsIter;
                            },
                            get_currentIter: function () {
                                return this.$currentIter;
                            },
                            set_currentIter: function (tmp$0) {
                                this.$currentIter = tmp$0;
                            },
                            computeNext: function () {
                                while (true) {
                                    if (this.get_currentIter() === null || this.get_currentIter() === undefined) {
                                        if (this.get_iteratorsIter().hasNext()) {
                                            this.set_currentIter(this.get_iteratorsIter().next());
                                        }
                                        else {
                                            this.done();
                                            return;
                                        }
                                    }
                                    var iter = this.get_currentIter();
                                    if (iter !== null && iter !== undefined) {
                                        if (iter.hasNext()) {
                                            this.setNext(iter.next());
                                            return;
                                        }
                                        else {
                                            this.set_currentIter(null);
                                        }
                                    }
                                }
                            }
                        }),
                        SingleIterator: Kotlin.createClass(classes.c2c, {
                            initialize: function (value) {
                                this.$value = value;
                                this.super_init();
                                this.$first = true;
                            },
                            get_value: function () {
                                return this.$value;
                            },
                            get_first: function () {
                                return this.$first;
                            },
                            set_first: function (tmp$0) {
                                this.$first = tmp$0;
                            },
                            computeNext: function () {
                                if (this.get_first()) {
                                    this.set_first(false);
                                    this.setNext(this.get_value());
                                }
                                else {
                                    this.done();
                                }
                            }
                        }),
                        IndexIterator: Kotlin.createClass(Kotlin.Iterator, {
                            initialize: function (iterator) {
                                this.$iterator = iterator;
                                this.$index = 0;
                            },
                            get_iterator: function () {
                                return this.$iterator;
                            },
                            get_index: function () {
                                return this.$index;
                            },
                            set_index: function (tmp$0) {
                                this.$index = tmp$0;
                            },
                            next: function () {
                                var tmp$0, tmp$1;
                                return new _.kotlin.Pair((tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1), this.get_iterator().next());
                            },
                            hasNext: function () {
                                return this.get_iterator().hasNext();
                            }
                        }),
                        get_size: function (receiver) {
                            return receiver.size();
                        },
                        get_empty: function (receiver) {
                            return receiver.isEmpty();
                        },
                        get_indices: function (receiver) {
                            return new Kotlin.NumberRange(0, _.kotlin.get_size(receiver) - 1);
                        },
                        get_indices_0: function (receiver) {
                            return new Kotlin.NumberRange(0, receiver - 1);
                        },
                        notEmpty_1: function (receiver) {
                            return !receiver.isEmpty();
                        },
                        orEmpty_0: function (receiver) {
                            return receiver !== null && receiver !== undefined ? receiver : Kotlin.emptyList();
                        },
                        toSortedList: function (receiver) {
                            return _.kotlin.sort(_.kotlin.toCollection(receiver, new Kotlin.ArrayList(0)));
                        },
                        toSortedList_0: function (receiver, comparator) {
                            return _.kotlin.sort_0(_.kotlin.toList(receiver), comparator);
                        },
                        orEmpty_1: function (receiver) {
                            return receiver !== null && receiver !== undefined ? receiver : Kotlin.emptyList();
                        },
                        get_first: function (receiver) {
                            return _.kotlin.get_head(receiver);
                        },
                        get_last: function (receiver) {
                            var s = _.kotlin.get_size(receiver);
                            return s > 0 ? receiver.get(s - 1) : null;
                        },
                        get_lastIndex_8: function (receiver) {
                            return _.kotlin.get_size(receiver) - 1;
                        },
                        get_head: function (receiver) {
                            return receiver.get(0);
                        },
                        get_tail: function (receiver) {
                            return _.kotlin.drop(receiver, 1);
                        },
                        get_size_0: function (receiver) {
                            return receiver.size();
                        },
                        get_empty_0: function (receiver) {
                            return receiver.isEmpty();
                        },
                        set: function (receiver, key, value) {
                            return receiver.put(key, value);
                        },
                        orEmpty_2: function (receiver) {
                            return receiver !== null && receiver !== undefined ? receiver : Kotlin.emptyMap();
                        },
                        get_key: function (receiver) {
                            return receiver.getKey();
                        },
                        get_value: function (receiver) {
                            return receiver.getValue();
                        },
                        component1: function (receiver) {
                            return receiver.getKey();
                        },
                        component2: function (receiver) {
                            return receiver.getValue();
                        },
                        getOrElse: function (receiver, key, defaultValue) {
                            if (receiver.containsKey(key)) {
                                return receiver.get(key);
                            }
                            else {
                                return defaultValue.call(this);
                            }
                        },
                        getOrPut: function (receiver, key, defaultValue) {
                            if (receiver.containsKey(key)) {
                                return receiver.get(key);
                            }
                            else {
                                var answer = defaultValue.call(this);
                                receiver.put(key, answer);
                                return answer;
                            }
                        },
                        iterator: function (receiver) {
                            var entrySet = receiver.entrySet();
                            return entrySet.iterator();
                        },
                        mapTo: function (receiver, result, transform) {
                            {
                                var tmp$0 = _.kotlin.iterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var item = tmp$0.next();
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        mapValuesTo: function (receiver, result, transform) {
                            {
                                var tmp$0 = _.kotlin.iterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var e = tmp$0.next();
                                    var newValue = transform.call(this, e);
                                    result.put(_.kotlin.get_key(e), newValue);
                                }
                            }
                            return result;
                        },
                        putAll: function (receiver, values) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = values, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var v = tmp$0[tmp$2];
                                    {
                                        receiver.put(v.get_first(), v.get_second());
                                    }
                                }
                            }
                        },
                        toMap: function (receiver, map) {
                            map.putAll(receiver);
                            return map;
                        },
                        map_0: function (receiver, transform) {
                            return _.kotlin.mapTo(receiver, new Kotlin.ArrayList(_.kotlin.get_size_0(receiver)), transform);
                        },
                        mapValues: function (receiver, transform) {
                            return _.kotlin.mapValuesTo(receiver, new Kotlin.HashMap(_.kotlin.get_size_0(receiver)), transform);
                        },
                        require: function (value, message) {
                            if (!value) {
                                throw new Kotlin.IllegalArgumentException(message.toString());
                            }
                        },
                        require_0: function (value, lazyMessage) {
                            if (!value) {
                                var message = lazyMessage();
                                throw new Kotlin.IllegalArgumentException(message.toString());
                            }
                        },
                        requireNotNull: function (value, message) {
                            if (value === null || value === undefined) {
                                throw new Kotlin.IllegalArgumentException(message.toString());
                            }
                            else {
                                return value;
                            }
                        },
                        check: function (value, message) {
                            if (!value) {
                                throw new Kotlin.IllegalStateException(message.toString());
                            }
                        },
                        check_0: function (value, lazyMessage) {
                            if (!value) {
                                var message = lazyMessage();
                                throw new Kotlin.IllegalStateException(message.toString());
                            }
                        },
                        checkNotNull: function (value, message) {
                            if (value === null || value === undefined) {
                                throw new Kotlin.IllegalStateException(message);
                            }
                            else {
                                return value;
                            }
                        },
                        iterator_0: function (receiver) {
                            return Kotlin.createObject(Kotlin.Iterator, {
                                initialize: function () {
                                },
                                hasNext: function () {
                                    return receiver.hasMoreElements();
                                },
                                next: function () {
                                    return receiver.nextElement();
                                }
                            });
                        },
                        toArrayList: function (receiver) {
                            return _.kotlin.toCollection_0(receiver, new Kotlin.ArrayList(0));
                        },
                        toHashSet: function (receiver) {
                            return _.kotlin.toCollection_0(receiver, new Kotlin.HashSet());
                        },
                        to: function (receiver, that) {
                            return new _.kotlin.Pair(receiver, that);
                        },
                        run: function (f) {
                            return f();
                        },
                        with: function (receiver, f) {
                            return f.call(receiver);
                        },
                        let: function (receiver, f) {
                            return f.call(this, receiver);
                        },
                        trim: function (receiver, text) {
                            return _.kotlin.trimTrailing(_.kotlin.trimLeading(receiver, text), text);
                        },
                        trim_0: function (receiver, prefix, postfix) {
                            return _.kotlin.trimTrailing(_.kotlin.trimLeading(receiver, prefix), postfix);
                        },
                        trimLeading: function (receiver, prefix) {
                            var answer = receiver;
                            if (_.js.startsWith_0(answer, prefix)) {
                                answer = answer.substring(_.js.length(prefix));
                            }
                            return answer;
                        },
                        trimTrailing: function (receiver, postfix) {
                            var answer = receiver;
                            if (_.js.endsWith_0(answer, postfix)) {
                                answer = answer.substring(0, _.js.length(receiver) - _.js.length(postfix));
                            }
                            return answer;
                        },
                        notEmpty: function (receiver) {
                            return receiver !== null && receiver !== undefined && _.js.length(receiver) > 0;
                        },
                        iterator_1: function (receiver) {
                            return Kotlin.createObject(_.jet.CharIterator, {
                                initialize: function () {
                                    this.super_init();
                                    this.$index = 0;
                                },
                                get_index: function () {
                                    return this.$index;
                                },
                                set_index: function (tmp$0) {
                                    this.$index = tmp$0;
                                },
                                nextChar: function () {
                                    var tmp$0, tmp$1;
                                    return receiver.get((tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1));
                                },
                                hasNext: function () {
                                    return this.get_index() < receiver.length;
                                }
                            });
                        },
                        orEmpty_3: function (receiver) {
                            return receiver !== null ? receiver : '';
                        },
                        get_size_1: function (receiver) {
                            return receiver.length;
                        },
                        count_0: function (receiver, predicate) {
                            var answer = 0;
                            {
                                var tmp$0 = _.kotlin.iterator_1(receiver);
                                while (tmp$0.hasNext()) {
                                    var c = tmp$0.next();
                                    if (predicate.call(this, c)) {
                                        answer++;
                                    }
                                }
                            }
                            return answer;
                        },
                        all: function (receiver, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any: function (receiver, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_1: function (receiver, predicate) {
                            var count = 0;
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find: function (receiver, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filter_0: function (receiver, predicate) {
                            return _.kotlin.filterTo(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterTo: function (receiver, result, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNot: function (receiver, predicate) {
                            return _.kotlin.filterNotTo(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNotTo: function (receiver, result, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNotNull: function (receiver) {
                            return _.kotlin.filterNotNullTo(receiver, new Kotlin.ArrayList(0));
                        },
                        filterNotNullTo: function (receiver, result) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (element !== null && element !== undefined)
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        if (predicate.call(this, element)) {
                                            first.add(element);
                                        }
                                        else {
                                            second.add(element);
                                        }
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        map_1: function (receiver, transform) {
                            return _.kotlin.mapTo_0(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        mapTo_0: function (receiver, result, transform) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var item = tmp$0[tmp$2];
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMap: function (receiver, transform) {
                            return _.kotlin.flatMapTo(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        flatMapTo: function (receiver, result, transform) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        var list = transform.call(this, element);
                                        {
                                            var tmp$3 = list.iterator();
                                            while (tmp$3.hasNext()) {
                                                var r = tmp$3.next();
                                                result.add(r);
                                            }
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach: function (receiver, operation) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold: function (receiver, initial, operation) {
                            var answer = initial;
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        foldRight: function (receiver, initial, operation) {
                            var r = initial;
                            var index = receiver.length - 1;
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        reduce: function (receiver, operation) {
                            var iterator = Kotlin.arrayIterator(receiver);
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        reduceRight: function (receiver, operation) {
                            var index = receiver.length - 1;
                            if (index < 0) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var r = receiver[index--];
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        groupBy: function (receiver, toKey) {
                            return _.kotlin.groupByTo(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo: function (receiver, result, toKey) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        var key = toKey.call(this, element);
                                        var list = _.kotlin.getOrPut(result, key, _f.f8);
                                        list.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        drop_0: function (receiver, n) {
                            return _.kotlin.dropWhile(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo: function (receiver, result, predicate) {
                            var start = true;
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        if (start && predicate.call(this, element)) {
                                        }
                                        else {
                                            start = false;
                                            result.add(element);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        take: function (receiver, n) {
                            return _.kotlin.takeWhile(receiver, _.kotlin.countTo(n));
                        },
                        takeWhile: function (receiver, predicate) {
                            return _.kotlin.takeWhileTo(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        takeWhileTo: function (receiver, result, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection_1: function (receiver, result) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse: function (receiver) {
                            var list = _.kotlin.toCollection_1(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList: function (receiver) {
                            return _.kotlin.toCollection_1(receiver, new Kotlin.LinkedList());
                        },
                        toList_0: function (receiver) {
                            return _.kotlin.toCollection_1(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet: function (receiver) {
                            return _.kotlin.toCollection_1(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet: function (receiver) {
                            return _.kotlin.toCollection_1(receiver, new Kotlin.TreeSet());
                        },
                        requireNoNulls: function (receiver) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        if (element === null || element === undefined) {
                                            throw new Kotlin.IllegalArgumentException('null element found in ' + receiver.toString());
                                        }
                                    }
                                }
                            }
                            return receiver;
                        },
                        plus: function (receiver, element) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_1(receiver, answer);
                            answer.add(element);
                            return answer;
                        },
                        plus_0: function (receiver, iterator) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_1(receiver, answer);
                            {
                                var tmp$0 = iterator;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer.add(element);
                                }
                            }
                            return answer;
                        },
                        plus_1: function (receiver, collection) {
                            return _.kotlin.plus_0(receiver, collection.iterator());
                        },
                        withIndices: function (receiver) {
                            return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
                        },
                        sortBy: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection_1(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.f9, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        if (++count > 1)
                                            buffer.append(separator);
                                        if (limit < 0 || count <= limit) {
                                            var text = element === null || element === undefined ? 'null' : element.toString();
                                            buffer.append(text);
                                        }
                                        else
                                            break;
                                    }
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        all_0: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any_0: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_2: function (receiver, predicate) {
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find_0: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filter_1: function (receiver, predicate) {
                            return _.kotlin.filterTo_0(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterTo_0: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNot_0: function (receiver, predicate) {
                            return _.kotlin.filterNotTo_0(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNotTo_0: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition_0: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element)) {
                                        first.add(element);
                                    }
                                    else {
                                        second.add(element);
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        map_2: function (receiver, transform) {
                            return _.kotlin.mapTo_1(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        mapTo_1: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var item = tmp$0.next();
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMap_0: function (receiver, transform) {
                            return _.kotlin.flatMapTo_0(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        flatMapTo_0: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var list = transform.call(this, element);
                                    {
                                        var tmp$1 = list.iterator();
                                        while (tmp$1.hasNext()) {
                                            var r = tmp$1.next();
                                            result.add(r);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach_0: function (receiver, operation) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold_0: function (receiver, initial, operation) {
                            var answer = initial;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        foldRight_0: function (receiver, initial, operation) {
                            var r = initial;
                            var index = receiver.length - 1;
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        reduce_0: function (receiver, operation) {
                            var iterator = Kotlin.arrayIterator(receiver);
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        reduceRight_0: function (receiver, operation) {
                            var index = receiver.length - 1;
                            if (index < 0) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var r = receiver[index--];
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        groupBy_0: function (receiver, toKey) {
                            return _.kotlin.groupByTo_0(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo_0: function (receiver, result, toKey) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var key = toKey.call(this, element);
                                    var list = _.kotlin.getOrPut(result, key, _f.fa);
                                    list.add(element);
                                }
                            }
                            return result;
                        },
                        drop_1: function (receiver, n) {
                            return _.kotlin.dropWhile_0(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile_0: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo_0(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo_0: function (receiver, result, predicate) {
                            var start = true;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (start && predicate.call(this, element)) {
                                    }
                                    else {
                                        start = false;
                                        result.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        take_0: function (receiver, n) {
                            return _.kotlin.takeWhile_0(receiver, _.kotlin.countTo(n));
                        },
                        takeWhile_0: function (receiver, predicate) {
                            return _.kotlin.takeWhileTo_0(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        takeWhileTo_0: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection_2: function (receiver, result) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse_0: function (receiver) {
                            var list = _.kotlin.toCollection_2(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList_0: function (receiver) {
                            return _.kotlin.toCollection_2(receiver, new Kotlin.LinkedList());
                        },
                        toList_1: function (receiver) {
                            return _.kotlin.toCollection_2(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet_0: function (receiver) {
                            return _.kotlin.toCollection_2(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet_0: function (receiver) {
                            return _.kotlin.toCollection_2(receiver, new Kotlin.TreeSet());
                        },
                        plus_2: function (receiver, element) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_2(receiver, answer);
                            answer.add(element);
                            return answer;
                        },
                        plus_3: function (receiver, iterator) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_2(receiver, answer);
                            {
                                var tmp$0 = iterator;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer.add(element);
                                }
                            }
                            return answer;
                        },
                        plus_4: function (receiver, collection) {
                            return _.kotlin.plus_3(receiver, collection.iterator());
                        },
                        withIndices_0: function (receiver) {
                            return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
                        },
                        sortBy_0: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection_2(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.fb, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString_0: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (++count > 1)
                                        buffer.append(separator);
                                    if (limit < 0 || count <= limit) {
                                        var text = element === null || element === undefined ? 'null' : element.toString();
                                        buffer.append(text);
                                    }
                                    else
                                        break;
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString_0: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString_0(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        all_1: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any_1: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_3: function (receiver, predicate) {
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find_1: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filter_2: function (receiver, predicate) {
                            return _.kotlin.filterTo_1(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterTo_1: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNot_1: function (receiver, predicate) {
                            return _.kotlin.filterNotTo_1(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNotTo_1: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition_1: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element)) {
                                        first.add(element);
                                    }
                                    else {
                                        second.add(element);
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        map_3: function (receiver, transform) {
                            return _.kotlin.mapTo_2(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        mapTo_2: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var item = tmp$0.next();
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMap_1: function (receiver, transform) {
                            return _.kotlin.flatMapTo_1(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        flatMapTo_1: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var list = transform.call(this, element);
                                    {
                                        var tmp$1 = list.iterator();
                                        while (tmp$1.hasNext()) {
                                            var r = tmp$1.next();
                                            result.add(r);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach_1: function (receiver, operation) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold_1: function (receiver, initial, operation) {
                            var answer = initial;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        foldRight_1: function (receiver, initial, operation) {
                            var r = initial;
                            var index = receiver.length - 1;
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        reduce_1: function (receiver, operation) {
                            var iterator = Kotlin.arrayIterator(receiver);
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        reduceRight_1: function (receiver, operation) {
                            var index = receiver.length - 1;
                            if (index < 0) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var r = receiver[index--];
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        groupBy_1: function (receiver, toKey) {
                            return _.kotlin.groupByTo_1(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo_1: function (receiver, result, toKey) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var key = toKey.call(this, element);
                                    var list = _.kotlin.getOrPut(result, key, _f.fc);
                                    list.add(element);
                                }
                            }
                            return result;
                        },
                        drop_2: function (receiver, n) {
                            return _.kotlin.dropWhile_1(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile_1: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo_1(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo_1: function (receiver, result, predicate) {
                            var start = true;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (start && predicate.call(this, element)) {
                                    }
                                    else {
                                        start = false;
                                        result.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        take_1: function (receiver, n) {
                            return _.kotlin.takeWhile_1(receiver, _.kotlin.countTo(n));
                        },
                        takeWhile_1: function (receiver, predicate) {
                            return _.kotlin.takeWhileTo_1(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        takeWhileTo_1: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection_3: function (receiver, result) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse_1: function (receiver) {
                            var list = _.kotlin.toCollection_3(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList_1: function (receiver) {
                            return _.kotlin.toCollection_3(receiver, new Kotlin.LinkedList());
                        },
                        toList_2: function (receiver) {
                            return _.kotlin.toCollection_3(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet_1: function (receiver) {
                            return _.kotlin.toCollection_3(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet_1: function (receiver) {
                            return _.kotlin.toCollection_3(receiver, new Kotlin.TreeSet());
                        },
                        plus_5: function (receiver, element) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_3(receiver, answer);
                            answer.add(element);
                            return answer;
                        },
                        plus_6: function (receiver, iterator) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_3(receiver, answer);
                            {
                                var tmp$0 = iterator;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer.add(element);
                                }
                            }
                            return answer;
                        },
                        plus_7: function (receiver, collection) {
                            return _.kotlin.plus_6(receiver, collection.iterator());
                        },
                        withIndices_1: function (receiver) {
                            return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
                        },
                        sortBy_1: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection_3(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.fd, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString_1: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (++count > 1)
                                        buffer.append(separator);
                                    if (limit < 0 || count <= limit) {
                                        var text = element === null || element === undefined ? 'null' : element.toString();
                                        buffer.append(text);
                                    }
                                    else
                                        break;
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString_1: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString_1(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        all_2: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any_2: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_4: function (receiver, predicate) {
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find_2: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filter_3: function (receiver, predicate) {
                            return _.kotlin.filterTo_2(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterTo_2: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNot_2: function (receiver, predicate) {
                            return _.kotlin.filterNotTo_2(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNotTo_2: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition_2: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element)) {
                                        first.add(element);
                                    }
                                    else {
                                        second.add(element);
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        map_4: function (receiver, transform) {
                            return _.kotlin.mapTo_3(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        mapTo_3: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var item = tmp$0.next();
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMap_2: function (receiver, transform) {
                            return _.kotlin.flatMapTo_2(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        flatMapTo_2: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var list = transform.call(this, element);
                                    {
                                        var tmp$1 = list.iterator();
                                        while (tmp$1.hasNext()) {
                                            var r = tmp$1.next();
                                            result.add(r);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach_2: function (receiver, operation) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold_2: function (receiver, initial, operation) {
                            var answer = initial;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        foldRight_2: function (receiver, initial, operation) {
                            var r = initial;
                            var index = receiver.length - 1;
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        reduce_2: function (receiver, operation) {
                            var iterator = Kotlin.arrayIterator(receiver);
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        reduceRight_2: function (receiver, operation) {
                            var index = receiver.length - 1;
                            if (index < 0) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var r = receiver[index--];
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        groupBy_2: function (receiver, toKey) {
                            return _.kotlin.groupByTo_2(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo_2: function (receiver, result, toKey) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var key = toKey.call(this, element);
                                    var list = _.kotlin.getOrPut(result, key, _f.fe);
                                    list.add(element);
                                }
                            }
                            return result;
                        },
                        drop_3: function (receiver, n) {
                            return _.kotlin.dropWhile_2(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile_2: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo_2(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo_2: function (receiver, result, predicate) {
                            var start = true;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (start && predicate.call(this, element)) {
                                    }
                                    else {
                                        start = false;
                                        result.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        take_2: function (receiver, n) {
                            return _.kotlin.takeWhile_2(receiver, _.kotlin.countTo(n));
                        },
                        takeWhile_2: function (receiver, predicate) {
                            return _.kotlin.takeWhileTo_2(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        takeWhileTo_2: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection_4: function (receiver, result) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse_2: function (receiver) {
                            var list = _.kotlin.toCollection_4(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList_2: function (receiver) {
                            return _.kotlin.toCollection_4(receiver, new Kotlin.LinkedList());
                        },
                        toList_3: function (receiver) {
                            return _.kotlin.toCollection_4(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet_2: function (receiver) {
                            return _.kotlin.toCollection_4(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet_2: function (receiver) {
                            return _.kotlin.toCollection_4(receiver, new Kotlin.TreeSet());
                        },
                        plus_8: function (receiver, element) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_4(receiver, answer);
                            answer.add(element);
                            return answer;
                        },
                        plus_9: function (receiver, iterator) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_4(receiver, answer);
                            {
                                var tmp$0 = iterator;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer.add(element);
                                }
                            }
                            return answer;
                        },
                        plus_10: function (receiver, collection) {
                            return _.kotlin.plus_9(receiver, collection.iterator());
                        },
                        withIndices_2: function (receiver) {
                            return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
                        },
                        sortBy_2: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection_4(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.ff, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString_2: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (++count > 1)
                                        buffer.append(separator);
                                    if (limit < 0 || count <= limit) {
                                        var text = element === null || element === undefined ? 'null' : element.toString();
                                        buffer.append(text);
                                    }
                                    else
                                        break;
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString_2: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString_2(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        filter: function (receiver, predicate) {
                            return _.kotlin.filterTo_3(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNot_3: function (receiver, predicate) {
                            return _.kotlin.filterNotTo_3(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNotNull_0: function (receiver) {
                            return _.kotlin.filterNotNullTo_0(receiver, new Kotlin.ArrayList(0));
                        },
                        map: function (receiver, transform) {
                            return _.kotlin.mapTo_4(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        flatMap_3: function (receiver, transform) {
                            return _.kotlin.flatMapTo_3(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        take_3: function (receiver, n) {
                            return _.kotlin.takeWhile_3(receiver, _.kotlin.countTo(n));
                        },
                        takeWhile_3: function (receiver, predicate) {
                            return _.kotlin.takeWhileTo_3(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        requireNoNulls_0: function (receiver) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (element === null || element === undefined) {
                                        throw new Kotlin.IllegalArgumentException('null element found in ' + receiver.toString());
                                    }
                                }
                            }
                            return receiver;
                        },
                        plus_11: function (receiver, element) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection(receiver, answer);
                            answer.add(element);
                            return answer;
                        },
                        plus_12: function (receiver, iterator) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection(receiver, answer);
                            {
                                var tmp$0 = iterator;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer.add(element);
                                }
                            }
                            return answer;
                        },
                        plus_13: function (receiver, collection) {
                            return _.kotlin.plus_12(receiver, collection.iterator());
                        },
                        all_3: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any_3: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_5: function (receiver, predicate) {
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find_3: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filter_4: function (receiver, predicate) {
                            return _.kotlin.filterTo_4(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterTo_4: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNot_4: function (receiver, predicate) {
                            return _.kotlin.filterNotTo_4(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNotTo_4: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition_3: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element)) {
                                        first.add(element);
                                    }
                                    else {
                                        second.add(element);
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        map_5: function (receiver, transform) {
                            return _.kotlin.mapTo_5(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        mapTo_5: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var item = tmp$0.next();
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMap_4: function (receiver, transform) {
                            return _.kotlin.flatMapTo_4(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        flatMapTo_4: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var list = transform.call(this, element);
                                    {
                                        var tmp$1 = list.iterator();
                                        while (tmp$1.hasNext()) {
                                            var r = tmp$1.next();
                                            result.add(r);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach_3: function (receiver, operation) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold_3: function (receiver, initial, operation) {
                            var answer = initial;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        foldRight_3: function (receiver, initial, operation) {
                            var r = initial;
                            var index = receiver.length - 1;
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        reduce_3: function (receiver, operation) {
                            var iterator = Kotlin.arrayIterator(receiver);
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        reduceRight_3: function (receiver, operation) {
                            var index = receiver.length - 1;
                            if (index < 0) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var r = receiver[index--];
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        groupBy_3: function (receiver, toKey) {
                            return _.kotlin.groupByTo_3(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo_3: function (receiver, result, toKey) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var key = toKey.call(this, element);
                                    var list = _.kotlin.getOrPut(result, key, _f.fg);
                                    list.add(element);
                                }
                            }
                            return result;
                        },
                        drop_4: function (receiver, n) {
                            return _.kotlin.dropWhile_3(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile_3: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo_3(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo_3: function (receiver, result, predicate) {
                            var start = true;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (start && predicate.call(this, element)) {
                                    }
                                    else {
                                        start = false;
                                        result.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        take_4: function (receiver, n) {
                            return _.kotlin.takeWhile_4(receiver, _.kotlin.countTo(n));
                        },
                        takeWhile_4: function (receiver, predicate) {
                            return _.kotlin.takeWhileTo_4(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        takeWhileTo_4: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection_5: function (receiver, result) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse_3: function (receiver) {
                            var list = _.kotlin.toCollection_5(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList_3: function (receiver) {
                            return _.kotlin.toCollection_5(receiver, new Kotlin.LinkedList());
                        },
                        toList_4: function (receiver) {
                            return _.kotlin.toCollection_5(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet_3: function (receiver) {
                            return _.kotlin.toCollection_5(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet_3: function (receiver) {
                            return _.kotlin.toCollection_5(receiver, new Kotlin.TreeSet());
                        },
                        plus_14: function (receiver, element) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_5(receiver, answer);
                            answer.add(element);
                            return answer;
                        },
                        plus_15: function (receiver, iterator) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_5(receiver, answer);
                            {
                                var tmp$0 = iterator;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer.add(element);
                                }
                            }
                            return answer;
                        },
                        plus_16: function (receiver, collection) {
                            return _.kotlin.plus_15(receiver, collection.iterator());
                        },
                        withIndices_3: function (receiver) {
                            return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
                        },
                        sortBy_3: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection_5(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.fh, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString_3: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (++count > 1)
                                        buffer.append(separator);
                                    if (limit < 0 || count <= limit) {
                                        var text = element === null || element === undefined ? 'null' : element.toString();
                                        buffer.append(text);
                                    }
                                    else
                                        break;
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString_3: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString_3(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        downTo: function (receiver, to) {
                            return new _.jet.ByteProgression(receiver, to, -1);
                        },
                        downTo_0: function (receiver, to) {
                            return new _.jet.CharProgression(receiver.toChar(), to, -1);
                        },
                        downTo_1: function (receiver, to) {
                            return new _.jet.ShortProgression(receiver, to, -1);
                        },
                        downTo_2: function (receiver, to) {
                            return new Kotlin.NumberProgression(receiver, to, -1);
                        },
                        downTo_3: function (receiver, to) {
                            return new _.jet.LongProgression(receiver.toLong(), to, -(1).toLong());
                        },
                        downTo_4: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver, to, -1);
                        },
                        downTo_5: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to, -1.0);
                        },
                        downTo_6: function (receiver, to) {
                            return new _.jet.CharProgression(receiver, to.toChar(), -1);
                        },
                        downTo_7: function (receiver, to) {
                            return new _.jet.CharProgression(receiver, to, -1);
                        },
                        downTo_8: function (receiver, to) {
                            return new _.jet.ShortProgression(receiver.toShort(), to, -1);
                        },
                        downTo_9: function (receiver, to) {
                            return new Kotlin.NumberProgression(receiver.toInt(), to, -1);
                        },
                        downTo_10: function (receiver, to) {
                            return new _.jet.LongProgression(receiver.toLong(), to, -(1).toLong());
                        },
                        downTo_11: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver.toFloat(), to, -1);
                        },
                        downTo_12: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver.toDouble(), to, -1.0);
                        },
                        downTo_13: function (receiver, to) {
                            return new _.jet.ShortProgression(receiver, to, -1);
                        },
                        downTo_14: function (receiver, to) {
                            return new _.jet.ShortProgression(receiver, to.toShort(), -1);
                        },
                        downTo_15: function (receiver, to) {
                            return new _.jet.ShortProgression(receiver, to, -1);
                        },
                        downTo_16: function (receiver, to) {
                            return new Kotlin.NumberProgression(receiver, to, -1);
                        },
                        downTo_17: function (receiver, to) {
                            return new _.jet.LongProgression(receiver.toLong(), to, -(1).toLong());
                        },
                        downTo_18: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver, to, -1);
                        },
                        downTo_19: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to, -1.0);
                        },
                        downTo_20: function (receiver, to) {
                            return new Kotlin.NumberProgression(receiver, to, -1);
                        },
                        downTo_21: function (receiver, to) {
                            return new Kotlin.NumberProgression(receiver, to.toInt(), -1);
                        },
                        downTo_22: function (receiver, to) {
                            return new Kotlin.NumberProgression(receiver, to, -1);
                        },
                        downTo_23: function (receiver, to) {
                            return new Kotlin.NumberProgression(receiver, to, -1);
                        },
                        downTo_24: function (receiver, to) {
                            return new _.jet.LongProgression(receiver.toLong(), to, -(1).toLong());
                        },
                        downTo_25: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver, to, -1);
                        },
                        downTo_26: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to, -1.0);
                        },
                        downTo_27: function (receiver, to) {
                            return new _.jet.LongProgression(receiver, to.toLong(), -(1).toLong());
                        },
                        downTo_28: function (receiver, to) {
                            return new _.jet.LongProgression(receiver, to.toLong(), -(1).toLong());
                        },
                        downTo_29: function (receiver, to) {
                            return new _.jet.LongProgression(receiver, to.toLong(), -(1).toLong());
                        },
                        downTo_30: function (receiver, to) {
                            return new _.jet.LongProgression(receiver, to.toLong(), -(1).toLong());
                        },
                        downTo_31: function (receiver, to) {
                            return new _.jet.LongProgression(receiver, to, -(1).toLong());
                        },
                        downTo_32: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver.toFloat(), to, -1);
                        },
                        downTo_33: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver.toDouble(), to, -1.0);
                        },
                        downTo_34: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver, to, -1);
                        },
                        downTo_35: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver, to.toFloat(), -1);
                        },
                        downTo_36: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver, to, -1);
                        },
                        downTo_37: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver, to, -1);
                        },
                        downTo_38: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver, to.toFloat(), -1);
                        },
                        downTo_39: function (receiver, to) {
                            return new _.jet.FloatProgression(receiver, to, -1);
                        },
                        downTo_40: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to, -1.0);
                        },
                        downTo_41: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to, -1.0);
                        },
                        downTo_42: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to.toDouble(), -1.0);
                        },
                        downTo_43: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to, -1.0);
                        },
                        downTo_44: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to, -1.0);
                        },
                        downTo_45: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to.toDouble(), -1.0);
                        },
                        downTo_46: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to, -1.0);
                        },
                        downTo_47: function (receiver, to) {
                            return new _.jet.DoubleProgression(receiver, to, -1.0);
                        },
                        all_4: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any_4: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_6: function (receiver, predicate) {
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find_4: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filter_5: function (receiver, predicate) {
                            return _.kotlin.filterTo_5(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterTo_5: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNot_5: function (receiver, predicate) {
                            return _.kotlin.filterNotTo_5(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNotTo_5: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition_4: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element)) {
                                        first.add(element);
                                    }
                                    else {
                                        second.add(element);
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        map_6: function (receiver, transform) {
                            return _.kotlin.mapTo_6(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        mapTo_6: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var item = tmp$0.next();
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMap_5: function (receiver, transform) {
                            return _.kotlin.flatMapTo_5(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        flatMapTo_5: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var list = transform.call(this, element);
                                    {
                                        var tmp$1 = list.iterator();
                                        while (tmp$1.hasNext()) {
                                            var r = tmp$1.next();
                                            result.add(r);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach_4: function (receiver, operation) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold_4: function (receiver, initial, operation) {
                            var answer = initial;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        foldRight_4: function (receiver, initial, operation) {
                            var r = initial;
                            var index = receiver.length - 1;
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        reduce_4: function (receiver, operation) {
                            var iterator = Kotlin.arrayIterator(receiver);
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        reduceRight_4: function (receiver, operation) {
                            var index = receiver.length - 1;
                            if (index < 0) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var r = receiver[index--];
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        groupBy_4: function (receiver, toKey) {
                            return _.kotlin.groupByTo_4(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo_4: function (receiver, result, toKey) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var key = toKey.call(this, element);
                                    var list = _.kotlin.getOrPut(result, key, _f.fi);
                                    list.add(element);
                                }
                            }
                            return result;
                        },
                        drop_5: function (receiver, n) {
                            return _.kotlin.dropWhile_4(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile_4: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo_4(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo_4: function (receiver, result, predicate) {
                            var start = true;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (start && predicate.call(this, element)) {
                                    }
                                    else {
                                        start = false;
                                        result.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        take_5: function (receiver, n) {
                            return _.kotlin.takeWhile_5(receiver, _.kotlin.countTo(n));
                        },
                        takeWhile_5: function (receiver, predicate) {
                            return _.kotlin.takeWhileTo_5(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        takeWhileTo_5: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection_6: function (receiver, result) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse_4: function (receiver) {
                            var list = _.kotlin.toCollection_6(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList_4: function (receiver) {
                            return _.kotlin.toCollection_6(receiver, new Kotlin.LinkedList());
                        },
                        toList_5: function (receiver) {
                            return _.kotlin.toCollection_6(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet_4: function (receiver) {
                            return _.kotlin.toCollection_6(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet_4: function (receiver) {
                            return _.kotlin.toCollection_6(receiver, new Kotlin.TreeSet());
                        },
                        plus_17: function (receiver, element) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_6(receiver, answer);
                            answer.add(element);
                            return answer;
                        },
                        plus_18: function (receiver, iterator) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_6(receiver, answer);
                            {
                                var tmp$0 = iterator;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer.add(element);
                                }
                            }
                            return answer;
                        },
                        plus_19: function (receiver, collection) {
                            return _.kotlin.plus_18(receiver, collection.iterator());
                        },
                        withIndices_4: function (receiver) {
                            return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
                        },
                        sortBy_4: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection_6(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.fj, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString_4: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (++count > 1)
                                        buffer.append(separator);
                                    if (limit < 0 || count <= limit) {
                                        var text = element === null || element === undefined ? 'null' : element.toString();
                                        buffer.append(text);
                                    }
                                    else
                                        break;
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString_4: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString_4(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        all_5: function (receiver, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any_5: function (receiver, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_7: function (receiver, predicate) {
                            var count = 0;
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find_5: function (receiver, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filter_6: function (receiver, predicate) {
                            return _.kotlin.filterTo_6(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterTo_6: function (receiver, result, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNot_6: function (receiver, predicate) {
                            return _.kotlin.filterNotTo_6(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNotTo_6: function (receiver, result, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition_5: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        if (predicate.call(this, element)) {
                                            first.add(element);
                                        }
                                        else {
                                            second.add(element);
                                        }
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        map_7: function (receiver, transform) {
                            return _.kotlin.mapTo_7(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        mapTo_7: function (receiver, result, transform) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var item = tmp$0[tmp$2];
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMap_6: function (receiver, transform) {
                            return _.kotlin.flatMapTo_6(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        flatMapTo_6: function (receiver, result, transform) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        var list = transform.call(this, element);
                                        {
                                            var tmp$3 = list.iterator();
                                            while (tmp$3.hasNext()) {
                                                var r = tmp$3.next();
                                                result.add(r);
                                            }
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach_5: function (receiver, operation) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold_5: function (receiver, initial, operation) {
                            var answer = initial;
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        foldRight_5: function (receiver, initial, operation) {
                            var r = initial;
                            var index = receiver.length - 1;
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        reduce_5: function (receiver, operation) {
                            var iterator = Kotlin.arrayIterator(receiver);
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        reduceRight_5: function (receiver, operation) {
                            var index = receiver.length - 1;
                            if (index < 0) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var r = receiver[index--];
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        groupBy_5: function (receiver, toKey) {
                            return _.kotlin.groupByTo_5(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo_5: function (receiver, result, toKey) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        var key = toKey.call(this, element);
                                        var list = _.kotlin.getOrPut(result, key, _f.fk);
                                        list.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        drop_6: function (receiver, n) {
                            return _.kotlin.dropWhile_5(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile_5: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo_5(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo_5: function (receiver, result, predicate) {
                            var start = true;
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        if (start && predicate.call(this, element)) {
                                        }
                                        else {
                                            start = false;
                                            result.add(element);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        take_6: function (receiver, n) {
                            return _.kotlin.takeWhile_6(receiver, _.kotlin.countTo(n));
                        },
                        takeWhile_6: function (receiver, predicate) {
                            return _.kotlin.takeWhileTo_6(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        takeWhileTo_6: function (receiver, result, predicate) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection_7: function (receiver, result) {
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse_5: function (receiver) {
                            var list = _.kotlin.toCollection_7(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList_5: function (receiver) {
                            return _.kotlin.toCollection_7(receiver, new Kotlin.LinkedList());
                        },
                        toList_6: function (receiver) {
                            return _.kotlin.toCollection_7(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet_5: function (receiver) {
                            return _.kotlin.toCollection_7(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet_5: function (receiver) {
                            return _.kotlin.toCollection_7(receiver, new Kotlin.TreeSet());
                        },
                        plus_20: function (receiver, element) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_7(receiver, answer);
                            answer.add(element);
                            return answer;
                        },
                        plus_21: function (receiver, iterator) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_7(receiver, answer);
                            {
                                var tmp$0 = iterator;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer.add(element);
                                }
                            }
                            return answer;
                        },
                        plus_22: function (receiver, collection) {
                            return _.kotlin.plus_21(receiver, collection.iterator());
                        },
                        withIndices_5: function (receiver) {
                            return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
                        },
                        sortBy_5: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection_7(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.fl, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString_5: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = receiver, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var element = tmp$0[tmp$2];
                                    {
                                        if (++count > 1)
                                            buffer.append(separator);
                                        if (limit < 0 || count <= limit) {
                                            var text = element === null || element === undefined ? 'null' : element.toString();
                                            buffer.append(text);
                                        }
                                        else
                                            break;
                                    }
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString_5: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString_5(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        all_6: function (receiver, predicate) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any_6: function (receiver, predicate) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_8: function (receiver, predicate) {
                            var count = 0;
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find_6: function (receiver, predicate) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filterTo_3: function (receiver, result, predicate) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNotTo_3: function (receiver, result, predicate) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNotNullTo_0: function (receiver, result) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (element !== null && element !== undefined)
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition_6: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element)) {
                                        first.add(element);
                                    }
                                    else {
                                        second.add(element);
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        mapTo_4: function (receiver, result, transform) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var item = tmp$0.next();
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMapTo_3: function (receiver, result, transform) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var list = transform.call(this, element);
                                    {
                                        var tmp$1 = list.iterator();
                                        while (tmp$1.hasNext()) {
                                            var r = tmp$1.next();
                                            result.add(r);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach_6: function (receiver, operation) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold_6: function (receiver, initial, operation) {
                            var answer = initial;
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        reduce_6: function (receiver, operation) {
                            var iterator = receiver.iterator();
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        groupBy_6: function (receiver, toKey) {
                            return _.kotlin.groupByTo_6(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo_6: function (receiver, result, toKey) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var key = toKey.call(this, element);
                                    var list = _.kotlin.getOrPut(result, key, _f.fm);
                                    list.add(element);
                                }
                            }
                            return result;
                        },
                        drop: function (receiver, n) {
                            return _.kotlin.dropWhile_6(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile_6: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo_6(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo_6: function (receiver, result, predicate) {
                            var start = true;
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (start && predicate.call(this, element)) {
                                    }
                                    else {
                                        start = false;
                                        result.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        takeWhileTo_3: function (receiver, result, predicate) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection: function (receiver, result) {
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse_6: function (receiver) {
                            var list = _.kotlin.toCollection(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList_6: function (receiver) {
                            return _.kotlin.toCollection(receiver, new Kotlin.LinkedList());
                        },
                        toList: function (receiver) {
                            return _.kotlin.toCollection(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet_6: function (receiver) {
                            return _.kotlin.toCollection(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet_6: function (receiver) {
                            return _.kotlin.toCollection(receiver, new Kotlin.TreeSet());
                        },
                        withIndices_6: function (receiver) {
                            return new _.kotlin.IndexIterator(receiver.iterator());
                        },
                        sortBy_6: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.fn, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString_6: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            {
                                var tmp$0 = receiver.iterator();
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (++count > 1)
                                        buffer.append(separator);
                                    if (limit < 0 || count <= limit) {
                                        var text = element === null || element === undefined ? 'null' : element.toString();
                                        buffer.append(text);
                                    }
                                    else
                                        break;
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString_6: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString_6(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        filter_7: function (receiver, predicate) {
                            return new _.kotlin.FilterIterator(receiver, predicate);
                        },
                        filterNot_7: function (receiver, predicate) {
                            return _.kotlin.filter_7(receiver, Kotlin.b2(_f.fo, null, [predicate]));
                        },
                        filterNotNull_1: function (receiver) {
                            return new _.kotlin.FilterNotNullIterator(receiver);
                        },
                        map_8: function (receiver, transform) {
                            return new _.kotlin.MapIterator(receiver, transform);
                        },
                        flatMap_7: function (receiver, transform) {
                            return new _.kotlin.FlatMapIterator(receiver, transform);
                        },
                        requireNoNulls_1: function (receiver) {
                            return _.kotlin.map_8(receiver, _f.fp);
                        },
                        take_7: function (receiver, n) {
                            var count = n;
                            return _.kotlin.takeWhile_7(receiver, function (it) {
                                return --count >= 0;
                            });
                        },
                        takeWhile_7: function (receiver, predicate) {
                            return new _.kotlin.TakeWhileIterator(receiver, predicate);
                        },
                        plus_23: function (receiver, element) {
                            return new _.kotlin.CompositeIterator([receiver, new _.kotlin.SingleIterator(element)]);
                        },
                        plus_24: function (receiver, iterator) {
                            return new _.kotlin.CompositeIterator([receiver, iterator]);
                        },
                        plus_25: function (receiver, collection) {
                            return _.kotlin.plus_24(receiver, collection.iterator());
                        },
                        all_7: function (receiver, predicate) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any_7: function (receiver, predicate) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_9: function (receiver, predicate) {
                            var count = 0;
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find_7: function (receiver, predicate) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filterTo_7: function (receiver, result, predicate) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNotTo_7: function (receiver, result, predicate) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNotNullTo_1: function (receiver, result) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (element !== null && element !== undefined)
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition_7: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element)) {
                                        first.add(element);
                                    }
                                    else {
                                        second.add(element);
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        mapTo_8: function (receiver, result, transform) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var item = tmp$0.next();
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMapTo_7: function (receiver, result, transform) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var list = transform.call(this, element);
                                    {
                                        var tmp$1 = list.iterator();
                                        while (tmp$1.hasNext()) {
                                            var r = tmp$1.next();
                                            result.add(r);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach_7: function (receiver, operation) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold_7: function (receiver, initial, operation) {
                            var answer = initial;
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        reduce_7: function (receiver, operation) {
                            var iterator = receiver;
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        groupBy_7: function (receiver, toKey) {
                            return _.kotlin.groupByTo_7(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo_7: function (receiver, result, toKey) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var key = toKey.call(this, element);
                                    var list = _.kotlin.getOrPut(result, key, _f.fq);
                                    list.add(element);
                                }
                            }
                            return result;
                        },
                        drop_7: function (receiver, n) {
                            return _.kotlin.dropWhile_7(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile_7: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo_7(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo_7: function (receiver, result, predicate) {
                            var start = true;
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (start && predicate.call(this, element)) {
                                    }
                                    else {
                                        start = false;
                                        result.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        takeWhileTo_7: function (receiver, result, predicate) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection_0: function (receiver, result) {
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse_7: function (receiver) {
                            var list = _.kotlin.toCollection_0(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList_7: function (receiver) {
                            return _.kotlin.toCollection_0(receiver, new Kotlin.LinkedList());
                        },
                        toList_7: function (receiver) {
                            return _.kotlin.toCollection_0(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet_7: function (receiver) {
                            return _.kotlin.toCollection_0(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet_7: function (receiver) {
                            return _.kotlin.toCollection_0(receiver, new Kotlin.TreeSet());
                        },
                        withIndices_7: function (receiver) {
                            return new _.kotlin.IndexIterator(receiver);
                        },
                        sortBy_7: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection_0(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.fr, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString_7: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            {
                                var tmp$0 = receiver;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (++count > 1)
                                        buffer.append(separator);
                                    if (limit < 0 || count <= limit) {
                                        var text = element === null || element === undefined ? 'null' : element.toString();
                                        buffer.append(text);
                                    }
                                    else
                                        break;
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString_7: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString_7(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        all_8: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any_8: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_10: function (receiver, predicate) {
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find_8: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filter_8: function (receiver, predicate) {
                            return _.kotlin.filterTo_8(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterTo_8: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNot_8: function (receiver, predicate) {
                            return _.kotlin.filterNotTo_8(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNotTo_8: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition_8: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element)) {
                                        first.add(element);
                                    }
                                    else {
                                        second.add(element);
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        map_9: function (receiver, transform) {
                            return _.kotlin.mapTo_9(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        mapTo_9: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var item = tmp$0.next();
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMap_8: function (receiver, transform) {
                            return _.kotlin.flatMapTo_8(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        flatMapTo_8: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var list = transform.call(this, element);
                                    {
                                        var tmp$1 = list.iterator();
                                        while (tmp$1.hasNext()) {
                                            var r = tmp$1.next();
                                            result.add(r);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach_8: function (receiver, operation) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold_8: function (receiver, initial, operation) {
                            var answer = initial;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        foldRight_6: function (receiver, initial, operation) {
                            var r = initial;
                            var index = receiver.length - 1;
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        reduce_8: function (receiver, operation) {
                            var iterator = Kotlin.arrayIterator(receiver);
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        reduceRight_6: function (receiver, operation) {
                            var index = receiver.length - 1;
                            if (index < 0) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var r = receiver[index--];
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        groupBy_8: function (receiver, toKey) {
                            return _.kotlin.groupByTo_8(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo_8: function (receiver, result, toKey) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var key = toKey.call(this, element);
                                    var list = _.kotlin.getOrPut(result, key, _f.fs);
                                    list.add(element);
                                }
                            }
                            return result;
                        },
                        drop_8: function (receiver, n) {
                            return _.kotlin.dropWhile_8(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile_8: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo_8(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo_8: function (receiver, result, predicate) {
                            var start = true;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (start && predicate.call(this, element)) {
                                    }
                                    else {
                                        start = false;
                                        result.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        take_8: function (receiver, n) {
                            return _.kotlin.takeWhile_8(receiver, _.kotlin.countTo(n));
                        },
                        takeWhile_8: function (receiver, predicate) {
                            return _.kotlin.takeWhileTo_8(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        takeWhileTo_8: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection_8: function (receiver, result) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse_8: function (receiver) {
                            var list = _.kotlin.toCollection_8(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList_8: function (receiver) {
                            return _.kotlin.toCollection_8(receiver, new Kotlin.LinkedList());
                        },
                        toList_8: function (receiver) {
                            return _.kotlin.toCollection_8(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet_8: function (receiver) {
                            return _.kotlin.toCollection_8(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet_8: function (receiver) {
                            return _.kotlin.toCollection_8(receiver, new Kotlin.TreeSet());
                        },
                        plus_26: function (receiver, element) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_8(receiver, answer);
                            answer.add(element);
                            return answer;
                        },
                        plus_27: function (receiver, iterator) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_8(receiver, answer);
                            {
                                var tmp$0 = iterator;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer.add(element);
                                }
                            }
                            return answer;
                        },
                        plus_28: function (receiver, collection) {
                            return _.kotlin.plus_27(receiver, collection.iterator());
                        },
                        withIndices_8: function (receiver) {
                            return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
                        },
                        sortBy_8: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection_8(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.ft, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString_8: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (++count > 1)
                                        buffer.append(separator);
                                    if (limit < 0 || count <= limit) {
                                        var text = element === null || element === undefined ? 'null' : element.toString();
                                        buffer.append(text);
                                    }
                                    else
                                        break;
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString_8: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString_8(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        all_9: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        return false;
                                }
                            }
                            return true;
                        },
                        any_9: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return true;
                                }
                            }
                            return false;
                        },
                        count_11: function (receiver, predicate) {
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        count++;
                                }
                            }
                            return count;
                        },
                        find_9: function (receiver, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        return element;
                                }
                            }
                            return null;
                        },
                        filter_9: function (receiver, predicate) {
                            return _.kotlin.filterTo_9(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterTo_9: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        filterNot_9: function (receiver, predicate) {
                            return _.kotlin.filterNotTo_9(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        filterNotTo_9: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (!predicate.call(this, element))
                                        result.add(element);
                                }
                            }
                            return result;
                        },
                        partition_9: function (receiver, predicate) {
                            var first = new Kotlin.ArrayList(0);
                            var second = new Kotlin.ArrayList(0);
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element)) {
                                        first.add(element);
                                    }
                                    else {
                                        second.add(element);
                                    }
                                }
                            }
                            return new _.kotlin.Pair(first, second);
                        },
                        map_10: function (receiver, transform) {
                            return _.kotlin.mapTo_10(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        mapTo_10: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var item = tmp$0.next();
                                    result.add(transform.call(this, item));
                                }
                            }
                            return result;
                        },
                        flatMap_9: function (receiver, transform) {
                            return _.kotlin.flatMapTo_9(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        flatMapTo_9: function (receiver, result, transform) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var list = transform.call(this, element);
                                    {
                                        var tmp$1 = list.iterator();
                                        while (tmp$1.hasNext()) {
                                            var r = tmp$1.next();
                                            result.add(r);
                                        }
                                    }
                                }
                            }
                            return result;
                        },
                        forEach_9: function (receiver, operation) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    operation.call(this, element);
                                }
                            }
                        },
                        fold_9: function (receiver, initial, operation) {
                            var answer = initial;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer = operation.call(this, answer, element);
                                }
                            }
                            return answer;
                        },
                        foldRight_7: function (receiver, initial, operation) {
                            var r = initial;
                            var index = receiver.length - 1;
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        reduce_9: function (receiver, operation) {
                            var iterator = Kotlin.arrayIterator(receiver);
                            if (!iterator.hasNext()) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var result = iterator.next();
                            while (iterator.hasNext()) {
                                result = operation.call(this, result, iterator.next());
                            }
                            return result;
                        },
                        reduceRight_7: function (receiver, operation) {
                            var index = receiver.length - 1;
                            if (index < 0) {
                                throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                            }
                            var r = receiver[index--];
                            while (index >= 0) {
                                r = operation.call(this, receiver[index--], r);
                            }
                            return r;
                        },
                        groupBy_9: function (receiver, toKey) {
                            return _.kotlin.groupByTo_9(receiver, new Kotlin.HashMap(0), toKey);
                        },
                        groupByTo_9: function (receiver, result, toKey) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    var key = toKey.call(this, element);
                                    var list = _.kotlin.getOrPut(result, key, _f.fu);
                                    list.add(element);
                                }
                            }
                            return result;
                        },
                        drop_9: function (receiver, n) {
                            return _.kotlin.dropWhile_9(receiver, _.kotlin.countTo(n));
                        },
                        dropWhile_9: function (receiver, predicate) {
                            return _.kotlin.dropWhileTo_9(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        dropWhileTo_9: function (receiver, result, predicate) {
                            var start = true;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (start && predicate.call(this, element)) {
                                    }
                                    else {
                                        start = false;
                                        result.add(element);
                                    }
                                }
                            }
                            return result;
                        },
                        take_9: function (receiver, n) {
                            return _.kotlin.takeWhile_9(receiver, _.kotlin.countTo(n));
                        },
                        takeWhile_9: function (receiver, predicate) {
                            return _.kotlin.takeWhileTo_9(receiver, new Kotlin.ArrayList(0), predicate);
                        },
                        takeWhileTo_9: function (receiver, result, predicate) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (predicate.call(this, element))
                                        result.add(element);
                                    else
                                        break;
                                }
                            }
                            return result;
                        },
                        toCollection_9: function (receiver, result) {
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    result.add(element);
                                }
                            }
                            return result;
                        },
                        reverse_9: function (receiver) {
                            var list = _.kotlin.toCollection_9(receiver, new Kotlin.ArrayList(0));
                            Kotlin.reverse(list);
                            return list;
                        },
                        toLinkedList_9: function (receiver) {
                            return _.kotlin.toCollection_9(receiver, new Kotlin.LinkedList());
                        },
                        toList_9: function (receiver) {
                            return _.kotlin.toCollection_9(receiver, new Kotlin.ArrayList(0));
                        },
                        toSet_9: function (receiver) {
                            return _.kotlin.toCollection_9(receiver, new Kotlin.LinkedHashSet());
                        },
                        toSortedSet_9: function (receiver) {
                            return _.kotlin.toCollection_9(receiver, new Kotlin.TreeSet());
                        },
                        plus_29: function (receiver, element) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_9(receiver, answer);
                            answer.add(element);
                            return answer;
                        },
                        plus_30: function (receiver, iterator) {
                            var answer = new Kotlin.ArrayList(0);
                            _.kotlin.toCollection_9(receiver, answer);
                            {
                                var tmp$0 = iterator;
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    answer.add(element);
                                }
                            }
                            return answer;
                        },
                        plus_31: function (receiver, collection) {
                            return _.kotlin.plus_30(receiver, collection.iterator());
                        },
                        withIndices_9: function (receiver) {
                            return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
                        },
                        sortBy_9: function (receiver, f) {
                            var sortedList = _.kotlin.toCollection_9(receiver, new Kotlin.ArrayList(0));
                            var sortBy = Kotlin.comparator(Kotlin.b2(_f.fv, this, [f]));
                            Kotlin.collectionsSort(sortedList, sortBy);
                            return sortedList;
                        },
                        appendString_9: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
                            buffer.append(prefix);
                            var count = 0;
                            {
                                var tmp$0 = Kotlin.arrayIterator(receiver);
                                while (tmp$0.hasNext()) {
                                    var element = tmp$0.next();
                                    if (++count > 1)
                                        buffer.append(separator);
                                    if (limit < 0 || count <= limit) {
                                        var text = element === null || element === undefined ? 'null' : element.toString();
                                        buffer.append(text);
                                    }
                                    else
                                        break;
                                }
                            }
                            if (limit >= 0 && count > limit)
                                buffer.append(truncated);
                            buffer.append(postfix);
                        },
                        makeString_9: function (receiver, separator, prefix, postfix, limit, truncated) {
                            var buffer = new Kotlin.StringBuilder();
                            _.kotlin.appendString_9(receiver, buffer, separator, prefix, postfix, limit, truncated);
                            return buffer.toString();
                        },
                        set_0: function (receiver, key, value) {
                            receiver.put(key, value);
                        },
                        hashMap: function (values) {
                            var answer = new Kotlin.HashMap(0);
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = values, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var v = tmp$0[tmp$2];
                                    {
                                        answer.put(v.get_first(), v.get_second());
                                    }
                                }
                            }
                            return answer;
                        },
                        toString: function (receiver) {
                            return _.kotlin.makeString_6(receiver, ', ', '[', ']', -1, '...');
                        },
                        equals: function (receiver, that) {
                            var s1 = receiver.size();
                            var s2 = that.size();
                            if (s1 === s2) {
                                var tmp$0, tmp$1, tmp$2, tmp$3;
                                {
                                    tmp$0 = new Kotlin.NumberRange(0, s1), tmp$1 = tmp$0.get_start(), tmp$2 = tmp$0.get_end(), tmp$3 = tmp$0.get_increment();
                                    for (var i = tmp$1; i <= tmp$2; i += tmp$3) {
                                        var elem1 = receiver.get(i);
                                        var elem2 = that.get(i);
                                        if (!Kotlin.equals(elem1, elem2)) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }
                            return false;
                        },
                        arrayList: function (values) {
                            var list = new Kotlin.ArrayList(0);
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = values, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var value = tmp$0[tmp$2];
                                    {
                                        list.add(value);
                                    }
                                }
                            }
                            return list;
                        },
                        hashSet: function (values) {
                            var list = new Kotlin.HashSet();
                            var tmp$0, tmp$1, tmp$2;
                            {
                                tmp$0 = values, tmp$1 = tmp$0.length;
                                for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                                    var value = tmp$0[tmp$2];
                                    {
                                        list.add(value);
                                    }
                                }
                            }
                            return list;
                        },
                        map_11: function (receiver, transform) {
                            return _.kotlin.mapTo(receiver, new Kotlin.ArrayList(0), transform);
                        },
                        mapValues_0: function (receiver, transform) {
                            return _.kotlin.mapValuesTo(receiver, new Kotlin.HashMap(0), transform);
                        },
                        Pair: Kotlin.createClass({
                            initialize: function (first, second) {
                                this.$first = first;
                                this.$second = second;
                            },
                            get_first: function () {
                                return this.$first;
                            },
                            get_second: function () {
                                return this.$second;
                            },
                            component1: function () {
                                return this.get_first();
                            },
                            component2: function () {
                                return this.get_second();
                            },
                            toString: function () {
                                return '(' + this.get_first().toString() + ', ' + this.get_second().toString() + ')';
                            }
                        }),
                        Triple: Kotlin.createClass({
                            initialize: function (first, second, third) {
                                this.$first = first;
                                this.$second = second;
                                this.$third = third;
                            },
                            get_first: function () {
                                return this.$first;
                            },
                            get_second: function () {
                                return this.$second;
                            },
                            get_third: function () {
                                return this.$third;
                            },
                            component1: function () {
                                return this.get_first();
                            },
                            component2: function () {
                                return this.get_second();
                            },
                            component3: function () {
                                return this.get_third();
                            },
                            toString: function () {
                                return '(' + this.get_first().toString() + ', ' + this.get_second().toString() + ', ' + this.get_third().toString() + ')';
                            }
                        }),
                        dom: Kotlin.definePackage({
                            emptyElementList: function () {
                                return Kotlin.emptyList();
                            },
                            emptyNodeList: function () {
                                return Kotlin.emptyList();
                            },
                            get_text: function (receiver) {
                                return receiver.textContent;
                            },
                            set_text: function (receiver, value) {
                                receiver.textContent = value;
                            },
                            get_childrenText: function (receiver) {
                                var buffer = new Kotlin.StringBuilder();
                                var nodeList = receiver.childNodes;
                                var i = 0;
                                var size = nodeList.length;
                                while (i < size) {
                                    var node = nodeList.item(i);
                                    if (node !== null && node !== undefined) {
                                        if (_.kotlin.dom.isText(node)) {
                                            buffer.append(node.nodeValue);
                                        }
                                    }
                                    i++;
                                }
                                return buffer.toString();
                            },
                            set_childrenText: function (receiver, value) {
                                var element = receiver;
                                {
                                    var tmp$0 = _.kotlin.dom.children(element).iterator();
                                    while (tmp$0.hasNext()) {
                                        var node = tmp$0.next();
                                        if (_.kotlin.dom.isText(node)) {
                                            receiver.removeChild(node);
                                        }
                                    }
                                }
                                _.kotlin.dom.addText(element, value, null);
                            },
                            get_id: function (receiver) {
                                return receiver.getAttribute('id') !== null ? receiver.getAttribute('id') : '';
                            },
                            set_id: function (receiver, value) {
                                receiver.setAttribute('id', value);
                                receiver.setIdAttribute('id', true);
                            },
                            get_style: function (receiver) {
                                return receiver.getAttribute('style') !== null ? receiver.getAttribute('style') : '';
                            },
                            set_style: function (receiver, value) {
                                receiver.setAttribute('style', value);
                            },
                            get_classes: function (receiver) {
                                return receiver.getAttribute('class') !== null ? receiver.getAttribute('class') : '';
                            },
                            set_classes: function (receiver, value) {
                                receiver.setAttribute('class', value);
                            },
                            hasClass: function (receiver, cssClass) {
                                var c = _.kotlin.dom.get_classes(receiver);
                                return _.js.matches(c, '(^|.*' + '\\' + 's+)' + cssClass + '(' + '$' + '|' + '\\' + 's+.*)');
                            },
                            children: function (receiver) {
                                var tmp$0;
                                return _.kotlin.dom.toList((tmp$0 = receiver) !== null && tmp$0 !== undefined ? tmp$0.childNodes : null);
                            },
                            childElements: function (receiver) {
                                return _.kotlin.map(_.kotlin.filter(_.kotlin.dom.children(receiver), Kotlin.b4(_f.f0, this)), _f.f1);
                            },
                            childElements_0: function (receiver, name) {
                                return _.kotlin.map(_.kotlin.filter(_.kotlin.dom.children(receiver), Kotlin.b2(_f.f2, this, [name])), _f.f3);
                            },
                            get_elements: function (receiver) {
                                var tmp$0;
                                return _.kotlin.dom.toElementList((tmp$0 = receiver) !== null && tmp$0 !== undefined ? tmp$0.getElementsByTagName('*') : null);
                            },
                            get_elements_0: function (receiver) {
                                var tmp$0;
                                return _.kotlin.dom.toElementList((tmp$0 = receiver) !== null && tmp$0 !== undefined ? tmp$0.getElementsByTagName('*') : null);
                            },
                            elements: function (receiver, localName) {
                                var tmp$0;
                                return _.kotlin.dom.toElementList((tmp$0 = receiver) !== null && tmp$0 !== undefined ? tmp$0.getElementsByTagName(localName) : null);
                            },
                            elements_0: function (receiver, localName) {
                                var tmp$0;
                                return _.kotlin.dom.toElementList((tmp$0 = receiver) !== null && tmp$0 !== undefined ? tmp$0.getElementsByTagName(localName) : null);
                            },
                            elements_1: function (receiver, namespaceUri, localName) {
                                var tmp$0;
                                return _.kotlin.dom.toElementList((tmp$0 = receiver) !== null && tmp$0 !== undefined ? tmp$0.getElementsByTagNameNS(namespaceUri, localName) : null);
                            },
                            elements_2: function (receiver, namespaceUri, localName) {
                                var tmp$0;
                                return _.kotlin.dom.toElementList((tmp$0 = receiver) !== null && tmp$0 !== undefined ? tmp$0.getElementsByTagNameNS(namespaceUri, localName) : null);
                            },
                            toList: function (receiver) {
                                var tmp$0;
                                if (receiver === null || receiver === undefined) {
                                    tmp$0 = _.kotlin.dom.emptyNodeList();
                                }
                                else {
                                    tmp$0 = new _.kotlin.dom.NodeListAsList(receiver);
                                }
                                return tmp$0;
                            },
                            toElementList: function (receiver) {
                                var tmp$0;
                                if (receiver === null || receiver === undefined) {
                                    tmp$0 = new Kotlin.ArrayList(0);
                                }
                                else {
                                    tmp$0 = new _.kotlin.dom.ElementListAsList(receiver);
                                }
                                return tmp$0;
                            },
                            get: function (receiver, selector) {
                                var tmp$0, tmp$2;
                                var root = (tmp$0 = receiver) !== null && tmp$0 !== undefined ? tmp$0.documentElement : null;
                                if (root !== null && root !== undefined) {
                                    if (Kotlin.equals(selector, '*')) {
                                        tmp$2 = _.kotlin.dom.get_elements(receiver);
                                    }
                                    else if (_.js.startsWith_0(selector, '.')) {
                                        tmp$2 = _.kotlin.toList(_.kotlin.filter(_.kotlin.dom.get_elements(receiver), Kotlin.b2(_f.f4, null, [selector])));
                                    }
                                    else if (_.js.startsWith_0(selector, '#')) {
                                        var id = selector.substring(1);
                                        var tmp$1;
                                        var element = (tmp$1 = receiver) !== null && tmp$1 !== undefined ? tmp$1.getElementById(id) : null;
                                        return element !== null && element !== undefined ? _.kotlin.arrayList([element]) : _.kotlin.dom.emptyElementList();
                                    }
                                    else {
                                        tmp$2 = _.kotlin.dom.elements_0(receiver, selector);
                                    }
                                }
                                else {
                                    tmp$2 = _.kotlin.dom.emptyElementList();
                                }
                                return tmp$2;
                            },
                            get_0: function (receiver, selector) {
                                var tmp$1;
                                if (Kotlin.equals(selector, '*')) {
                                    tmp$1 = _.kotlin.dom.get_elements_0(receiver);
                                }
                                else if (_.js.startsWith_0(selector, '.')) {
                                    tmp$1 = _.kotlin.toList(_.kotlin.filter(_.kotlin.dom.get_elements_0(receiver), Kotlin.b2(_f.f5, null, [selector])));
                                }
                                else if (_.js.startsWith_0(selector, '#')) {
                                    var tmp$0;
                                    var element = (tmp$0 = receiver.ownerDocument) !== null && tmp$0 !== undefined ? tmp$0.getElementById(selector.substring(1)) : null;
                                    return element !== null && element !== undefined ? _.kotlin.arrayList([element]) : _.kotlin.dom.emptyElementList();
                                }
                                else {
                                    tmp$1 = _.kotlin.dom.elements(receiver, selector);
                                }
                                return tmp$1;
                            },
                            NodeListAsList: Kotlin.createClass(Kotlin.AbstractList, {
                                initialize: function (nodeList) {
                                    this.$nodeList = nodeList;
                                    this.super_init();
                                },
                                get_nodeList: function () {
                                    return this.$nodeList;
                                },
                                get: function (index) {
                                    var node = this.get_nodeList().item(index);
                                    if (node === null || node === undefined) {
                                        throw new Kotlin.IndexOutOfBoundsException('NodeList does not contain a node at index: ' + index);
                                    }
                                    else {
                                        return node;
                                    }
                                },
                                size: function () {
                                    return this.get_nodeList().length;
                                }
                            }),
                            ElementListAsList: Kotlin.createClass(Kotlin.AbstractList, {
                                initialize: function (nodeList) {
                                    this.$nodeList = nodeList;
                                    this.super_init();
                                },
                                get_nodeList: function () {
                                    return this.$nodeList;
                                },
                                get: function (index) {
                                    var node = this.get_nodeList().item(index);
                                    if (node === null || node === undefined) {
                                        throw new Kotlin.IndexOutOfBoundsException('NodeList does not contain a node at index: ' + index);
                                    }
                                    else if (node.nodeType === Node.ELEMENT_NODE) {
                                        return node;
                                    }
                                    else {
                                        throw new Kotlin.IllegalArgumentException('Node is not an Element as expected but is ' + node.toString());
                                    }
                                },
                                size: function () {
                                    return this.get_nodeList().length;
                                }
                            }),
                            clear: function (receiver) {
                                while (true) {
                                    var child = receiver.firstChild;
                                    if (child === null || child === undefined) {
                                        return;
                                    }
                                    else {
                                        receiver.removeChild(child);
                                    }
                                }
                            },
                            nextSiblings: function (receiver) {
                                return new _.kotlin.dom.NextSiblingIterator(receiver);
                            },
                            NextSiblingIterator: Kotlin.createClass(classes.c2c, {
                                initialize: function (node) {
                                    this.$node = node;
                                    this.super_init();
                                },
                                get_node: function () {
                                    return this.$node;
                                },
                                set_node: function (tmp$0) {
                                    this.$node = tmp$0;
                                },
                                computeNext: function () {
                                    var nextValue = this.get_node().nextSibling;
                                    if (nextValue !== null && nextValue !== undefined) {
                                        this.setNext(nextValue);
                                        this.set_node(nextValue);
                                    }
                                    else {
                                        this.done();
                                    }
                                }
                            }),
                            previousSiblings: function (receiver) {
                                return new _.kotlin.dom.PreviousSiblingIterator(receiver);
                            },
                            PreviousSiblingIterator: Kotlin.createClass(classes.c2c, {
                                initialize: function (node) {
                                    this.$node = node;
                                    this.super_init();
                                },
                                get_node: function () {
                                    return this.$node;
                                },
                                set_node: function (tmp$0) {
                                    this.$node = tmp$0;
                                },
                                computeNext: function () {
                                    var nextValue = this.get_node().previousSibling;
                                    if (nextValue !== null && nextValue !== undefined) {
                                        this.setNext(nextValue);
                                        this.set_node(nextValue);
                                    }
                                    else {
                                        this.done();
                                    }
                                }
                            }),
                            isText: function (receiver) {
                                var nt = receiver.nodeType;
                                return nt === Node.TEXT_NODE || nt === Node.CDATA_SECTION_NODE;
                            },
                            attribute: function (receiver, name) {
                                return receiver.getAttribute(name) !== null ? receiver.getAttribute(name) : '';
                            },
                            get_head: function (receiver) {
                                return receiver !== null && receiver !== undefined && receiver.length > 0 ? receiver.item(0) : null;
                            },
                            get_first: function (receiver) {
                                return _.kotlin.dom.get_head(receiver);
                            },
                            get_tail: function (receiver) {
                                if (receiver === null || receiver === undefined) {
                                    return null;
                                }
                                else {
                                    var s = receiver.length;
                                    return s > 0 ? receiver.item(s - 1) : null;
                                }
                            },
                            get_last: function (receiver) {
                                return _.kotlin.dom.get_tail(receiver);
                            },
                            toXmlString: function (receiver, xmlDeclaration) {
                                var tmp$0;
                                if (receiver === null || receiver === undefined)
                                    tmp$0 = '';
                                else {
                                    tmp$0 = _.kotlin.dom.nodesToXmlString(_.kotlin.dom.toList(receiver), xmlDeclaration);
                                }
                                return tmp$0;
                            },
                            nodesToXmlString: function (nodes, xmlDeclaration) {
                                var builder = new Kotlin.StringBuilder();
                                {
                                    var tmp$0 = nodes.iterator();
                                    while (tmp$0.hasNext()) {
                                        var n = tmp$0.next();
                                        builder.append(_.kotlin.dom.toXmlString_0(n, xmlDeclaration));
                                    }
                                }
                                return builder.toString();
                            },
                            plus: function (receiver, child) {
                                if (child !== null && child !== undefined) {
                                    receiver.appendChild(child);
                                }
                                return receiver;
                            },
                            plus_0: function (receiver, text) {
                                return _.kotlin.dom.addText(receiver, text, null);
                            },
                            plusAssign: function (receiver, text) {
                                return _.kotlin.dom.addText(receiver, text, null);
                            },
                            createElement: function (receiver, name, init) {
                                var tmp$0;
                                var elem = (tmp$0 = receiver.createElement(name)) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE();
                                init.call(elem);
                                return elem;
                            },
                            createElement_0: function (receiver, name, doc, init) {
                                var tmp$0;
                                var elem = (tmp$0 = _.kotlin.dom.ownerDocument(receiver, doc).createElement(name)) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE();
                                init.call(elem);
                                return elem;
                            },
                            ownerDocument: function (receiver, doc) {
                                var tmp$0;
                                if (receiver.nodeType === Node.DOCUMENT_NODE)
                                    tmp$0 = receiver;
                                else if (doc === null || doc === undefined)
                                    tmp$0 = receiver.ownerDocument;
                                else
                                    tmp$0 = doc;
                                var answer = tmp$0;
                                if (answer === null || answer === undefined) {
                                    throw new Kotlin.IllegalArgumentException('Element does not have an ownerDocument and none was provided for: ' + receiver.toString());
                                }
                                else {
                                    return answer;
                                }
                            },
                            addElement: function (receiver, name, init) {
                                var child = _.kotlin.dom.createElement(receiver, name, init);
                                receiver.appendChild(child);
                                return child;
                            },
                            addElement_0: function (receiver, name, doc, init) {
                                var child = _.kotlin.dom.createElement_0(receiver, name, doc, init);
                                receiver.appendChild(child);
                                return child;
                            },
                            addText: function (receiver, text, doc) {
                                if (text !== null && text !== undefined) {
                                    var tmp$0;
                                    var child = (tmp$0 = _.kotlin.dom.ownerDocument(receiver, doc).createTextNode(text)) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE();
                                    receiver.appendChild(child);
                                }
                                return receiver;
                            },
                            eventHandler: function (handler) {
                                return new _.kotlin.dom.EventListenerHandler(handler);
                            },
                            EventListenerHandler: Kotlin.createClass(classes.c2b, {
                                initialize: function (handler) {
                                    this.$handler = handler;
                                },
                                get_handler: function () {
                                    return this.$handler;
                                },
                                handleEvent: function (e) {
                                    if (e !== null && e !== undefined) {
                                        this.get_handler()(e);
                                    }
                                }
                            }),
                            mouseEventHandler: function (handler) {
                                return _.kotlin.dom.eventHandler(Kotlin.b2(_f.f6, null, [handler]));
                            },
                            on: function (receiver, name, capture, handler) {
                                return _.kotlin.dom.on_0(receiver, name, capture, _.kotlin.dom.eventHandler(handler));
                            },
                            on_0: function (receiver, name, capture, listener) {
                                var tmp$0;
                                if (Kotlin.isType(receiver, EventTarget)) {
                                    this.addEventListener(name, listener, capture);
                                    tmp$0 = new _.kotlin.dom.CloseableEventListener(receiver, listener, name, capture);
                                }
                                else {
                                    tmp$0 = null;
                                }
                                return tmp$0;
                            },
                            CloseableEventListener: Kotlin.createClass(Kotlin.Closeable, {
                                initialize: function (target, listener, name, capture) {
                                    this.$target = target;
                                    this.$listener = listener;
                                    this.$name = name;
                                    this.$capture = capture;
                                },
                                get_target: function () {
                                    return this.$target;
                                },
                                get_listener: function () {
                                    return this.$listener;
                                },
                                get_name: function () {
                                    return this.$name;
                                },
                                get_capture: function () {
                                    return this.$capture;
                                },
                                close: function () {
                                    this.get_target().removeEventListener(this.get_name(), this.get_listener(), this.get_capture());
                                }
                            }),
                            onClick: function (receiver, capture, handler) {
                                return _.kotlin.dom.on_0(receiver, 'click', capture, _.kotlin.dom.mouseEventHandler(handler));
                            },
                            onDoubleClick: function (receiver, capture, handler) {
                                return _.kotlin.dom.on_0(receiver, 'dblclick', capture, _.kotlin.dom.mouseEventHandler(handler));
                            },
                            createDocument: function () {
                                return document.implementation.createDocument(null, null, null);
                            },
                            toXmlString_1: function (receiver) {
                                return receiver.outerHTML;
                            },
                            toXmlString_0: function (receiver, xmlDeclaration) {
                                return receiver.outerHTML;
                            }
                        }),
                        test: Kotlin.definePackage({
                            assertTrue: function (message, block) {
                                var actual = block();
                                _.kotlin.test.get_asserter().assertTrue(message, actual);
                            },
                            assertTrue_0: function (block) {
                                _.kotlin.test.assertTrue(block.toString(), block);
                            },
                            assertNot: function (message, block) {
                                _.kotlin.test.assertTrue(message, Kotlin.b0(_f.f7, null, block));
                            },
                            assertNot_0: function (block) {
                                _.kotlin.test.assertNot(block.toString(), block);
                            },
                            assertTrue_1: function (actual, message) {
                                return _.kotlin.test.assertEquals(true, actual, message);
                            },
                            assertFalse: function (actual, message) {
                                return _.kotlin.test.assertEquals(false, actual, message);
                            },
                            assertEquals: function (expected, actual, message) {
                                _.kotlin.test.get_asserter().assertEquals(message, expected, actual);
                            },
                            assertNotNull: function (actual, message) {
                                _.kotlin.test.get_asserter().assertNotNull(message, actual);
                                var tmp$0;
                                return (tmp$0 = actual) !== null && tmp$0 !== undefined ? tmp$0 : Kotlin.throwNPE();
                            },
                            assertNotNull_0: function (actual, message, block) {
                                _.kotlin.test.get_asserter().assertNotNull(message, actual);
                                if (actual !== null && actual !== undefined) {
                                    block(actual);
                                }
                            },
                            assertNull: function (actual, message) {
                                _.kotlin.test.get_asserter().assertNull(message, actual);
                            },
                            fail: function (message) {
                                _.kotlin.test.get_asserter().fail(message);
                            },
                            expect: function (expected, block) {
                                _.kotlin.test.expect_0(expected, block.toString(), block);
                            },
                            expect_0: function (expected, message, block) {
                                var actual = block();
                                _.kotlin.test.assertEquals(expected, actual, message);
                            },
                            fails: function (block) {
                                try {
                                    block();
                                    _.kotlin.test.get_asserter().fail('Expected an exception to be thrown');
                                    return null;
                                }
                                catch (e) {
                                    return e;
                                }
                            },
                            Asserter: classes.c2d,
                            todo: function (block) {
                                Kotlin.println('TODO at ' + block);
                            },
                            get_asserter: function () {
                                return this.$asserter;
                            },
                            set_asserter: function (tmp$0) {
                                this.$asserter = tmp$0;
                            },
                            QUnitAsserter: Kotlin.createClass(classes.c2d, {
                                initialize: function () {
                                },
                                assertTrue: function (message, actual) {
                                    ok(actual, message);
                                },
                                assertEquals: function (message, expected, actual) {
                                    ok(Kotlin.equals(expected, actual), message + '. Expected <' + expected.toString() + '> actual <' + actual.toString() + '>');
                                },
                                assertNotNull: function (message, actual) {
                                    ok(actual !== null && actual !== undefined, message);
                                },
                                assertNull: function (message, actual) {
                                    ok(actual === null || actual === undefined, message);
                                },
                                fail: function (message) {
                                    ok(false, message);
                                }
                            })
                        })
                    })
                };
            (function () {
                this.Package = Kotlin.createObject({
                    initialize: function () {
                        this.$ORG_KEVOREE = 0;
                    },
                    get_ORG_KEVOREE: function () {
                        return this.$ORG_KEVOREE;
                    }
                });
            }.call(_.org.kevoree.factory));
            (function () {
                this.State = Kotlin.createObject({
                    initialize: function () {
                        this.$Ready = 0;
                        this.$NotReady = 1;
                        this.$Done = 2;
                        this.$Failed = 3;
                    },
                    get_Ready: function () {
                        return this.$Ready;
                    },
                    get_NotReady: function () {
                        return this.$NotReady;
                    },
                    get_Done: function () {
                        return this.$Done;
                    },
                    get_Failed: function () {
                        return this.$Failed;
                    }
                });
            }.call(_.kotlin.support));
            (function () {
                this.$asserter = new _.kotlin.test.QUnitAsserter();
            }.call(_.kotlin.test));
            Kotlin.defineModule('org.kevoree.js', _);
        }());

        return Kotlin.modules['org.kevoree.js'];
    }
);
