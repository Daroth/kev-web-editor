define(
  ['kotlin/kotlin-maps'],
  function (Kotlin) {

(function () {
  'use strict';
  var classes = function () {
    var c0 = Kotlin.createTrait()
    , ct = Kotlin.createTrait()
    , c12 = Kotlin.createTrait(ct, /** @lends _.org.kevoree.NamedElement.prototype */ {
      get_name: function () {
        return this.$name;
      },
      set_name: function (tmp$0) {
        this.$name = tmp$0;
      }
    })
    , c1 = Kotlin.createTrait([ct, c12])
    , c2 = Kotlin.createTrait(ct, /** @lends _.org.kevoree.AdaptationPrimitiveTypeRef.prototype */ {
      get_maxTime: function () {
        return this.$maxTime;
      },
      set_maxTime: function (tmp$0) {
        this.$maxTime = tmp$0;
      },
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_ref: function () {
        return this.$ref;
      },
      set_ref: function (tmp$0) {
        this.$ref = tmp$0;
      }
    })
    , cj = Kotlin.createTrait([ct, c12], /** @lends _.org.kevoree.Instance.prototype */ {
      get_metaData: function () {
        return this.$metaData;
      },
      set_metaData: function (tmp$0) {
        this.$metaData = tmp$0;
      },
      get_typeDefinition: function () {
        return this.$typeDefinition;
      },
      set_typeDefinition: function (tmp$0) {
        this.$typeDefinition = tmp$0;
      },
      get_dictionary: function () {
        return this.$dictionary;
      },
      set_dictionary: function (tmp$0) {
        this.$dictionary = tmp$0;
      }
    })
    , c3 = Kotlin.createTrait([ct, c12, cj], /** @lends _.org.kevoree.Channel.prototype */ {
      get_bindings: function () {
        return this.$bindings;
      },
      set_bindings: function (tmp$0) {
        this.$bindings = tmp$0;
      }
    })
    , c1g = Kotlin.createTrait([ct, c12], /** @lends _.org.kevoree.TypeDefinition.prototype */ {
      get_factoryBean: function () {
        return this.$factoryBean;
      },
      set_factoryBean: function (tmp$0) {
        this.$factoryBean = tmp$0;
      },
      get_bean: function () {
        return this.$bean;
      },
      set_bean: function (tmp$0) {
        this.$bean = tmp$0;
      },
      get_nature: function () {
        return this.$nature;
      },
      set_nature: function (tmp$0) {
        this.$nature = tmp$0;
      },
      get_deployUnits: function () {
        return this.$deployUnits;
      },
      set_deployUnits: function (tmp$0) {
        this.$deployUnits = tmp$0;
      },
      get_dictionaryType: function () {
        return this.$dictionaryType;
      },
      set_dictionaryType: function (tmp$0) {
        this.$dictionaryType = tmp$0;
      },
      get_superTypes: function () {
        return this.$superTypes;
      },
      set_superTypes: function (tmp$0) {
        this.$superTypes = tmp$0;
      }
    })
    , cm = Kotlin.createTrait([ct, c1g], /** @lends _.org.kevoree.LifeCycleTypeDefinition.prototype */ {
      get_startMethod: function () {
        return this.$startMethod;
      },
      set_startMethod: function (tmp$0) {
        this.$startMethod = tmp$0;
      },
      get_stopMethod: function () {
        return this.$stopMethod;
      },
      set_stopMethod: function (tmp$0) {
        this.$stopMethod = tmp$0;
      },
      get_updateMethod: function () {
        return this.$updateMethod;
      },
      set_updateMethod: function (tmp$0) {
        this.$updateMethod = tmp$0;
      }
    })
    , c4 = Kotlin.createTrait([ct, cm], /** @lends _.org.kevoree.ChannelType.prototype */ {
      get_lowerBindings: function () {
        return this.$lowerBindings;
      },
      set_lowerBindings: function (tmp$0) {
        this.$lowerBindings = tmp$0;
      },
      get_upperBindings: function () {
        return this.$upperBindings;
      },
      set_upperBindings: function (tmp$0) {
        this.$upperBindings = tmp$0;
      },
      get_lowerFragments: function () {
        return this.$lowerFragments;
      },
      set_lowerFragments: function (tmp$0) {
        this.$lowerFragments = tmp$0;
      },
      get_upperFragments: function () {
        return this.$upperFragments;
      },
      set_upperFragments: function (tmp$0) {
        this.$upperFragments = tmp$0;
      }
    })
    , c5 = Kotlin.createTrait([ct, c12, cj], /** @lends _.org.kevoree.ComponentInstance.prototype */ {
      get_provided: function () {
        return this.$provided;
      },
      set_provided: function (tmp$0) {
        this.$provided = tmp$0;
      },
      get_required: function () {
        return this.$required;
      },
      set_required: function (tmp$0) {
        this.$required = tmp$0;
      },
      get_namespace: function () {
        return this.$namespace;
      },
      set_namespace: function (tmp$0) {
        this.$namespace = tmp$0;
      }
    })
    , c6 = Kotlin.createTrait([ct, cm], /** @lends _.org.kevoree.ComponentType.prototype */ {
      get_required: function () {
        return this.$required;
      },
      set_required: function (tmp$0) {
        this.$required = tmp$0;
      },
      get_integrationPatterns: function () {
        return this.$integrationPatterns;
      },
      set_integrationPatterns: function (tmp$0) {
        this.$integrationPatterns = tmp$0;
      },
      get_extraFonctionalProperties: function () {
        return this.$extraFonctionalProperties;
      },
      set_extraFonctionalProperties: function (tmp$0) {
        this.$extraFonctionalProperties = tmp$0;
      },
      get_provided: function () {
        return this.$provided;
      },
      set_provided: function (tmp$0) {
        this.$provided = tmp$0;
      }
    })
    , c7 = Kotlin.createTrait([ct, c6], /** @lends _.org.kevoree.CompositeType.prototype */ {
      get_childs: function () {
        return this.$childs;
      },
      set_childs: function (tmp$0) {
        this.$childs = tmp$0;
      },
      get_wires: function () {
        return this.$wires;
      },
      set_wires: function (tmp$0) {
        this.$wires = tmp$0;
      }
    })
    , c8 = Kotlin.createTrait(ct, /** @lends _.org.kevoree.container.KMFContainerImpl.prototype */ {
      get_internal_eContainer: function () {
        return this.$internal_eContainer;
      },
      set_internal_eContainer: function (tmp$0) {
        this.$internal_eContainer = tmp$0;
      },
      get_internal_unsetCmd: function () {
        return this.$internal_unsetCmd;
      },
      set_internal_unsetCmd: function (tmp$0) {
        this.$internal_unsetCmd = tmp$0;
      },
      eContainer: function () {
        return this.get_internal_eContainer();
      },
      get_internal_containmentRefName: function () {
        return this.$internal_containmentRefName;
      },
      set_internal_containmentRefName: function (tmp$0) {
        this.$internal_containmentRefName = tmp$0;
      },
      get_internal_readOnlyElem: function () {
        return this.$internal_readOnlyElem;
      },
      set_internal_readOnlyElem: function (tmp$0) {
        this.$internal_readOnlyElem = tmp$0;
      },
      get_internal_recursive_readOnlyElem: function () {
        return this.$internal_recursive_readOnlyElem;
      },
      set_internal_recursive_readOnlyElem: function (tmp$0) {
        this.$internal_recursive_readOnlyElem = tmp$0;
      },
      setRecursiveReadOnly: function () {
        if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
          return;
        }
        this.setInternalRecursiveReadOnly();
        var recVisitor = _.org.kevoree.container.KMFContainerImpl.f0();
        this.visit(recVisitor, true, false);
        this.setInternalReadOnly();
      },
      setInternalReadOnly: function () {
        this.set_internal_readOnlyElem(true);
      },
      setInternalRecursiveReadOnly: function () {
        this.set_internal_recursive_readOnlyElem(true);
      },
      getRefInParent: function () {
        return this.get_internal_containmentRefName();
      },
      isReadOnly: function () {
        return this.get_internal_readOnlyElem();
      },
      isRecursiveReadOnly: function () {
        return this.get_internal_recursive_readOnlyElem();
      },
      setEContainer: function (container, unsetCmd, refNameInParent) {
        if (this.get_internal_readOnlyElem()) {
          return;
        }
        var tempUnsetCmd = this.get_internal_unsetCmd();
        this.set_internal_unsetCmd(null);
        if (tempUnsetCmd != null) {
          tempUnsetCmd.run();
        }
        this.set_internal_eContainer(container);
        this.set_internal_unsetCmd(unsetCmd);
        this.set_internal_containmentRefName(refNameInParent);
      },
      selectByQuery: function (query) {
        throw new Error('Not activated, please add selector option in KMF generation plugin');
      },
      get_internal_modelElementListeners: function () {
        return this.$internal_modelElementListeners;
      },
      set_internal_modelElementListeners: function (tmp$0) {
        this.$internal_modelElementListeners = tmp$0;
      },
      fireModelEvent: function (evt) {
        if (this.get_internal_modelElementListeners() != null) {
          var tmp$0;
          {
            var tmp$1 = ((tmp$0 = this.get_internal_modelElementListeners()) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
            while (tmp$1.hasNext()) {
              var lst = tmp$1.next();
              lst.elementChanged(evt);
            }
          }
        }
        this.fireModelEventOnTree(evt);
      },
      addModelElementListener: function (lst) {
        if (this.get_internal_modelElementListeners() == null) {
          this.set_internal_modelElementListeners(new Kotlin.ArrayList(0));
        }
        var tmp$0;
        ((tmp$0 = this.get_internal_modelElementListeners()) != null ? tmp$0 : Kotlin.throwNPE()).add(lst);
      },
      removeModelElementListener: function (lst) {
        if (this.get_internal_modelElementListeners() != null) {
          var tmp$0, tmp$1;
          ((tmp$0 = this.get_internal_modelElementListeners()) != null ? tmp$0 : Kotlin.throwNPE()).remove(lst);
          if (((tmp$1 = this.get_internal_modelElementListeners()) != null ? tmp$1 : Kotlin.throwNPE()).isEmpty()) {
            this.set_internal_modelElementListeners(null);
          }
        }
      },
      removeAllModelElementListeners: function () {
        if (this.get_internal_modelElementListeners() != null) {
          var tmp$0;
          ((tmp$0 = this.get_internal_modelElementListeners()) != null ? tmp$0 : Kotlin.throwNPE()).clear();
          this.set_internal_modelElementListeners(null);
        }
      },
      get_internal_modelTreeListeners: function () {
        return this.$internal_modelTreeListeners;
      },
      set_internal_modelTreeListeners: function (tmp$0) {
        this.$internal_modelTreeListeners = tmp$0;
      },
      fireModelEventOnTree: function (evt) {
        if (this.get_internal_modelTreeListeners() != null) {
          var tmp$0;
          {
            var tmp$1 = ((tmp$0 = this.get_internal_modelTreeListeners()) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
            while (tmp$1.hasNext()) {
              var lst = tmp$1.next();
              lst.elementChanged(evt);
            }
          }
        }
        if (this.eContainer() != null) {
          var tmp$2;
          ((tmp$2 = this.eContainer()) != null ? tmp$2 : Kotlin.throwNPE()).fireModelEventOnTree(evt);
        }
      },
      addModelTreeListener: function (lst) {
        if (this.get_internal_modelTreeListeners() == null) {
          this.set_internal_modelTreeListeners(new Kotlin.ArrayList(0));
        }
        var tmp$0;
        ((tmp$0 = this.get_internal_modelTreeListeners()) != null ? tmp$0 : Kotlin.throwNPE()).add(lst);
      },
      removeModelTreeListener: function (lst) {
        if (this.get_internal_modelTreeListeners() != null) {
          var tmp$0, tmp$1;
          ((tmp$0 = this.get_internal_modelTreeListeners()) != null ? tmp$0 : Kotlin.throwNPE()).remove(lst);
          if (((tmp$1 = this.get_internal_modelTreeListeners()) != null ? tmp$1 : Kotlin.throwNPE()).isEmpty()) {
            this.set_internal_modelTreeListeners(null);
          }
        }
      },
      removeAllModelTreeListeners: function () {
        if (this.get_internal_modelTreeListeners() != null) {
          var tmp$0;
          ((tmp$0 = this.get_internal_modelTreeListeners()) != null ? tmp$0 : Kotlin.throwNPE()).clear();
          this.set_internal_modelElementListeners(null);
        }
      },
      visit: function (visitor, recursive, onlyContainedRef) {
      }
    }, /** @lends _.org.kevoree.container.KMFContainerImpl */ {
      f0: function () {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            (elem != null ? elem : Kotlin.throwNPE()).setInternalRecursiveReadOnly();
            elem.setInternalReadOnly();
          }
        });
      }
    })
    , c9 = Kotlin.createTrait([ct, c12, cj], /** @lends _.org.kevoree.ContainerNode.prototype */ {
      get_components: function () {
        return this.$components;
      },
      set_components: function (tmp$0) {
        this.$components = tmp$0;
      },
      get_hosts: function () {
        return this.$hosts;
      },
      set_hosts: function (tmp$0) {
        this.$hosts = tmp$0;
      },
      get_host: function () {
        return this.$host;
      },
      set_host: function (tmp$0) {
        this.$host = tmp$0;
      }
    })
    , ca = Kotlin.createTrait(ct, /** @lends _.org.kevoree.ContainerRoot.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_nodes: function () {
        return this.$nodes;
      },
      set_nodes: function (tmp$0) {
        this.$nodes = tmp$0;
      },
      get_typeDefinitions: function () {
        return this.$typeDefinitions;
      },
      set_typeDefinitions: function (tmp$0) {
        this.$typeDefinitions = tmp$0;
      },
      get_repositories: function () {
        return this.$repositories;
      },
      set_repositories: function (tmp$0) {
        this.$repositories = tmp$0;
      },
      get_dataTypes: function () {
        return this.$dataTypes;
      },
      set_dataTypes: function (tmp$0) {
        this.$dataTypes = tmp$0;
      },
      get_libraries: function () {
        return this.$libraries;
      },
      set_libraries: function (tmp$0) {
        this.$libraries = tmp$0;
      },
      get_hubs: function () {
        return this.$hubs;
      },
      set_hubs: function (tmp$0) {
        this.$hubs = tmp$0;
      },
      get_mBindings: function () {
        return this.$mBindings;
      },
      set_mBindings: function (tmp$0) {
        this.$mBindings = tmp$0;
      },
      get_deployUnits: function () {
        return this.$deployUnits;
      },
      set_deployUnits: function (tmp$0) {
        this.$deployUnits = tmp$0;
      },
      get_nodeNetworks: function () {
        return this.$nodeNetworks;
      },
      set_nodeNetworks: function (tmp$0) {
        this.$nodeNetworks = tmp$0;
      },
      get_groups: function () {
        return this.$groups;
      },
      set_groups: function (tmp$0) {
        this.$groups = tmp$0;
      },
      get_adaptationPrimitiveTypes: function () {
        return this.$adaptationPrimitiveTypes;
      },
      set_adaptationPrimitiveTypes: function (tmp$0) {
        this.$adaptationPrimitiveTypes = tmp$0;
      }
    })
    , cb = Kotlin.createTrait(ct, /** @lends _.org.kevoree.DeployUnit.prototype */ {
      get_name: function () {
        return this.$name;
      },
      set_name: function (tmp$0) {
        this.$name = tmp$0;
      },
      get_groupName: function () {
        return this.$groupName;
      },
      set_groupName: function (tmp$0) {
        this.$groupName = tmp$0;
      },
      get_unitName: function () {
        return this.$unitName;
      },
      set_unitName: function (tmp$0) {
        this.$unitName = tmp$0;
      },
      get_version: function () {
        return this.$version;
      },
      set_version: function (tmp$0) {
        this.$version = tmp$0;
      },
      get_url: function () {
        return this.$url;
      },
      set_url: function (tmp$0) {
        this.$url = tmp$0;
      },
      get_hashcode: function () {
        return this.$hashcode;
      },
      set_hashcode: function (tmp$0) {
        this.$hashcode = tmp$0;
      },
      get_type: function () {
        return this.$type;
      },
      set_type: function (tmp$0) {
        this.$type = tmp$0;
      },
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_requiredLibs: function () {
        return this.$requiredLibs;
      },
      set_requiredLibs: function (tmp$0) {
        this.$requiredLibs = tmp$0;
      },
      get_targetNodeType: function () {
        return this.$targetNodeType;
      },
      set_targetNodeType: function (tmp$0) {
        this.$targetNodeType = tmp$0;
      }
    })
    , cc = Kotlin.createTrait(ct, /** @lends _.org.kevoree.Dictionary.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_values: function () {
        return this.$values;
      },
      set_values: function (tmp$0) {
        this.$values = tmp$0;
      }
    })
    , c1h = Kotlin.createTrait([ct, c12], /** @lends _.org.kevoree.TypedElement.prototype */ {
      get_genericTypes: function () {
        return this.$genericTypes;
      },
      set_genericTypes: function (tmp$0) {
        this.$genericTypes = tmp$0;
      }
    })
    , cd = Kotlin.createTrait([ct, c1h], /** @lends _.org.kevoree.DictionaryAttribute.prototype */ {
      get_optional: function () {
        return this.$optional;
      },
      set_optional: function (tmp$0) {
        this.$optional = tmp$0;
      },
      get_state: function () {
        return this.$state;
      },
      set_state: function (tmp$0) {
        this.$state = tmp$0;
      },
      get_datatype: function () {
        return this.$datatype;
      },
      set_datatype: function (tmp$0) {
        this.$datatype = tmp$0;
      },
      get_fragmentDependant: function () {
        return this.$fragmentDependant;
      },
      set_fragmentDependant: function (tmp$0) {
        this.$fragmentDependant = tmp$0;
      }
    })
    , ce = Kotlin.createTrait(ct, /** @lends _.org.kevoree.DictionaryType.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_attributes: function () {
        return this.$attributes;
      },
      set_attributes: function (tmp$0) {
        this.$attributes = tmp$0;
      },
      get_defaultValues: function () {
        return this.$defaultValues;
      },
      set_defaultValues: function (tmp$0) {
        this.$defaultValues = tmp$0;
      }
    })
    , cf = Kotlin.createTrait(ct, /** @lends _.org.kevoree.DictionaryValue.prototype */ {
      get_value: function () {
        return this.$value;
      },
      set_value: function (tmp$0) {
        this.$value = tmp$0;
      },
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_attribute: function () {
        return this.$attribute;
      },
      set_attribute: function (tmp$0) {
        this.$attribute = tmp$0;
      },
      get_targetNode: function () {
        return this.$targetNode;
      },
      set_targetNode: function (tmp$0) {
        this.$targetNode = tmp$0;
      }
    })
    , cg = Kotlin.createTrait(ct, /** @lends _.org.kevoree.ExtraFonctionalProperty.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_portTypes: function () {
        return this.$portTypes;
      },
      set_portTypes: function (tmp$0) {
        this.$portTypes = tmp$0;
      }
    })
    , ch = Kotlin.createTrait([ct, cj], /** @lends _.org.kevoree.Group.prototype */ {
      get_subNodes: function () {
        return this.$subNodes;
      },
      set_subNodes: function (tmp$0) {
        this.$subNodes = tmp$0;
      }
    })
    , ci = Kotlin.createTrait([ct, cm])
    , ck = Kotlin.createTrait([ct, c12], /** @lends _.org.kevoree.IntegrationPattern.prototype */ {
      get_extraFonctionalProperties: function () {
        return this.$extraFonctionalProperties;
      },
      set_extraFonctionalProperties: function (tmp$0) {
        this.$extraFonctionalProperties = tmp$0;
      },
      get_portTypes: function () {
        return this.$portTypes;
      },
      set_portTypes: function (tmp$0) {
        this.$portTypes = tmp$0;
      }
    })
    , cu = Kotlin.createTrait()
    , cl = Kotlin.createTrait(cu)
    , cn = Kotlin.createTrait()
    , co = Kotlin.createTrait(ct, /** @lends _.org.kevoree.MBinding.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_port: function () {
        return this.$port;
      },
      set_port: function (tmp$0) {
        this.$port = tmp$0;
      },
      get_hub: function () {
        return this.$hub;
      },
      set_hub: function (tmp$0) {
        this.$hub = tmp$0;
      }
    })
    , c1b = Kotlin.createTrait([ct, c1g], /** @lends _.org.kevoree.PortType.prototype */ {
      get_synchrone: function () {
        return this.$synchrone;
      },
      set_synchrone: function (tmp$0) {
        this.$synchrone = tmp$0;
      }
    })
    , cp = Kotlin.createTrait([ct, c1b], /** @lends _.org.kevoree.MessagePortType.prototype */ {
      get_filters: function () {
        return this.$filters;
      },
      set_filters: function (tmp$0) {
        this.$filters = tmp$0;
      }
    })
    , cq = Kotlin.createTrait()
    , cr = Kotlin.createTrait()
    , cs = Kotlin.createTrait(cr)
    , cv = Kotlin.createTrait()
    , cw = Kotlin.createTrait()
    , cx = Kotlin.createTrait()
    , cy = Kotlin.createTrait()
    , cz = Kotlin.createTrait()
    , c10 = Kotlin.createTrait()
    , c11 = Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.util.ModelVisitor.prototype */ {
      initialize: function () {
        this.$visitStopped = false;
      },
      get_visitStopped: function () {
        return this.$visitStopped;
      },
      set_visitStopped: function (tmp$0) {
        this.$visitStopped = tmp$0;
      },
      stopVisit: function () {
        this.set_visitStopped(true);
      }
    })
    , c13 = Kotlin.createTrait([ct, c12], /** @lends _.org.kevoree.Namespace.prototype */ {
      get_childs: function () {
        return this.$childs;
      },
      set_childs: function (tmp$0) {
        this.$childs = tmp$0;
      },
      get_parent: function () {
        return this.$parent;
      },
      set_parent: function (tmp$0) {
        this.$parent = tmp$0;
      }
    })
    , c14 = Kotlin.createTrait([ct, c12], /** @lends _.org.kevoree.NetworkProperty.prototype */ {
      get_value: function () {
        return this.$value;
      },
      set_value: function (tmp$0) {
        this.$value = tmp$0;
      },
      get_lastCheck: function () {
        return this.$lastCheck;
      },
      set_lastCheck: function (tmp$0) {
        this.$lastCheck = tmp$0;
      }
    })
    , c15 = Kotlin.createTrait(ct, /** @lends _.org.kevoree.NodeLink.prototype */ {
      get_networkType: function () {
        return this.$networkType;
      },
      set_networkType: function (tmp$0) {
        this.$networkType = tmp$0;
      },
      get_estimatedRate: function () {
        return this.$estimatedRate;
      },
      set_estimatedRate: function (tmp$0) {
        this.$estimatedRate = tmp$0;
      },
      get_lastCheck: function () {
        return this.$lastCheck;
      },
      set_lastCheck: function (tmp$0) {
        this.$lastCheck = tmp$0;
      },
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_networkProperties: function () {
        return this.$networkProperties;
      },
      set_networkProperties: function (tmp$0) {
        this.$networkProperties = tmp$0;
      }
    })
    , c16 = Kotlin.createTrait(ct, /** @lends _.org.kevoree.NodeNetwork.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_link: function () {
        return this.$link;
      },
      set_link: function (tmp$0) {
        this.$link = tmp$0;
      },
      get_initBy: function () {
        return this.$initBy;
      },
      set_initBy: function (tmp$0) {
        this.$initBy = tmp$0;
      },
      get_target: function () {
        return this.$target;
      },
      set_target: function (tmp$0) {
        this.$target = tmp$0;
      }
    })
    , c17 = Kotlin.createTrait([ct, cm], /** @lends _.org.kevoree.NodeType.prototype */ {
      get_managedPrimitiveTypes: function () {
        return this.$managedPrimitiveTypes;
      },
      set_managedPrimitiveTypes: function (tmp$0) {
        this.$managedPrimitiveTypes = tmp$0;
      },
      get_managedPrimitiveTypeRefs: function () {
        return this.$managedPrimitiveTypeRefs;
      },
      set_managedPrimitiveTypeRefs: function (tmp$0) {
        this.$managedPrimitiveTypeRefs = tmp$0;
      }
    })
    , c18 = Kotlin.createTrait([ct, c12], /** @lends _.org.kevoree.Operation.prototype */ {
      get_parameters: function () {
        return this.$parameters;
      },
      set_parameters: function (tmp$0) {
        this.$parameters = tmp$0;
      },
      get_returnType: function () {
        return this.$returnType;
      },
      set_returnType: function (tmp$0) {
        this.$returnType = tmp$0;
      }
    })
    , c19 = Kotlin.createTrait([ct, c12], /** @lends _.org.kevoree.Parameter.prototype */ {
      get_order: function () {
        return this.$order;
      },
      set_order: function (tmp$0) {
        this.$order = tmp$0;
      },
      get_type: function () {
        return this.$type;
      },
      set_type: function (tmp$0) {
        this.$type = tmp$0;
      }
    })
    , c1a = Kotlin.createTrait(ct, /** @lends _.org.kevoree.Port.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_bindings: function () {
        return this.$bindings;
      },
      set_bindings: function (tmp$0) {
        this.$bindings = tmp$0;
      },
      get_portTypeRef: function () {
        return this.$portTypeRef;
      },
      set_portTypeRef: function (tmp$0) {
        this.$portTypeRef = tmp$0;
      }
    })
    , c1c = Kotlin.createTrait(ct, /** @lends _.org.kevoree.PortTypeMapping.prototype */ {
      get_beanMethodName: function () {
        return this.$beanMethodName;
      },
      set_beanMethodName: function (tmp$0) {
        this.$beanMethodName = tmp$0;
      },
      get_serviceMethodName: function () {
        return this.$serviceMethodName;
      },
      set_serviceMethodName: function (tmp$0) {
        this.$serviceMethodName = tmp$0;
      },
      get_paramTypes: function () {
        return this.$paramTypes;
      },
      set_paramTypes: function (tmp$0) {
        this.$paramTypes = tmp$0;
      },
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      }
    })
    , c1d = Kotlin.createTrait([ct, c12], /** @lends _.org.kevoree.PortTypeRef.prototype */ {
      get_optional: function () {
        return this.$optional;
      },
      set_optional: function (tmp$0) {
        this.$optional = tmp$0;
      },
      get_noDependency: function () {
        return this.$noDependency;
      },
      set_noDependency: function (tmp$0) {
        this.$noDependency = tmp$0;
      },
      get_ref: function () {
        return this.$ref;
      },
      set_ref: function (tmp$0) {
        this.$ref = tmp$0;
      },
      get_mappings: function () {
        return this.$mappings;
      },
      set_mappings: function (tmp$0) {
        this.$mappings = tmp$0;
      }
    })
    , c1e = Kotlin.createTrait(ct, /** @lends _.org.kevoree.Repository.prototype */ {
      get_url: function () {
        return this.$url;
      },
      set_url: function (tmp$0) {
        this.$url = tmp$0;
      },
      get_units: function () {
        return this.$units;
      },
      set_units: function (tmp$0) {
        this.$units = tmp$0;
      }
    })
    , c1f = Kotlin.createTrait([ct, c1b], /** @lends _.org.kevoree.ServicePortType.prototype */ {
      get_interfaceService: function () {
        return this.$interfaceService;
      },
      set_interfaceService: function (tmp$0) {
        this.$interfaceService = tmp$0;
      },
      get_operations: function () {
        return this.$operations;
      },
      set_operations: function (tmp$0) {
        this.$operations = tmp$0;
      }
    })
    , c1i = Kotlin.createTrait([ct, c12], /** @lends _.org.kevoree.TypeLibrary.prototype */ {
      get_subTypes: function () {
        return this.$subTypes;
      },
      set_subTypes: function (tmp$0) {
        this.$subTypes = tmp$0;
      }
    })
    , c1j = Kotlin.createTrait(ct, /** @lends _.org.kevoree.Wire.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_ports: function () {
        return this.$ports;
      },
      set_ports: function (tmp$0) {
        this.$ports = tmp$0;
      }
    })
    , c1k = Kotlin.createTrait(/** @lends _.org.w3c.dom.events.EventListener.prototype */ {
      handleEvent: function (arg1) {
        noImpl;
      }
    })
    , c1l = Kotlin.createTrait()
    , c1m = Kotlin.createClass(Kotlin.Iterator, /** @lends _.kotlin.support.AbstractIterator.prototype */ {
      initialize: function () {
        this.$state = _.kotlin.support.State.get_NotReady();
        this.$nextValue = null;
      },
      get_state: function () {
        return this.$state;
      },
      set_state: function (tmp$0) {
        this.$state = tmp$0;
      },
      get_nextValue: function () {
        return this.$nextValue;
      },
      set_nextValue: function (tmp$0) {
        this.$nextValue = tmp$0;
      },
      hasNext: function () {
        _.kotlin.require(this.get_state() !== _.kotlin.support.State.get_Failed(), 'Failed requirement');
        var tmp$0 = this.get_state(), tmp$1;
        if (tmp$0 === _.kotlin.support.State.get_Done())
          tmp$1 = false;
        else if (tmp$0 === _.kotlin.support.State.get_Ready())
          tmp$1 = true;
        else
          tmp$1 = this.tryToComputeNext();
        return tmp$1;
      },
      next: function () {
        if (!this.hasNext())
          throw new Kotlin.NoSuchElementException();
        this.set_state(_.kotlin.support.State.get_NotReady());
        var tmp$0;
        return (tmp$0 = this.get_nextValue()) != null ? tmp$0 : Kotlin.throwNPE();
      },
      peek: function () {
        if (!this.hasNext())
          throw new Kotlin.NoSuchElementException();
        var tmp$0;
        return (tmp$0 = this.get_nextValue()) != null ? tmp$0 : Kotlin.throwNPE();
      },
      tryToComputeNext: function () {
        this.set_state(_.kotlin.support.State.get_Failed());
        this.computeNext();
        return this.get_state() === _.kotlin.support.State.get_Ready();
      },
      setNext: function (value) {
        this.set_nextValue(value);
        this.set_state(_.kotlin.support.State.get_Ready());
      },
      done: function () {
        this.set_state(_.kotlin.support.State.get_Done());
      }
    });
    return {c0: c0, ct: ct, c12: c12, c1: c1, c2: c2, cj: cj, c3: c3, c1g: c1g, cm: cm, c4: c4, c5: c5, c6: c6, c7: c7, c8: c8, c9: c9, ca: ca, cb: cb, cc: cc, c1h: c1h, cd: cd, ce: ce, cf: cf, cg: cg, ch: ch, ci: ci, ck: ck, cu: cu, cl: cl, cn: cn, co: co, c1b: c1b, cp: cp, cq: cq, cr: cr, cs: cs, cv: cv, cw: cw, cx: cx, cy: cy, cz: cz, c10: c10, c11: c11, c13: c13, c14: c14, c15: c15, c16: c16, c17: c17, c18: c18, c19: c19, c1a: c1a, c1c: c1c, c1d: c1d, c1e: c1e, c1f: c1f, c1i: c1i, c1j: c1j, c1k: c1k, c1l: c1l, c1m: c1m};
  }()
  , _ = {
    kotlin: Kotlin.definePackage({
      hashMap: function (values) {
        var answer = new Kotlin.ComplexHashMap(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var v = tmp$0[tmp$2];
            {
              answer.put(v.get_first(), v.get_second());
            }
          }
        }
        return answer;
      },
      toString: function ($receiver) {
        return _.kotlin.makeString($receiver, ', ', '[', ']', -1, '...');
      },
      arrayList: function (values) {
        var list = new Kotlin.ArrayList(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var value = tmp$0[tmp$2];
            {
              list.add(value);
            }
          }
        }
        return list;
      },
      hashSet: function (values) {
        var list = new Kotlin.ComplexHashSet();
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var value = tmp$0[tmp$2];
            {
              list.add(value);
            }
          }
        }
        return list;
      },
      map: function ($receiver, transform) {
        return _.kotlin.mapTo($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapValues: function ($receiver, transform) {
        return _.kotlin.mapValuesTo($receiver, new Kotlin.ComplexHashMap(0), transform);
      },
      Pair: Kotlin.createClass(null, /** @lends _.kotlin.Pair.prototype */ {
        initialize: function (first, second) {
          this.$first = first;
          this.$second = second;
        },
        get_first: function () {
          return this.$first;
        },
        get_second: function () {
          return this.$second;
        },
        component1: function () {
          return this.get_first();
        },
        component2: function () {
          return this.get_second();
        },
        toString: function () {
          return '(' + this.get_first().toString() + ', ' + this.get_second().toString() + ')';
        }
      }),
      Triple: Kotlin.createClass(null, /** @lends _.kotlin.Triple.prototype */ {
        initialize: function (first, second, third) {
          this.$first = first;
          this.$second = second;
          this.$third = third;
        },
        get_first: function () {
          return this.$first;
        },
        get_second: function () {
          return this.$second;
        },
        get_third: function () {
          return this.$third;
        },
        component1: function () {
          return this.get_first();
        },
        component2: function () {
          return this.get_second();
        },
        component3: function () {
          return this.get_third();
        },
        toString: function () {
          return '(' + this.get_first().toString() + ', ' + this.get_second().toString() + ', ' + this.get_third().toString() + ')';
        }
      }),
      all: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter: function ($receiver, predicate) {
        return _.kotlin.filterTo($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot: function ($receiver, predicate) {
        return _.kotlin.filterNotTo($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_0: function ($receiver, transform) {
        return _.kotlin.mapTo_0($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_0: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap: function ($receiver, transform) {
        return _.kotlin.flatMapTo($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy: function ($receiver, toKey) {
        return _.kotlin.groupByTo($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      f0: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.f0);
            list.add(element);
          }
        }
        return result;
      },
      drop: function ($receiver, n) {
        return _.kotlin.dropWhile($receiver, _.kotlin.countTo(n));
      },
      dropWhile: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take: function ($receiver, n) {
        return _.kotlin.takeWhile($receiver, _.kotlin.countTo(n));
      },
      takeWhile: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse: function ($receiver) {
        var list = _.kotlin.toCollection($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList: function ($receiver) {
        return _.kotlin.toCollection($receiver, new Kotlin.LinkedList());
      },
      toList: function ($receiver) {
        return _.kotlin.toCollection($receiver, new Kotlin.ArrayList(0));
      },
      toSet: function ($receiver) {
        return _.kotlin.toCollection($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet: function ($receiver) {
        return _.kotlin.toCollection($receiver, new Kotlin.TreeSet());
      },
      plus: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_0: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_1: function ($receiver, collection) {
        return _.kotlin.plus_0($receiver, collection.iterator());
      },
      withIndices: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      f1: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.f1.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_0: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      test: Kotlin.definePackage({
        todo: function (block) {
          Kotlin.println('TODO at ' + block);
        },
        get_asserter: function () {
          return this.$asserter;
        },
        set_asserter: function (tmp$0) {
          this.$asserter = tmp$0;
        },
        QUnitAsserter: Kotlin.createClass(classes.c1l, /** @lends _.kotlin.test.QUnitAsserter.prototype */ {
          initialize: function () {
          },
          assertTrue: function (message, actual) {
            ok(actual, message);
          },
          assertEquals: function (message, expected, actual) {
            ok(Kotlin.equals(expected, actual), message + '. Expected <' + expected.toString() + '> actual <' + actual.toString() + '>');
          },
          assertNotNull: function (message, actual) {
            ok(actual != null, message);
          },
          assertNull: function (message, actual) {
            ok(actual == null, message);
          },
          fail: function (message) {
            ok(false, message);
          }
        }),
        assertTrue: function (message, block) {
          var actual = block();
          _.kotlin.test.get_asserter().assertTrue(message, actual);
        },
        assertTrue_0: function (block) {
          _.kotlin.test.assertTrue(Kotlin.toString(block), block);
        },
        f0: function (block) {
          return !block();
        },
        assertNot: function (message, block) {
          _.kotlin.test.assertTrue(message, _.kotlin.test.f0.bind(null, block));
        },
        assertNot_0: function (block) {
          _.kotlin.test.assertNot(Kotlin.toString(block), block);
        },
        assertTrue_1: function (actual, message) {
          return _.kotlin.test.assertEquals(true, actual, message);
        },
        assertFalse: function (actual, message) {
          return _.kotlin.test.assertEquals(false, actual, message);
        },
        assertEquals: function (expected, actual, message) {
          _.kotlin.test.get_asserter().assertEquals(message, expected, actual);
        },
        assertNotNull: function (actual, message) {
          _.kotlin.test.get_asserter().assertNotNull(message, actual);
          return actual != null ? actual : Kotlin.throwNPE();
        },
        assertNotNull_0: function (actual, message, block) {
          _.kotlin.test.get_asserter().assertNotNull(message, actual);
          if (actual != null) {
            block(actual);
          }
        },
        assertNull: function (actual, message) {
          _.kotlin.test.get_asserter().assertNull(message, actual);
        },
        fail: function (message) {
          _.kotlin.test.get_asserter().fail(message);
        },
        expect: function (expected, block) {
          _.kotlin.test.expect_0(expected, Kotlin.toString(block), block);
        },
        expect_0: function (expected, message, block) {
          var actual = block();
          _.kotlin.test.assertEquals(expected, actual, message);
        },
        fails: function (block) {
          try {
            block();
            _.kotlin.test.get_asserter().fail('Expected an exception to be thrown');
            return null;
          }
           catch (e) {
            return e;
          }
        },
        Asserter: classes.c1l
      }),
      dom: Kotlin.definePackage({
        createDocument: function () {
          return document.implementation.createDocument(null, null, null);
        },
        toXmlString: function ($receiver) {
          return $receiver.outerHTML;
        },
        toXmlString_0: function ($receiver, xmlDeclaration) {
          return $receiver.outerHTML;
        },
        eventHandler: function (handler) {
          return new _.kotlin.dom.EventListenerHandler(handler);
        },
        EventListenerHandler: Kotlin.createClass(classes.c1k, /** @lends _.kotlin.dom.EventListenerHandler.prototype */ {
          initialize: function (handler) {
            this.$handler = handler;
          },
          get_handler: function () {
            return this.$handler;
          },
          handleEvent: function (e) {
            if (e != null) {
              this.get_handler()(e);
            }
          }
        }),
        f0: function (handler, e) {
          if (Kotlin.isType(e, MouseEvent)) {
            handler(e);
          }
        },
        mouseEventHandler: function (handler) {
          return _.kotlin.dom.eventHandler(_.kotlin.dom.f0.bind(null, handler));
        },
        on: function ($receiver, name, capture, handler) {
          return _.kotlin.dom.on_0($receiver, name, capture, _.kotlin.dom.eventHandler(handler));
        },
        on_0: function ($receiver, name, capture, listener) {
          var tmp$0;
          if (Kotlin.isType($receiver, EventTarget)) {
            addEventListener(name, listener, capture);
            tmp$0 = new _.kotlin.dom.CloseableEventListener($receiver, listener, name, capture);
          }
           else {
            tmp$0 = null;
          }
          return tmp$0;
        },
        CloseableEventListener: Kotlin.createClass(Kotlin.Closeable, /** @lends _.kotlin.dom.CloseableEventListener.prototype */ {
          initialize: function (target, listener, name, capture) {
            this.$target = target;
            this.$listener = listener;
            this.$name = name;
            this.$capture = capture;
          },
          get_target: function () {
            return this.$target;
          },
          get_listener: function () {
            return this.$listener;
          },
          get_name: function () {
            return this.$name;
          },
          get_capture: function () {
            return this.$capture;
          },
          close: function () {
            this.get_target().removeEventListener(this.get_name(), this.get_listener(), this.get_capture());
          }
        }),
        onClick: function ($receiver, capture, handler) {
          return _.kotlin.dom.on_0($receiver, 'click', capture, _.kotlin.dom.mouseEventHandler(handler));
        },
        onDoubleClick: function ($receiver, capture, handler) {
          return _.kotlin.dom.on_0($receiver, 'dblclick', capture, _.kotlin.dom.mouseEventHandler(handler));
        },
        emptyElementList: function () {
          return Kotlin.emptyList();
        },
        emptyNodeList: function () {
          return Kotlin.emptyList();
        },
        get_text: function ($receiver) {
          return $receiver.textContent;
        },
        set_text: function ($receiver, value) {
          $receiver.textContent = value;
        },
        get_childrenText: function ($receiver) {
          var buffer = new Kotlin.StringBuilder();
          var nodeList = $receiver.childNodes;
          var i = 0;
          var size = nodeList.length;
          while (i < size) {
            var node = nodeList.item(i);
            if (node != null) {
              if (_.kotlin.dom.isText(node)) {
                buffer.append(node.nodeValue);
              }
            }
            i++;
          }
          return buffer.toString();
        },
        set_childrenText: function ($receiver, value) {
          var element = $receiver;
          {
            var tmp$0 = _.kotlin.dom.children(element).iterator();
            while (tmp$0.hasNext()) {
              var node = tmp$0.next();
              if (_.kotlin.dom.isText(node)) {
                $receiver.removeChild(node);
              }
            }
          }
          _.kotlin.dom.addText(element, value, null);
        },
        get_id: function ($receiver) {
          return $receiver.getAttribute('id') !== null ? $receiver.getAttribute('id') : '';
        },
        set_id: function ($receiver, value) {
          $receiver.setAttribute('id', value);
          $receiver.setIdAttribute('id', true);
        },
        get_style: function ($receiver) {
          return $receiver.getAttribute('style') !== null ? $receiver.getAttribute('style') : '';
        },
        set_style: function ($receiver, value) {
          $receiver.setAttribute('style', value);
        },
        get_classes: function ($receiver) {
          return $receiver.getAttribute('class') !== null ? $receiver.getAttribute('class') : '';
        },
        set_classes: function ($receiver, value) {
          $receiver.setAttribute('class', value);
        },
        hasClass: function ($receiver, cssClass) {
          var c = _.kotlin.dom.get_classes($receiver);
          return _.js.matches(c, '(^|.*' + '\\' + 's+)' + cssClass + '(' + '$' + '|' + '\\' + 's+.*)');
        },
        children: function ($receiver) {
          return _.kotlin.dom.toList($receiver != null ? $receiver.childNodes : null);
        },
        f1: function (it) {
          return it.nodeType === Node.ELEMENT_NODE;
        },
        f2: function (it) {
          return it != null ? it : Kotlin.throwNPE();
        },
        childElements: function ($receiver) {
          return _.kotlin.map_3(_.kotlin.filter_2(_.kotlin.dom.children($receiver), _.kotlin.dom.f1), _.kotlin.dom.f2);
        },
        f3: function (name, it) {
          return it.nodeType === Node.ELEMENT_NODE && Kotlin.equals(it.nodeName, name);
        },
        f4: function (it) {
          return it != null ? it : Kotlin.throwNPE();
        },
        childElements_0: function ($receiver, name) {
          return _.kotlin.map_3(_.kotlin.filter_2(_.kotlin.dom.children($receiver), _.kotlin.dom.f3.bind(null, name)), _.kotlin.dom.f4);
        },
        get_elements: function ($receiver) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName('*') : null);
        },
        get_elements_0: function ($receiver) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName('*') : null);
        },
        elements: function ($receiver, localName) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName(localName) : null);
        },
        elements_0: function ($receiver, localName) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName(localName) : null);
        },
        elements_1: function ($receiver, namespaceUri, localName) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagNameNS(namespaceUri, localName) : null);
        },
        elements_2: function ($receiver, namespaceUri, localName) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagNameNS(namespaceUri, localName) : null);
        },
        toList: function ($receiver) {
          var tmp$0;
          if ($receiver == null) {
            tmp$0 = _.kotlin.dom.emptyNodeList();
          }
           else {
            tmp$0 = new _.kotlin.dom.NodeListAsList($receiver);
          }
          return tmp$0;
        },
        toElementList: function ($receiver) {
          var tmp$0;
          if ($receiver == null) {
            tmp$0 = new Kotlin.ArrayList(0);
          }
           else {
            tmp$0 = new _.kotlin.dom.ElementListAsList($receiver);
          }
          return tmp$0;
        },
        f5: function (selector, it) {
          return _.kotlin.dom.hasClass(it, selector.substring(1));
        },
        get: function ($receiver, selector) {
          var root = $receiver != null ? $receiver.documentElement : null;
          var tmp$0;
          if (root != null) {
            if (Kotlin.equals(selector, '*')) {
              tmp$0 = _.kotlin.dom.get_elements($receiver);
            }
             else if (selector.startsWith('.')) {
              tmp$0 = _.kotlin.toList_2(_.kotlin.filter_2(_.kotlin.dom.get_elements($receiver), _.kotlin.dom.f5.bind(null, selector)));
            }
             else if (selector.startsWith('#')) {
              var id = selector.substring(1);
              var element = $receiver != null ? $receiver.getElementById(id) : null;
              return element != null ? _.kotlin.arrayList([element]) : _.kotlin.dom.emptyElementList();
            }
             else {
              tmp$0 = _.kotlin.dom.elements_0($receiver, selector);
            }
          }
           else {
            tmp$0 = _.kotlin.dom.emptyElementList();
          }
          return tmp$0;
        },
        f6: function (selector, it) {
          return _.kotlin.dom.hasClass(it, selector.substring(1));
        },
        get_0: function ($receiver, selector) {
          var tmp$1;
          if (Kotlin.equals(selector, '*')) {
            tmp$1 = _.kotlin.dom.get_elements_0($receiver);
          }
           else if (selector.startsWith('.')) {
            tmp$1 = _.kotlin.toList_2(_.kotlin.filter_2(_.kotlin.dom.get_elements_0($receiver), _.kotlin.dom.f6.bind(null, selector)));
          }
           else if (selector.startsWith('#')) {
            var tmp$0;
            var element = (tmp$0 = $receiver.ownerDocument) != null ? tmp$0.getElementById(selector.substring(1)) : null;
            return element != null ? _.kotlin.arrayList([element]) : _.kotlin.dom.emptyElementList();
          }
           else {
            tmp$1 = _.kotlin.dom.elements($receiver, selector);
          }
          return tmp$1;
        },
        NodeListAsList: Kotlin.createClass(Kotlin.AbstractList, /** @lends _.kotlin.dom.NodeListAsList.prototype */ {
          initialize: function (nodeList) {
            this.$nodeList = nodeList;
            this.super_init();
          },
          get_nodeList: function () {
            return this.$nodeList;
          },
          get: function (index) {
            var node = this.get_nodeList().item(index);
            if (node == null) {
              throw new RangeError('NodeList does not contain a node at index: ' + index);
            }
             else {
              return node;
            }
          },
          size: function () {
            return this.get_nodeList().length;
          }
        }),
        ElementListAsList: Kotlin.createClass(Kotlin.AbstractList, /** @lends _.kotlin.dom.ElementListAsList.prototype */ {
          initialize: function (nodeList) {
            this.$nodeList = nodeList;
            this.super_init();
          },
          get_nodeList: function () {
            return this.$nodeList;
          },
          get: function (index) {
            var node = this.get_nodeList().item(index);
            if (node == null) {
              throw new RangeError('NodeList does not contain a node at index: ' + index);
            }
             else if (node.nodeType === Node.ELEMENT_NODE) {
              return node != null ? node : Kotlin.throwNPE();
            }
             else {
              throw new Kotlin.IllegalArgumentException('Node is not an Element as expected but is ' + node.toString());
            }
          },
          size: function () {
            return this.get_nodeList().length;
          }
        }),
        clear: function ($receiver) {
          while (true) {
            var child = $receiver.firstChild;
            if (child == null) {
              return;
            }
             else {
              $receiver.removeChild(child);
            }
          }
        },
        nextSiblings: function ($receiver) {
          return new _.kotlin.dom.NextSiblingIterator($receiver);
        },
        NextSiblingIterator: Kotlin.createClass(classes.c1m, /** @lends _.kotlin.dom.NextSiblingIterator.prototype */ {
          initialize: function (node) {
            this.$node = node;
            this.super_init();
          },
          get_node: function () {
            return this.$node;
          },
          set_node: function (tmp$0) {
            this.$node = tmp$0;
          },
          computeNext: function () {
            var nextValue = this.get_node().nextSibling;
            if (nextValue != null) {
              this.setNext(nextValue);
              this.set_node(nextValue);
            }
             else {
              this.done();
            }
          }
        }),
        previousSiblings: function ($receiver) {
          return new _.kotlin.dom.PreviousSiblingIterator($receiver);
        },
        PreviousSiblingIterator: Kotlin.createClass(classes.c1m, /** @lends _.kotlin.dom.PreviousSiblingIterator.prototype */ {
          initialize: function (node) {
            this.$node = node;
            this.super_init();
          },
          get_node: function () {
            return this.$node;
          },
          set_node: function (tmp$0) {
            this.$node = tmp$0;
          },
          computeNext: function () {
            var nextValue = this.get_node().previousSibling;
            if (nextValue != null) {
              this.setNext(nextValue);
              this.set_node(nextValue);
            }
             else {
              this.done();
            }
          }
        }),
        isText: function ($receiver) {
          var nt = $receiver.nodeType;
          return nt === Node.TEXT_NODE || nt === Node.CDATA_SECTION_NODE;
        },
        attribute: function ($receiver, name) {
          return $receiver.getAttribute(name) !== null ? $receiver.getAttribute(name) : '';
        },
        get_head: function ($receiver) {
          return $receiver != null && $receiver.length > 0 ? $receiver.item(0) : null;
        },
        get_first: function ($receiver) {
          return _.kotlin.dom.get_head($receiver);
        },
        get_tail: function ($receiver) {
          if ($receiver == null) {
            return null;
          }
           else {
            var s = $receiver.length;
            return s > 0 ? $receiver.item(s - 1) : null;
          }
        },
        get_last: function ($receiver) {
          return _.kotlin.dom.get_tail($receiver);
        },
        toXmlString_1: function ($receiver, xmlDeclaration) {
          var tmp$0;
          if ($receiver == null)
            tmp$0 = '';
          else {
            tmp$0 = _.kotlin.dom.nodesToXmlString(_.kotlin.dom.toList($receiver), xmlDeclaration);
          }
          return tmp$0;
        },
        nodesToXmlString: function (nodes, xmlDeclaration) {
          var builder = new Kotlin.StringBuilder();
          {
            var tmp$0 = nodes.iterator();
            while (tmp$0.hasNext()) {
              var n = tmp$0.next();
              builder.append(_.kotlin.dom.toXmlString_0(n, xmlDeclaration));
            }
          }
          return builder.toString();
        },
        plus: function ($receiver, child) {
          if (child != null) {
            $receiver.appendChild(child);
          }
          return $receiver;
        },
        plus_0: function ($receiver, text) {
          return _.kotlin.dom.addText($receiver, text, null);
        },
        plusAssign: function ($receiver, text) {
          return _.kotlin.dom.addText($receiver, text, null);
        },
        createElement: function ($receiver, name, init) {
          var tmp$0;
          var elem = (tmp$0 = $receiver.createElement(name)) != null ? tmp$0 : Kotlin.throwNPE();
          init(elem);
          return elem;
        },
        createElement_0: function ($receiver, name, doc, init) {
          var tmp$0;
          var elem = (tmp$0 = _.kotlin.dom.ownerDocument($receiver, doc).createElement(name)) != null ? tmp$0 : Kotlin.throwNPE();
          init(elem);
          return elem;
        },
        ownerDocument: function ($receiver, doc) {
          var tmp$0;
          if ($receiver.nodeType === Node.DOCUMENT_NODE)
            tmp$0 = $receiver != null ? $receiver : Kotlin.throwNPE();
          else if (doc == null)
            tmp$0 = $receiver.ownerDocument;
          else
            tmp$0 = doc;
          var answer = tmp$0;
          if (answer == null) {
            throw new Kotlin.IllegalArgumentException('Element does not have an ownerDocument and none was provided for: ' + $receiver.toString());
          }
           else {
            return answer;
          }
        },
        addElement: function ($receiver, name, init) {
          var child = _.kotlin.dom.createElement($receiver, name, init);
          $receiver.appendChild(child);
          return child;
        },
        addElement_0: function ($receiver, name, doc, init) {
          var child = _.kotlin.dom.createElement_0($receiver, name, doc, init);
          $receiver.appendChild(child);
          return child;
        },
        addText: function ($receiver, text, doc) {
          if (text != null) {
            var tmp$0;
            var child = (tmp$0 = _.kotlin.dom.ownerDocument($receiver, doc).createTextNode(text)) != null ? tmp$0 : Kotlin.throwNPE();
            $receiver.appendChild(child);
          }
          return $receiver;
        }
      }),
      all_0: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_0: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_0: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_0: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_0: function ($receiver, predicate) {
        return _.kotlin.filterTo_0($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_0: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_0: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_0($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_0: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_0: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_1: function ($receiver, transform) {
        return _.kotlin.mapTo_1($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_1: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_0: function ($receiver, transform) {
        return _.kotlin.flatMapTo_0($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_0: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_0: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_0: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_0: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_0: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_0: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_0: function ($receiver, toKey) {
        return _.kotlin.groupByTo_0($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      f2: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_0: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.f2);
            list.add(element);
          }
        }
        return result;
      },
      drop_0: function ($receiver, n) {
        return _.kotlin.dropWhile_0($receiver, _.kotlin.countTo(n));
      },
      dropWhile_0: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_0($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_0: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_0: function ($receiver, n) {
        return _.kotlin.takeWhile_0($receiver, _.kotlin.countTo(n));
      },
      takeWhile_0: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_0($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_0: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_0: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_0: function ($receiver) {
        var list = _.kotlin.toCollection_0($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_0: function ($receiver) {
        return _.kotlin.toCollection_0($receiver, new Kotlin.LinkedList());
      },
      toList_0: function ($receiver) {
        return _.kotlin.toCollection_0($receiver, new Kotlin.ArrayList(0));
      },
      toSet_0: function ($receiver) {
        return _.kotlin.toCollection_0($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_0: function ($receiver) {
        return _.kotlin.toCollection_0($receiver, new Kotlin.TreeSet());
      },
      plus_2: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_0($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_3: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_0($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_4: function ($receiver, collection) {
        return _.kotlin.plus_3($receiver, collection.iterator());
      },
      withIndices_0: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      f3: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_0: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_0($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.f3.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_0: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_1: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_0($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      iterator: function ($receiver) {
        return Kotlin.createObject(Kotlin.Iterator, {
          initialize: function () {
          },
          hasNext: function () {
            return $receiver.hasMoreElements();
          },
          next: function () {
            return $receiver.nextElement();
          }
        });
      },
      toArrayList: function ($receiver) {
        return _.kotlin.toCollection_1($receiver, new Kotlin.ArrayList(0));
      },
      toHashSet: function ($receiver) {
        return _.kotlin.toCollection_1($receiver, new Kotlin.ComplexHashSet());
      },
      to: function ($receiver, that) {
        return new _.kotlin.Pair($receiver, that);
      },
      run: function (f) {
        return f();
      },
      with: function (receiver, f) {
        return f(receiver);
      },
      let: function ($receiver, f) {
        return f($receiver);
      },
      all_1: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_1: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_1: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_1: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_1: function ($receiver, predicate) {
        return _.kotlin.filterTo_1($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_1: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_1: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_1($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_1: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_1: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_2: function ($receiver, transform) {
        return _.kotlin.mapTo_2($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_2: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_1: function ($receiver, transform) {
        return _.kotlin.flatMapTo_1($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_1: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_1: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_1: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_1: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_1: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_1: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_1: function ($receiver, toKey) {
        return _.kotlin.groupByTo_1($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      f4: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_1: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.f4);
            list.add(element);
          }
        }
        return result;
      },
      drop_1: function ($receiver, n) {
        return _.kotlin.dropWhile_1($receiver, _.kotlin.countTo(n));
      },
      dropWhile_1: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_1($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_1: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_1: function ($receiver, n) {
        return _.kotlin.takeWhile_1($receiver, _.kotlin.countTo(n));
      },
      takeWhile_1: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_1($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_1: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_2: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_1: function ($receiver) {
        var list = _.kotlin.toCollection_2($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_1: function ($receiver) {
        return _.kotlin.toCollection_2($receiver, new Kotlin.LinkedList());
      },
      toList_1: function ($receiver) {
        return _.kotlin.toCollection_2($receiver, new Kotlin.ArrayList(0));
      },
      toSet_1: function ($receiver) {
        return _.kotlin.toCollection_2($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_1: function ($receiver) {
        return _.kotlin.toCollection_2($receiver, new Kotlin.TreeSet());
      },
      plus_5: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_2($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_6: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_2($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_7: function ($receiver, collection) {
        return _.kotlin.plus_6($receiver, collection.iterator());
      },
      withIndices_1: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      f5: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_1: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_2($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.f5.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_1: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_2: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_1($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_2: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_2: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_2: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_2: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_3: function ($receiver, predicate) {
        return _.kotlin.filterTo_2($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_2: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_2: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_2($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_2: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_2: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_4: function ($receiver, transform) {
        return _.kotlin.mapTo_3($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_3: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_2: function ($receiver, transform) {
        return _.kotlin.flatMapTo_2($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_2: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_2: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_2: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_2: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_2: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_2: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_2: function ($receiver, toKey) {
        return _.kotlin.groupByTo_2($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      f6: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_2: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.f6);
            list.add(element);
          }
        }
        return result;
      },
      drop_2: function ($receiver, n) {
        return _.kotlin.dropWhile_2($receiver, _.kotlin.countTo(n));
      },
      dropWhile_2: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_2($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_2: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_2: function ($receiver, n) {
        return _.kotlin.takeWhile_2($receiver, _.kotlin.countTo(n));
      },
      takeWhile_2: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_2($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_2: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_3: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_2: function ($receiver) {
        var list = _.kotlin.toCollection_3($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_2: function ($receiver) {
        return _.kotlin.toCollection_3($receiver, new Kotlin.LinkedList());
      },
      toList_3: function ($receiver) {
        return _.kotlin.toCollection_3($receiver, new Kotlin.ArrayList(0));
      },
      toSet_2: function ($receiver) {
        return _.kotlin.toCollection_3($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_2: function ($receiver) {
        return _.kotlin.toCollection_3($receiver, new Kotlin.TreeSet());
      },
      plus_8: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_3($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_9: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_3($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_10: function ($receiver, collection) {
        return _.kotlin.plus_9($receiver, collection.iterator());
      },
      withIndices_2: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      f7: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_2: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_3($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.f7.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_2: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_3: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_2($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      downTo: function ($receiver, to) {
        return new _.jet.ByteProgression($receiver, to, -1);
      },
      downTo_0: function ($receiver, to) {
        return new _.jet.CharProgression($receiver.toChar(), to, -1);
      },
      downTo_1: function ($receiver, to) {
        return new _.jet.ShortProgression($receiver, to, -1);
      },
      downTo_2: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to, -1);
      },
      downTo_3: function ($receiver, to) {
        return new _.jet.LongProgression($receiver.toLong(), to, -(1).toLong());
      },
      downTo_4: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_5: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_6: function ($receiver, to) {
        return new _.jet.CharProgression($receiver, to.toChar(), -1);
      },
      downTo_7: function ($receiver, to) {
        return new _.jet.CharProgression($receiver, to, -1);
      },
      downTo_8: function ($receiver, to) {
        return new _.jet.ShortProgression($receiver.toShort(), to, -1);
      },
      downTo_9: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver.toInt(), to, -1);
      },
      downTo_10: function ($receiver, to) {
        return new _.jet.LongProgression($receiver.toLong(), to, -(1).toLong());
      },
      downTo_11: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver.toFloat(), to, -1);
      },
      downTo_12: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver.toDouble(), to, -1.0);
      },
      downTo_13: function ($receiver, to) {
        return new _.jet.ShortProgression($receiver, to, -1);
      },
      downTo_14: function ($receiver, to) {
        return new _.jet.ShortProgression($receiver, to.toShort(), -1);
      },
      downTo_15: function ($receiver, to) {
        return new _.jet.ShortProgression($receiver, to, -1);
      },
      downTo_16: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to, -1);
      },
      downTo_17: function ($receiver, to) {
        return new _.jet.LongProgression($receiver.toLong(), to, -(1).toLong());
      },
      downTo_18: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_19: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_20: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to, -1);
      },
      downTo_21: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to.toInt(), -1);
      },
      downTo_22: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to, -1);
      },
      downTo_23: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to, -1);
      },
      downTo_24: function ($receiver, to) {
        return new _.jet.LongProgression($receiver.toLong(), to, -(1).toLong());
      },
      downTo_25: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_26: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_27: function ($receiver, to) {
        return new _.jet.LongProgression($receiver, to.toLong(), -(1).toLong());
      },
      downTo_28: function ($receiver, to) {
        return new _.jet.LongProgression($receiver, to.toLong(), -(1).toLong());
      },
      downTo_29: function ($receiver, to) {
        return new _.jet.LongProgression($receiver, to.toLong(), -(1).toLong());
      },
      downTo_30: function ($receiver, to) {
        return new _.jet.LongProgression($receiver, to.toLong(), -(1).toLong());
      },
      downTo_31: function ($receiver, to) {
        return new _.jet.LongProgression($receiver, to, -(1).toLong());
      },
      downTo_32: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver.toFloat(), to, -1);
      },
      downTo_33: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver.toDouble(), to, -1.0);
      },
      downTo_34: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_35: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to.toFloat(), -1);
      },
      downTo_36: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_37: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_38: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to.toFloat(), -1);
      },
      downTo_39: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_40: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_41: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_42: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to.toDouble(), -1.0);
      },
      downTo_43: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_44: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_45: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to.toDouble(), -1.0);
      },
      downTo_46: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_47: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      all_3: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_3: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_3: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_3: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_4: function ($receiver, predicate) {
        return _.kotlin.filterTo_3($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_3: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_3: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_3($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_3: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_3: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_5: function ($receiver, transform) {
        return _.kotlin.mapTo_4($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_4: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_3: function ($receiver, transform) {
        return _.kotlin.flatMapTo_3($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_3: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_3: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_3: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_3: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_3: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_3: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_3: function ($receiver, toKey) {
        return _.kotlin.groupByTo_3($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      f8: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_3: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.f8);
            list.add(element);
          }
        }
        return result;
      },
      drop_3: function ($receiver, n) {
        return _.kotlin.dropWhile_3($receiver, _.kotlin.countTo(n));
      },
      dropWhile_3: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_3($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_3: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_3: function ($receiver, n) {
        return _.kotlin.takeWhile_3($receiver, _.kotlin.countTo(n));
      },
      takeWhile_3: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_3($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_3: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_4: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_3: function ($receiver) {
        var list = _.kotlin.toCollection_4($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_3: function ($receiver) {
        return _.kotlin.toCollection_4($receiver, new Kotlin.LinkedList());
      },
      toList_4: function ($receiver) {
        return _.kotlin.toCollection_4($receiver, new Kotlin.ArrayList(0));
      },
      toSet_3: function ($receiver) {
        return _.kotlin.toCollection_4($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_3: function ($receiver) {
        return _.kotlin.toCollection_4($receiver, new Kotlin.TreeSet());
      },
      plus_11: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_4($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_12: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_4($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_13: function ($receiver, collection) {
        return _.kotlin.plus_12($receiver, collection.iterator());
      },
      withIndices_3: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      f9: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_3: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_4($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.f9.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_3: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_4: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_3($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      trim: function ($receiver, text) {
        return _.kotlin.trimTrailing(_.kotlin.trimLeading($receiver, text), text);
      },
      trim_0: function ($receiver, prefix, postfix) {
        return _.kotlin.trimTrailing(_.kotlin.trimLeading($receiver, prefix), postfix);
      },
      trimLeading: function ($receiver, prefix) {
        var answer = $receiver;
        if (answer.startsWith(prefix)) {
          answer = answer.substring(prefix.length);
        }
        return answer;
      },
      trimTrailing: function ($receiver, postfix) {
        var answer = $receiver;
        if (answer.endsWith(postfix)) {
          answer = answer.substring(0, $receiver.length - postfix.length);
        }
        return answer;
      },
      notEmpty: function ($receiver) {
        return $receiver != null && $receiver.length > 0;
      },
      iterator_0: function ($receiver) {
        return Kotlin.createObject(_.jet.CharIterator, {
          initialize: function () {
            this.super_init();
            this.$index = 0;
          },
          get_index: function () {
            return this.$index;
          },
          set_index: function (tmp$0) {
            this.$index = tmp$0;
          },
          nextChar: function () {
            var tmp$0, tmp$1;
            return $receiver.get((tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1));
          },
          hasNext: function () {
            return this.get_index() < $receiver.length;
          }
        });
      },
      orEmpty: function ($receiver) {
        return $receiver !== null ? $receiver : '';
      },
      get_size: function ($receiver) {
        return $receiver.length;
      },
      count_4: function ($receiver, predicate) {
        var answer = 0;
        {
          var tmp$0 = _.kotlin.iterator_0($receiver);
          while (tmp$0.hasNext()) {
            var c = tmp$0.next();
            if (predicate(c)) {
              answer++;
            }
          }
        }
        return answer;
      },
      count_5: function ($receiver) {
        if (Kotlin.isType($receiver, _.jet.Collection)) {
          return $receiver.size();
        }
        var number = 0;
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var elem = tmp$0.next();
            ++number;
          }
        }
        return number;
      },
      fa: function (count, n, it) {
        ++count.v;
        return count.v <= n;
      },
      countTo: function (n) {
        var count = {v: 0};
        return _.kotlin.fa.bind(null, count, n);
      },
      first: function ($receiver) {
        if (Kotlin.isType($receiver, _.jet.List)) {
          return _.kotlin.first($receiver);
        }
        return $receiver.iterator().next();
      },
      containsItem: function ($receiver, item) {
        if (Kotlin.isType($receiver, Kotlin.AbstractCollection)) {
          return $receiver.contains(item);
        }
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var elem = tmp$0.next();
            if (Kotlin.equals(elem, item)) {
              return true;
            }
          }
        }
        return false;
      },
      sort: function ($receiver) {
        var list = _.kotlin.toCollection_5($receiver, new Kotlin.ArrayList(0));
        Kotlin.collectionsSort(list);
        return list;
      },
      sort_0: function ($receiver, comparator) {
        var list = _.kotlin.toCollection_5($receiver, new Kotlin.ArrayList(0));
        Kotlin.collectionsSort(list, comparator);
        return list;
      },
      all_4: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_4: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_6: function ($receiver, predicate) {
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_4: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_5: function ($receiver, predicate) {
        return _.kotlin.filterTo_4($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_4: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_4: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_4($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_4: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_4: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (predicate(element)) {
                first.add(element);
              }
               else {
                second.add(element);
              }
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_6: function ($receiver, transform) {
        return _.kotlin.mapTo_5($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_5: function ($receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var item = tmp$0[tmp$2];
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_4: function ($receiver, transform) {
        return _.kotlin.flatMapTo_4($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_4: function ($receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var list = transform(element);
              {
                var tmp$3 = list.iterator();
                while (tmp$3.hasNext()) {
                  var r = tmp$3.next();
                  result.add(r);
                }
              }
            }
          }
        }
        return result;
      },
      forEach_4: function ($receiver, operation) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            operation(element);
          }
        }
      },
      fold_4: function ($receiver, initial, operation) {
        var answer = initial;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_4: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_4: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_4: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_4: function ($receiver, toKey) {
        return _.kotlin.groupByTo_4($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      fb: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_4: function ($receiver, result, toKey) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var key = toKey(element);
              var list = _.kotlin.getOrPut(result, key, _.kotlin.fb);
              list.add(element);
            }
          }
        }
        return result;
      },
      drop_4: function ($receiver, n) {
        return _.kotlin.dropWhile_4($receiver, _.kotlin.countTo(n));
      },
      dropWhile_4: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_4($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_4: function ($receiver, result, predicate) {
        var start = true;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (start && predicate(element)) {
              }
               else {
                start = false;
                result.add(element);
              }
            }
          }
        }
        return result;
      },
      take_4: function ($receiver, n) {
        return _.kotlin.takeWhile_4($receiver, _.kotlin.countTo(n));
      },
      takeWhile_4: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_4($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_4: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_6: function ($receiver, result) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            result.add(element);
          }
        }
        return result;
      },
      reverse_4: function ($receiver) {
        var list = _.kotlin.toCollection_6($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_4: function ($receiver) {
        return _.kotlin.toCollection_6($receiver, new Kotlin.LinkedList());
      },
      toList_5: function ($receiver) {
        return _.kotlin.toCollection_6($receiver, new Kotlin.ArrayList(0));
      },
      toSet_4: function ($receiver) {
        return _.kotlin.toCollection_6($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_4: function ($receiver) {
        return _.kotlin.toCollection_6($receiver, new Kotlin.TreeSet());
      },
      plus_14: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_6($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_15: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_6($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_16: function ($receiver, collection) {
        return _.kotlin.plus_15($receiver, collection.iterator());
      },
      withIndices_4: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      fc: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_4: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_6($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fc.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_4: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (++count > 1)
                buffer.append(separator);
              if (limit < 0 || count <= limit) {
                var text = element == null ? 'null' : Kotlin.toString(element);
                buffer.append(text);
              }
               else
                break;
            }
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_5: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_4($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_5: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_5: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_7: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_5: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_6: function ($receiver, predicate) {
        return _.kotlin.filterTo_5($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_5: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_5: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_5($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_5: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_5: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_7: function ($receiver, transform) {
        return _.kotlin.mapTo_6($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_6: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_5: function ($receiver, transform) {
        return _.kotlin.flatMapTo_5($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_5: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_5: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_5: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_5: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_5: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_5: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_5: function ($receiver, toKey) {
        return _.kotlin.groupByTo_5($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      fd: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_5: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.fd);
            list.add(element);
          }
        }
        return result;
      },
      drop_5: function ($receiver, n) {
        return _.kotlin.dropWhile_5($receiver, _.kotlin.countTo(n));
      },
      dropWhile_5: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_5($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_5: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_5: function ($receiver, n) {
        return _.kotlin.takeWhile_5($receiver, _.kotlin.countTo(n));
      },
      takeWhile_5: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_5($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_5: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_7: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_5: function ($receiver) {
        var list = _.kotlin.toCollection_7($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_5: function ($receiver) {
        return _.kotlin.toCollection_7($receiver, new Kotlin.LinkedList());
      },
      toList_6: function ($receiver) {
        return _.kotlin.toCollection_7($receiver, new Kotlin.ArrayList(0));
      },
      toSet_5: function ($receiver) {
        return _.kotlin.toCollection_7($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_5: function ($receiver) {
        return _.kotlin.toCollection_7($receiver, new Kotlin.TreeSet());
      },
      plus_17: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_7($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_18: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_7($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_19: function ($receiver, collection) {
        return _.kotlin.plus_18($receiver, collection.iterator());
      },
      withIndices_5: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      fe: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_5: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_7($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fe.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_5: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_6: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_5($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      get_size_0: function ($receiver) {
        return $receiver.size();
      },
      get_empty: function ($receiver) {
        return $receiver.isEmpty();
      },
      set: function ($receiver, key, value) {
        return $receiver.put(key, value);
      },
      orEmpty_0: function ($receiver) {
        var tmp$0;
        return $receiver != null ? $receiver : (tmp$0 = Kotlin.emptyMap()) != null ? tmp$0 : Kotlin.throwNPE();
      },
      get_key: function ($receiver) {
        return $receiver.getKey();
      },
      get_value: function ($receiver) {
        return $receiver.getValue();
      },
      component1: function ($receiver) {
        return $receiver.getKey();
      },
      component2: function ($receiver) {
        return $receiver.getValue();
      },
      getOrElse: function ($receiver, key, defaultValue) {
        if ($receiver.containsKey(key)) {
          var tmp$0;
          return (tmp$0 = $receiver.get(key)) != null ? tmp$0 : Kotlin.throwNPE();
        }
         else {
          return defaultValue();
        }
      },
      getOrPut: function ($receiver, key, defaultValue) {
        if ($receiver.containsKey(key)) {
          var tmp$0;
          return (tmp$0 = $receiver.get(key)) != null ? tmp$0 : Kotlin.throwNPE();
        }
         else {
          var answer = defaultValue();
          $receiver.put(key, answer);
          return answer;
        }
      },
      iterator_1: function ($receiver) {
        var entrySet = $receiver.entrySet();
        return entrySet.iterator();
      },
      mapTo: function ($receiver, result, transform) {
        {
          var tmp$0 = _.kotlin.iterator_1($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      mapValuesTo: function ($receiver, result, transform) {
        {
          var tmp$0 = _.kotlin.iterator_1($receiver);
          while (tmp$0.hasNext()) {
            var e = tmp$0.next();
            var newValue = transform(e);
            result.put(_.kotlin.get_key(e), newValue);
          }
        }
        return result;
      },
      putAll: function ($receiver, values) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var v = tmp$0[tmp$2];
            {
              $receiver.put(v.get_first(), v.get_second());
            }
          }
        }
      },
      toMap: function ($receiver, map) {
        map.putAll($receiver);
        return map;
      },
      map_8: function ($receiver, transform) {
        return _.kotlin.mapTo($receiver, new Kotlin.ArrayList(_.kotlin.get_size_0($receiver)), transform);
      },
      mapValues_0: function ($receiver, transform) {
        return _.kotlin.mapValuesTo($receiver, new Kotlin.ComplexHashMap(_.kotlin.get_size_0($receiver)), transform);
      },
      iterate: function (nextFunction) {
        return new _.kotlin.FunctionIterator(nextFunction);
      },
      FilterIterator: Kotlin.createClass(classes.c1m, /** @lends _.kotlin.FilterIterator.prototype */ {
        initialize: function (iterator, predicate) {
          this.$iterator = iterator;
          this.$predicate = predicate;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_predicate: function () {
          return this.$predicate;
        },
        computeNext: function () {
          while (this.get_iterator().hasNext()) {
            var next = this.get_iterator().next();
            if (this.get_predicate()(next)) {
              this.setNext(next);
              return;
            }
          }
          this.done();
        }
      }),
      FilterNotNullIterator: Kotlin.createClass(classes.c1m, /** @lends _.kotlin.FilterNotNullIterator.prototype */ {
        initialize: function (iterator) {
          this.$iterator = iterator;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        computeNext: function () {
          if (this.get_iterator() != null) {
            while (this.get_iterator().hasNext()) {
              var next = this.get_iterator().next();
              if (next != null) {
                this.setNext(next);
                return;
              }
            }
          }
          this.done();
        }
      }),
      MapIterator: Kotlin.createClass(classes.c1m, /** @lends _.kotlin.MapIterator.prototype */ {
        initialize: function (iterator, transform) {
          this.$iterator = iterator;
          this.$transform = transform;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_transform: function () {
          return this.$transform;
        },
        computeNext: function () {
          if (this.get_iterator().hasNext()) {
            this.setNext(this.get_transform()(this.get_iterator().next()));
          }
           else {
            this.done();
          }
        }
      }),
      FlatMapIterator: Kotlin.createClass(classes.c1m, /** @lends _.kotlin.FlatMapIterator.prototype */ {
        initialize: function (iterator, transform) {
          this.$iterator = iterator;
          this.$transform = transform;
          this.super_init();
          this.$transformed = _.kotlin.iterate(function () {
            return null;
          });
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_transform: function () {
          return this.$transform;
        },
        get_transformed: function () {
          return this.$transformed;
        },
        set_transformed: function (tmp$0) {
          this.$transformed = tmp$0;
        },
        computeNext: function () {
          while (true) {
            if (this.get_transformed().hasNext()) {
              this.setNext(this.get_transformed().next());
              return;
            }
            if (this.get_iterator().hasNext()) {
              this.set_transformed(this.get_transform()(this.get_iterator().next()));
            }
             else {
              this.done();
              return;
            }
          }
        }
      }),
      TakeWhileIterator: Kotlin.createClass(classes.c1m, /** @lends _.kotlin.TakeWhileIterator.prototype */ {
        initialize: function (iterator, predicate) {
          this.$iterator = iterator;
          this.$predicate = predicate;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_predicate: function () {
          return this.$predicate;
        },
        computeNext: function () {
          if (this.get_iterator().hasNext()) {
            var item = this.get_iterator().next();
            if (this.get_predicate()(item)) {
              this.setNext(item);
              return;
            }
          }
          this.done();
        }
      }),
      FunctionIterator: Kotlin.createClass(classes.c1m, /** @lends _.kotlin.FunctionIterator.prototype */ {
        initialize: function (nextFunction) {
          this.$nextFunction = nextFunction;
          this.super_init();
        },
        get_nextFunction: function () {
          return this.$nextFunction;
        },
        computeNext: function () {
          var next = this.get_nextFunction()();
          if (next == null) {
            this.done();
          }
           else {
            this.setNext(next);
          }
        }
      }),
      CompositeIterator: Kotlin.createClass(classes.c1m, /** @lends _.kotlin.CompositeIterator.prototype */ {
        initialize: function (iterators) {
          this.super_init();
          this.$iteratorsIter = Kotlin.arrayIterator(iterators);
          this.$currentIter = null;
        },
        get_iteratorsIter: function () {
          return this.$iteratorsIter;
        },
        get_currentIter: function () {
          return this.$currentIter;
        },
        set_currentIter: function (tmp$0) {
          this.$currentIter = tmp$0;
        },
        computeNext: function () {
          while (true) {
            if (this.get_currentIter() == null) {
              if (this.get_iteratorsIter().hasNext()) {
                this.set_currentIter(this.get_iteratorsIter().next());
              }
               else {
                this.done();
                return;
              }
            }
            var iter = this.get_currentIter();
            if (iter != null) {
              if (iter.hasNext()) {
                this.setNext(iter.next());
                return;
              }
               else {
                this.set_currentIter(null);
              }
            }
          }
        }
      }),
      SingleIterator: Kotlin.createClass(classes.c1m, /** @lends _.kotlin.SingleIterator.prototype */ {
        initialize: function (value) {
          this.$value = value;
          this.super_init();
          this.$first = true;
        },
        get_value: function () {
          return this.$value;
        },
        get_first: function () {
          return this.$first;
        },
        set_first: function (tmp$0) {
          this.$first = tmp$0;
        },
        computeNext: function () {
          if (this.get_first()) {
            this.set_first(false);
            this.setNext(this.get_value());
          }
           else {
            this.done();
          }
        }
      }),
      IndexIterator: Kotlin.createClass(Kotlin.Iterator, /** @lends _.kotlin.IndexIterator.prototype */ {
        initialize: function (iterator) {
          this.$iterator = iterator;
          this.$index = 0;
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_index: function () {
          return this.$index;
        },
        set_index: function (tmp$0) {
          this.$index = tmp$0;
        },
        next: function () {
          var tmp$0, tmp$1;
          return new _.kotlin.Pair((tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1), this.get_iterator().next());
        },
        hasNext: function () {
          return this.get_iterator().hasNext();
        }
      }),
      all_6: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_6: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_8: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_6: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_7: function ($receiver, predicate) {
        return _.kotlin.filterTo_6($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_6: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_6: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_6($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_6: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_6: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_9: function ($receiver, transform) {
        return _.kotlin.mapTo_7($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_7: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_6: function ($receiver, transform) {
        return _.kotlin.flatMapTo_6($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_6: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_6: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_6: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_6: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_6: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_6: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_6: function ($receiver, toKey) {
        return _.kotlin.groupByTo_6($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      ff: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_6: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.ff);
            list.add(element);
          }
        }
        return result;
      },
      drop_6: function ($receiver, n) {
        return _.kotlin.dropWhile_6($receiver, _.kotlin.countTo(n));
      },
      dropWhile_6: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_6($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_6: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_6: function ($receiver, n) {
        return _.kotlin.takeWhile_6($receiver, _.kotlin.countTo(n));
      },
      takeWhile_6: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_6($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_6: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_8: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_6: function ($receiver) {
        var list = _.kotlin.toCollection_8($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_6: function ($receiver) {
        return _.kotlin.toCollection_8($receiver, new Kotlin.LinkedList());
      },
      toList_7: function ($receiver) {
        return _.kotlin.toCollection_8($receiver, new Kotlin.ArrayList(0));
      },
      toSet_6: function ($receiver) {
        return _.kotlin.toCollection_8($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_6: function ($receiver) {
        return _.kotlin.toCollection_8($receiver, new Kotlin.TreeSet());
      },
      plus_20: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_8($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_21: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_8($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_22: function ($receiver, collection) {
        return _.kotlin.plus_21($receiver, collection.iterator());
      },
      withIndices_6: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      fg: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_6: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_8($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fg.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_6: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_7: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_6($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_7: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_7: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_9: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_7: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filterTo_7: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotTo_7: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotNullTo: function ($receiver, result) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (element != null)
              result.add(element);
          }
        }
        return result;
      },
      partition_7: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      mapTo_8: function ($receiver, result, transform) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMapTo_7: function ($receiver, result, transform) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_7: function ($receiver, operation) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_7: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      reduce_7: function ($receiver, operation) {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      groupBy_7: function ($receiver, toKey) {
        return _.kotlin.groupByTo_7($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      fh: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_7: function ($receiver, result, toKey) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.fh);
            list.add(element);
          }
        }
        return result;
      },
      drop_7: function ($receiver, n) {
        return _.kotlin.dropWhile_7($receiver, _.kotlin.countTo(n));
      },
      dropWhile_7: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_7($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_7: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      takeWhileTo_7: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_5: function ($receiver, result) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_7: function ($receiver) {
        var list = _.kotlin.toCollection_5($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_7: function ($receiver) {
        return _.kotlin.toCollection_5($receiver, new Kotlin.LinkedList());
      },
      toList_2: function ($receiver) {
        return _.kotlin.toCollection_5($receiver, new Kotlin.ArrayList(0));
      },
      toSet_7: function ($receiver) {
        return _.kotlin.toCollection_5($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_7: function ($receiver) {
        return _.kotlin.toCollection_5($receiver, new Kotlin.TreeSet());
      },
      withIndices_7: function ($receiver) {
        return new _.kotlin.IndexIterator($receiver.iterator());
      },
      fi: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_7: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_5($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fi.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_7: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_7($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      notEmpty_0: function ($receiver) {
        return !_.kotlin.isEmpty($receiver);
      },
      isEmpty: function ($receiver) {
        return $receiver.length === 0;
      },
      orEmpty_1: function ($receiver) {
        return $receiver != null ? $receiver : [];
      },
      get_lastIndex: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_0: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_1: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_2: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_3: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_4: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_5: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_6: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_7: function ($receiver) {
        return $receiver.length - 1;
      },
      get_size_1: function ($receiver) {
        return $receiver.size();
      },
      get_empty_0: function ($receiver) {
        return $receiver.isEmpty();
      },
      get_indices: function ($receiver) {
        return new Kotlin.NumberRange(0, _.kotlin.get_size_1($receiver) - 1);
      },
      get_indices_0: function ($receiver) {
        return new Kotlin.NumberRange(0, $receiver - 1);
      },
      notEmpty_1: function ($receiver) {
        return !$receiver.isEmpty();
      },
      orEmpty_2: function ($receiver) {
        var tmp$0;
        return $receiver != null ? $receiver : (tmp$0 = Kotlin.emptyList()) != null ? tmp$0 : Kotlin.throwNPE();
      },
      toSortedList: function ($receiver) {
        return _.kotlin.sort(_.kotlin.toCollection_5($receiver, new Kotlin.ArrayList(0)));
      },
      toSortedList_0: function ($receiver, comparator) {
        return _.kotlin.sort_0(_.kotlin.toList_2($receiver), comparator);
      },
      orEmpty_3: function ($receiver) {
        var tmp$0;
        return $receiver != null ? $receiver : (tmp$0 = Kotlin.emptyList()) != null ? tmp$0 : Kotlin.throwNPE();
      },
      get_first: function ($receiver) {
        return _.kotlin.get_head($receiver);
      },
      get_last: function ($receiver) {
        var s = _.kotlin.get_size_1($receiver);
        return s > 0 ? $receiver.get(s - 1) : null;
      },
      get_lastIndex_8: function ($receiver) {
        return _.kotlin.get_size_1($receiver) - 1;
      },
      get_head: function ($receiver) {
        return $receiver.get(0);
      },
      get_tail: function ($receiver) {
        return _.kotlin.drop_7($receiver, 1);
      },
      require: function (value, message) {
        if (!value) {
          throw new Kotlin.IllegalArgumentException(Kotlin.toString(message));
        }
      },
      require_0: function (value, lazyMessage) {
        if (!value) {
          var message = lazyMessage();
          throw new Kotlin.IllegalArgumentException(message.toString());
        }
      },
      requireNotNull: function (value, message) {
        if (value == null) {
          throw new Kotlin.IllegalArgumentException(Kotlin.toString(message));
        }
         else {
          return value;
        }
      },
      check: function (value, message) {
        if (!value) {
          throw new Kotlin.IllegalStateException(Kotlin.toString(message));
        }
      },
      check_0: function (value, lazyMessage) {
        if (!value) {
          var message = lazyMessage();
          throw new Kotlin.IllegalStateException(message.toString());
        }
      },
      checkNotNull: function (value, message) {
        if (value == null) {
          throw new Kotlin.IllegalStateException(message);
        }
         else {
          return value;
        }
      },
      filter_8: function ($receiver, predicate) {
        return new _.kotlin.FilterIterator($receiver, predicate);
      },
      fj: function (predicate, it) {
        return !predicate(it);
      },
      filterNot_7: function ($receiver, predicate) {
        return _.kotlin.filter_8($receiver, _.kotlin.fj.bind(null, predicate));
      },
      filterNotNull: function ($receiver) {
        return new _.kotlin.FilterNotNullIterator($receiver);
      },
      map_10: function ($receiver, transform) {
        return new _.kotlin.MapIterator($receiver, transform);
      },
      flatMap_7: function ($receiver, transform) {
        return new _.kotlin.FlatMapIterator($receiver, transform);
      },
      fk: function (it) {
        if (it == null)
          throw new Kotlin.IllegalArgumentException('null element in iterator ' + $receiver.toString());
        else
          return it;
      },
      requireNoNulls: function ($receiver) {
        return _.kotlin.map_10($receiver, _.kotlin.fk);
      },
      fl: function (count, it) {
        return --count.v >= 0;
      },
      take_7: function ($receiver, n) {
        var count = {v: n};
        return _.kotlin.takeWhile_7($receiver, _.kotlin.fl.bind(null, count));
      },
      takeWhile_7: function ($receiver, predicate) {
        return new _.kotlin.TakeWhileIterator($receiver, predicate);
      },
      plus_23: function ($receiver, element) {
        return new _.kotlin.CompositeIterator([$receiver, new _.kotlin.SingleIterator(element)]);
      },
      plus_24: function ($receiver, iterator) {
        return new _.kotlin.CompositeIterator([$receiver, iterator]);
      },
      plus_25: function ($receiver, collection) {
        return _.kotlin.plus_24($receiver, collection.iterator());
      },
      all_8: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_8: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_10: function ($receiver, predicate) {
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_8: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_9: function ($receiver, predicate) {
        return _.kotlin.filterTo_8($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_8: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_8: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_8($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_8: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotNull_0: function ($receiver) {
        return _.kotlin.filterNotNullTo_0($receiver, new Kotlin.ArrayList(0));
      },
      filterNotNullTo_0: function ($receiver, result) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (element != null)
              result.add(element);
          }
        }
        return result;
      },
      partition_8: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (predicate(element)) {
                first.add(element);
              }
               else {
                second.add(element);
              }
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_11: function ($receiver, transform) {
        return _.kotlin.mapTo_9($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_9: function ($receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var item = tmp$0[tmp$2];
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_8: function ($receiver, transform) {
        return _.kotlin.flatMapTo_8($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_8: function ($receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var list = transform(element);
              {
                var tmp$3 = list.iterator();
                while (tmp$3.hasNext()) {
                  var r = tmp$3.next();
                  result.add(r);
                }
              }
            }
          }
        }
        return result;
      },
      forEach_8: function ($receiver, operation) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            operation(element);
          }
        }
      },
      fold_8: function ($receiver, initial, operation) {
        var answer = initial;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_7: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_8: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_7: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_8: function ($receiver, toKey) {
        return _.kotlin.groupByTo_8($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      fm: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_8: function ($receiver, result, toKey) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var key = toKey(element);
              var list = _.kotlin.getOrPut(result, key, _.kotlin.fm);
              list.add(element);
            }
          }
        }
        return result;
      },
      drop_8: function ($receiver, n) {
        return _.kotlin.dropWhile_8($receiver, _.kotlin.countTo(n));
      },
      dropWhile_8: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_8($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_8: function ($receiver, result, predicate) {
        var start = true;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (start && predicate(element)) {
              }
               else {
                start = false;
                result.add(element);
              }
            }
          }
        }
        return result;
      },
      take_8: function ($receiver, n) {
        return _.kotlin.takeWhile_8($receiver, _.kotlin.countTo(n));
      },
      takeWhile_8: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_8($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_8: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_9: function ($receiver, result) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            result.add(element);
          }
        }
        return result;
      },
      reverse_8: function ($receiver) {
        var list = _.kotlin.toCollection_9($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_8: function ($receiver) {
        return _.kotlin.toCollection_9($receiver, new Kotlin.LinkedList());
      },
      toList_8: function ($receiver) {
        return _.kotlin.toCollection_9($receiver, new Kotlin.ArrayList(0));
      },
      toSet_8: function ($receiver) {
        return _.kotlin.toCollection_9($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_8: function ($receiver) {
        return _.kotlin.toCollection_9($receiver, new Kotlin.TreeSet());
      },
      requireNoNulls_0: function ($receiver) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (element == null) {
                throw new Kotlin.IllegalArgumentException('null element found in ' + $receiver.toString());
              }
            }
          }
        }
        return $receiver != null ? $receiver : Kotlin.throwNPE();
      },
      plus_26: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_9($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_27: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_9($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_28: function ($receiver, collection) {
        return _.kotlin.plus_27($receiver, collection.iterator());
      },
      withIndices_8: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      fn: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_8: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_9($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fn.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_8: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (++count > 1)
                buffer.append(separator);
              if (limit < 0 || count <= limit) {
                var text = element == null ? 'null' : Kotlin.toString(element);
                buffer.append(text);
              }
               else
                break;
            }
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_8: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_8($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      filter_2: function ($receiver, predicate) {
        return _.kotlin.filterTo_7($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNot_9: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_7($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotNull_1: function ($receiver) {
        return _.kotlin.filterNotNullTo($receiver, new Kotlin.ArrayList(0));
      },
      map_3: function ($receiver, transform) {
        return _.kotlin.mapTo_8($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMap_9: function ($receiver, transform) {
        return _.kotlin.flatMapTo_7($receiver, new Kotlin.ArrayList(0), transform);
      },
      take_9: function ($receiver, n) {
        return _.kotlin.takeWhile_9($receiver, _.kotlin.countTo(n));
      },
      takeWhile_9: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_7($receiver, new Kotlin.ArrayList(0), predicate);
      },
      requireNoNulls_1: function ($receiver) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (element == null) {
              throw new Kotlin.IllegalArgumentException('null element found in ' + $receiver.toString());
            }
          }
        }
        return $receiver != null ? $receiver : Kotlin.throwNPE();
      },
      plus_29: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_5($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_30: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_5($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_31: function ($receiver, collection) {
        return _.kotlin.plus_30($receiver, collection.iterator());
      },
      all_9: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_9: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_11: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_9: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filterTo_9: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotTo_9: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotNullTo_1: function ($receiver, result) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (element != null)
              result.add(element);
          }
        }
        return result;
      },
      partition_9: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      mapTo_10: function ($receiver, result, transform) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMapTo_9: function ($receiver, result, transform) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_9: function ($receiver, operation) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_9: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      reduce_9: function ($receiver, operation) {
        var iterator = $receiver;
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      groupBy_9: function ($receiver, toKey) {
        return _.kotlin.groupByTo_9($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      fo: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_9: function ($receiver, result, toKey) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.fo);
            list.add(element);
          }
        }
        return result;
      },
      drop_9: function ($receiver, n) {
        return _.kotlin.dropWhile_9($receiver, _.kotlin.countTo(n));
      },
      dropWhile_9: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_9($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_9: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      takeWhileTo_9: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_1: function ($receiver, result) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_9: function ($receiver) {
        var list = _.kotlin.toCollection_1($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_9: function ($receiver) {
        return _.kotlin.toCollection_1($receiver, new Kotlin.LinkedList());
      },
      toList_9: function ($receiver) {
        return _.kotlin.toCollection_1($receiver, new Kotlin.ArrayList(0));
      },
      toSet_9: function ($receiver) {
        return _.kotlin.toCollection_1($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_9: function ($receiver) {
        return _.kotlin.toCollection_1($receiver, new Kotlin.TreeSet());
      },
      withIndices_9: function ($receiver) {
        return new _.kotlin.IndexIterator($receiver);
      },
      fp: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_9: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_1($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fp.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_9: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_9: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_9($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      support: Kotlin.definePackage({
        AbstractIterator: classes.c1m
      })
    }),
    java: Kotlin.definePackage({
      io: Kotlin.definePackage({
        ByteArrayInputStream: Kotlin.createClass(classes.c0, /** @lends _.java.io.ByteArrayInputStream.prototype */ {
          initialize: function (inputBytes) {
            this.$inputBytes = inputBytes;
          },
          get_inputBytes: function () {
            return this.$inputBytes;
          },
          readBytes: function () {
            return this.get_inputBytes();
          }
        }),
        InputStream: classes.c0,
        OutputStream: Kotlin.createClass(null, /** @lends _.java.io.OutputStream.prototype */ {
          initialize: function () {
            this.$result = '';
          },
          flush: function () {
          },
          close: function () {
          },
          get_result: function () {
            return this.$result;
          },
          set_result: function (tmp$0) {
            this.$result = tmp$0;
          }
        }),
        PrintStream: Kotlin.createClass(null, /** @lends _.java.io.PrintStream.prototype */ {
          initialize: function (oo) {
            this.$oo = oo;
            this.$result = '';
          },
          get_oo: function () {
            return this.$oo;
          },
          get_result: function () {
            return this.$result;
          },
          set_result: function (tmp$0) {
            this.$result = tmp$0;
          },
          println: function () {
            this.set_result(this.get_result() + '\n');
          },
          print: function (s) {
            this.set_result(this.get_result() + s);
          },
          println_0: function (s) {
            this.print(s);
            this.println();
          },
          print_0: function (s) {
            this.set_result(this.get_result() + s);
          },
          print_1: function (s) {
            this.set_result(this.get_result() + s);
          },
          print_2: function (s) {
            this.set_result(this.get_result() + s);
          },
          print_3: function (s) {
            if (s) {
              this.set_result(this.get_result() + 'true');
            }
             else {
              this.set_result(this.get_result() + 'false');
            }
          },
          println_1: function (s) {
            this.print_0(s);
            this.println();
          },
          flush: function () {
            this.get_oo().set_result(this.get_result());
          },
          close: function () {
          }
        })
      }),
      lang: Kotlin.definePackage({
        StringBuilder: Kotlin.createClass(null, /** @lends _.java.lang.StringBuilder.prototype */ {
          initialize: function () {
            this.$content = '';
          },
          get_content: function () {
            return this.$content;
          },
          set_content: function (tmp$0) {
            this.$content = tmp$0;
          },
          append: function (sub) {
            this.set_content(this.get_content() + sub);
          },
          append_0: function (sub) {
            this.set_content(this.get_content() + sub);
          },
          toString: function () {
            return this.get_content();
          }
        })
      }),
      util: Kotlin.definePackage({
        Collections: Kotlin.definePackage({
        })
      })
    }),
    org: Kotlin.definePackage({
      kevoree: Kotlin.definePackage({
        AdaptationPrimitiveType: classes.c1,
        AdaptationPrimitiveTypeRef: classes.c2,
        Channel: classes.c3,
        ChannelType: classes.c4,
        ComponentInstance: classes.c5,
        ComponentType: classes.c6,
        CompositeType: classes.c7,
        ContainerNode: classes.c9,
        ContainerRoot: classes.ca,
        DeployUnit: classes.cb,
        Dictionary: classes.cc,
        DictionaryAttribute: classes.cd,
        DictionaryType: classes.ce,
        DictionaryValue: classes.cf,
        ExtraFonctionalProperty: classes.cg,
        Group: classes.ch,
        GroupType: classes.ci,
        Instance: classes.cj,
        IntegrationPattern: classes.ck,
        KevoreeFactory: classes.cl,
        LifeCycleTypeDefinition: classes.cm,
        MBinding: classes.co,
        MessagePortType: classes.cp,
        NamedElement: classes.c12,
        Namespace: classes.c13,
        NetworkProperty: classes.c14,
        NodeLink: classes.c15,
        NodeNetwork: classes.c16,
        NodeType: classes.c17,
        Operation: classes.c18,
        Parameter: classes.c19,
        Port: classes.c1a,
        PortType: classes.c1b,
        PortTypeMapping: classes.c1c,
        PortTypeRef: classes.c1d,
        Repository: classes.c1e,
        ServicePortType: classes.c1f,
        TypeDefinition: classes.c1g,
        TypedElement: classes.c1h,
        TypeLibrary: classes.c1i,
        Wire: classes.c1j,
        cloner: Kotlin.definePackage({
          DefaultModelCloner: Kotlin.createClass(classes.cv, /** @lends _.org.kevoree.cloner.DefaultModelCloner.prototype */ {
            initialize: function () {
              this.$mainFactory = new _.org.kevoree.factory.MainFactory();
            },
            clone: function (o) {
              return this.clone_0(o, false);
            },
            clone_0: function (o, readOnly) {
              return this.clone_1(o, readOnly, false);
            },
            cloneMutableOnly: function (o, readOnly) {
              return this.clone_1(o, readOnly, true);
            },
            clone_1: function (o, readOnly, mutableOnly) {
              if (Kotlin.isType(o, _.org.kevoree.ComponentInstance) || Kotlin.isType(o, _.org.kevoree.impl.ComponentInstanceImpl)) {
                var context = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context, this.get_mainFactory(), mutableOnly);
                var tmp$0;
                return (tmp$0 = (o != null ? o : Kotlin.throwNPE()).resolve(context, readOnly, mutableOnly)) != null ? tmp$0 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ComponentType) || Kotlin.isType(o, _.org.kevoree.impl.ComponentTypeImpl)) {
                var context_0 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_0, this.get_mainFactory(), mutableOnly);
                var tmp$1;
                return (tmp$1 = (o != null ? o : Kotlin.throwNPE()).resolve(context_0, readOnly, mutableOnly)) != null ? tmp$1 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ContainerNode) || Kotlin.isType(o, _.org.kevoree.impl.ContainerNodeImpl)) {
                var context_1 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_1, this.get_mainFactory(), mutableOnly);
                var tmp$2;
                return (tmp$2 = (o != null ? o : Kotlin.throwNPE()).resolve(context_1, readOnly, mutableOnly)) != null ? tmp$2 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ContainerRoot) || Kotlin.isType(o, _.org.kevoree.impl.ContainerRootImpl)) {
                var context_2 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_2, this.get_mainFactory(), mutableOnly);
                var tmp$3;
                return (tmp$3 = (o != null ? o : Kotlin.throwNPE()).resolve(context_2, readOnly, mutableOnly)) != null ? tmp$3 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.PortType) || Kotlin.isType(o, _.org.kevoree.impl.PortTypeImpl)) {
                var context_3 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_3, this.get_mainFactory(), mutableOnly);
                var tmp$4;
                return (tmp$4 = (o != null ? o : Kotlin.throwNPE()).resolve(context_3, readOnly, mutableOnly)) != null ? tmp$4 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Port) || Kotlin.isType(o, _.org.kevoree.impl.PortImpl)) {
                var context_4 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_4, this.get_mainFactory(), mutableOnly);
                var tmp$5;
                return (tmp$5 = (o != null ? o : Kotlin.throwNPE()).resolve(context_4, readOnly, mutableOnly)) != null ? tmp$5 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Namespace) || Kotlin.isType(o, _.org.kevoree.impl.NamespaceImpl)) {
                var context_5 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_5, this.get_mainFactory(), mutableOnly);
                var tmp$6;
                return (tmp$6 = (o != null ? o : Kotlin.throwNPE()).resolve(context_5, readOnly, mutableOnly)) != null ? tmp$6 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Dictionary) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryImpl)) {
                var context_6 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_6, this.get_mainFactory(), mutableOnly);
                var tmp$7;
                return (tmp$7 = (o != null ? o : Kotlin.throwNPE()).resolve(context_6, readOnly, mutableOnly)) != null ? tmp$7 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.DictionaryType) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryTypeImpl)) {
                var context_7 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_7, this.get_mainFactory(), mutableOnly);
                var tmp$8;
                return (tmp$8 = (o != null ? o : Kotlin.throwNPE()).resolve(context_7, readOnly, mutableOnly)) != null ? tmp$8 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.DictionaryAttribute) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryAttributeImpl)) {
                var context_8 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_8, this.get_mainFactory(), mutableOnly);
                var tmp$9;
                return (tmp$9 = (o != null ? o : Kotlin.throwNPE()).resolve(context_8, readOnly, mutableOnly)) != null ? tmp$9 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.DictionaryValue) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryValueImpl)) {
                var context_9 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_9, this.get_mainFactory(), mutableOnly);
                var tmp$10;
                return (tmp$10 = (o != null ? o : Kotlin.throwNPE()).resolve(context_9, readOnly, mutableOnly)) != null ? tmp$10 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.CompositeType) || Kotlin.isType(o, _.org.kevoree.impl.CompositeTypeImpl)) {
                var context_10 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_10, this.get_mainFactory(), mutableOnly);
                var tmp$11;
                return (tmp$11 = (o != null ? o : Kotlin.throwNPE()).resolve(context_10, readOnly, mutableOnly)) != null ? tmp$11 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.PortTypeRef) || Kotlin.isType(o, _.org.kevoree.impl.PortTypeRefImpl)) {
                var context_11 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_11, this.get_mainFactory(), mutableOnly);
                var tmp$12;
                return (tmp$12 = (o != null ? o : Kotlin.throwNPE()).resolve(context_11, readOnly, mutableOnly)) != null ? tmp$12 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Wire) || Kotlin.isType(o, _.org.kevoree.impl.WireImpl)) {
                var context_12 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_12, this.get_mainFactory(), mutableOnly);
                var tmp$13;
                return (tmp$13 = (o != null ? o : Kotlin.throwNPE()).resolve(context_12, readOnly, mutableOnly)) != null ? tmp$13 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ServicePortType) || Kotlin.isType(o, _.org.kevoree.impl.ServicePortTypeImpl)) {
                var context_13 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_13, this.get_mainFactory(), mutableOnly);
                var tmp$14;
                return (tmp$14 = (o != null ? o : Kotlin.throwNPE()).resolve(context_13, readOnly, mutableOnly)) != null ? tmp$14 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Operation) || Kotlin.isType(o, _.org.kevoree.impl.OperationImpl)) {
                var context_14 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_14, this.get_mainFactory(), mutableOnly);
                var tmp$15;
                return (tmp$15 = (o != null ? o : Kotlin.throwNPE()).resolve(context_14, readOnly, mutableOnly)) != null ? tmp$15 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Parameter) || Kotlin.isType(o, _.org.kevoree.impl.ParameterImpl)) {
                var context_15 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_15, this.get_mainFactory(), mutableOnly);
                var tmp$16;
                return (tmp$16 = (o != null ? o : Kotlin.throwNPE()).resolve(context_15, readOnly, mutableOnly)) != null ? tmp$16 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.TypedElement) || Kotlin.isType(o, _.org.kevoree.impl.TypedElementImpl)) {
                var context_16 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_16, this.get_mainFactory(), mutableOnly);
                var tmp$17;
                return (tmp$17 = (o != null ? o : Kotlin.throwNPE()).resolve(context_16, readOnly, mutableOnly)) != null ? tmp$17 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.MessagePortType) || Kotlin.isType(o, _.org.kevoree.impl.MessagePortTypeImpl)) {
                var context_17 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_17, this.get_mainFactory(), mutableOnly);
                var tmp$18;
                return (tmp$18 = (o != null ? o : Kotlin.throwNPE()).resolve(context_17, readOnly, mutableOnly)) != null ? tmp$18 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Repository) || Kotlin.isType(o, _.org.kevoree.impl.RepositoryImpl)) {
                var context_18 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_18, this.get_mainFactory(), mutableOnly);
                var tmp$19;
                return (tmp$19 = (o != null ? o : Kotlin.throwNPE()).resolve(context_18, readOnly, mutableOnly)) != null ? tmp$19 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.DeployUnit) || Kotlin.isType(o, _.org.kevoree.impl.DeployUnitImpl)) {
                var context_19 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_19, this.get_mainFactory(), mutableOnly);
                var tmp$20;
                return (tmp$20 = (o != null ? o : Kotlin.throwNPE()).resolve(context_19, readOnly, mutableOnly)) != null ? tmp$20 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.TypeLibrary) || Kotlin.isType(o, _.org.kevoree.impl.TypeLibraryImpl)) {
                var context_20 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_20, this.get_mainFactory(), mutableOnly);
                var tmp$21;
                return (tmp$21 = (o != null ? o : Kotlin.throwNPE()).resolve(context_20, readOnly, mutableOnly)) != null ? tmp$21 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.NamedElement) || Kotlin.isType(o, _.org.kevoree.impl.NamedElementImpl)) {
                var context_21 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_21, this.get_mainFactory(), mutableOnly);
                var tmp$22;
                return (tmp$22 = (o != null ? o : Kotlin.throwNPE()).resolve(context_21, readOnly, mutableOnly)) != null ? tmp$22 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.IntegrationPattern) || Kotlin.isType(o, _.org.kevoree.impl.IntegrationPatternImpl)) {
                var context_22 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_22, this.get_mainFactory(), mutableOnly);
                var tmp$23;
                return (tmp$23 = (o != null ? o : Kotlin.throwNPE()).resolve(context_22, readOnly, mutableOnly)) != null ? tmp$23 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ExtraFonctionalProperty) || Kotlin.isType(o, _.org.kevoree.impl.ExtraFonctionalPropertyImpl)) {
                var context_23 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_23, this.get_mainFactory(), mutableOnly);
                var tmp$24;
                return (tmp$24 = (o != null ? o : Kotlin.throwNPE()).resolve(context_23, readOnly, mutableOnly)) != null ? tmp$24 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.PortTypeMapping) || Kotlin.isType(o, _.org.kevoree.impl.PortTypeMappingImpl)) {
                var context_24 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_24, this.get_mainFactory(), mutableOnly);
                var tmp$25;
                return (tmp$25 = (o != null ? o : Kotlin.throwNPE()).resolve(context_24, readOnly, mutableOnly)) != null ? tmp$25 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Channel) || Kotlin.isType(o, _.org.kevoree.impl.ChannelImpl)) {
                var context_25 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_25, this.get_mainFactory(), mutableOnly);
                var tmp$26;
                return (tmp$26 = (o != null ? o : Kotlin.throwNPE()).resolve(context_25, readOnly, mutableOnly)) != null ? tmp$26 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.MBinding) || Kotlin.isType(o, _.org.kevoree.impl.MBindingImpl)) {
                var context_26 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_26, this.get_mainFactory(), mutableOnly);
                var tmp$27;
                return (tmp$27 = (o != null ? o : Kotlin.throwNPE()).resolve(context_26, readOnly, mutableOnly)) != null ? tmp$27 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.NodeNetwork) || Kotlin.isType(o, _.org.kevoree.impl.NodeNetworkImpl)) {
                var context_27 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_27, this.get_mainFactory(), mutableOnly);
                var tmp$28;
                return (tmp$28 = (o != null ? o : Kotlin.throwNPE()).resolve(context_27, readOnly, mutableOnly)) != null ? tmp$28 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.NodeLink) || Kotlin.isType(o, _.org.kevoree.impl.NodeLinkImpl)) {
                var context_28 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_28, this.get_mainFactory(), mutableOnly);
                var tmp$29;
                return (tmp$29 = (o != null ? o : Kotlin.throwNPE()).resolve(context_28, readOnly, mutableOnly)) != null ? tmp$29 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.NetworkProperty) || Kotlin.isType(o, _.org.kevoree.impl.NetworkPropertyImpl)) {
                var context_29 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_29, this.get_mainFactory(), mutableOnly);
                var tmp$30;
                return (tmp$30 = (o != null ? o : Kotlin.throwNPE()).resolve(context_29, readOnly, mutableOnly)) != null ? tmp$30 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ChannelType) || Kotlin.isType(o, _.org.kevoree.impl.ChannelTypeImpl)) {
                var context_30 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_30, this.get_mainFactory(), mutableOnly);
                var tmp$31;
                return (tmp$31 = (o != null ? o : Kotlin.throwNPE()).resolve(context_30, readOnly, mutableOnly)) != null ? tmp$31 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.TypeDefinition) || Kotlin.isType(o, _.org.kevoree.impl.TypeDefinitionImpl)) {
                var context_31 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_31, this.get_mainFactory(), mutableOnly);
                var tmp$32;
                return (tmp$32 = (o != null ? o : Kotlin.throwNPE()).resolve(context_31, readOnly, mutableOnly)) != null ? tmp$32 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Instance) || Kotlin.isType(o, _.org.kevoree.impl.InstanceImpl)) {
                var context_32 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_32, this.get_mainFactory(), mutableOnly);
                var tmp$33;
                return (tmp$33 = (o != null ? o : Kotlin.throwNPE()).resolve(context_32, readOnly, mutableOnly)) != null ? tmp$33 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.LifeCycleTypeDefinition) || Kotlin.isType(o, _.org.kevoree.impl.LifeCycleTypeDefinitionImpl)) {
                var context_33 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_33, this.get_mainFactory(), mutableOnly);
                var tmp$34;
                return (tmp$34 = (o != null ? o : Kotlin.throwNPE()).resolve(context_33, readOnly, mutableOnly)) != null ? tmp$34 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Group) || Kotlin.isType(o, _.org.kevoree.impl.GroupImpl)) {
                var context_34 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_34, this.get_mainFactory(), mutableOnly);
                var tmp$35;
                return (tmp$35 = (o != null ? o : Kotlin.throwNPE()).resolve(context_34, readOnly, mutableOnly)) != null ? tmp$35 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.GroupType) || Kotlin.isType(o, _.org.kevoree.impl.GroupTypeImpl)) {
                var context_35 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_35, this.get_mainFactory(), mutableOnly);
                var tmp$36;
                return (tmp$36 = (o != null ? o : Kotlin.throwNPE()).resolve(context_35, readOnly, mutableOnly)) != null ? tmp$36 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.NodeType) || Kotlin.isType(o, _.org.kevoree.impl.NodeTypeImpl)) {
                var context_36 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_36, this.get_mainFactory(), mutableOnly);
                var tmp$37;
                return (tmp$37 = (o != null ? o : Kotlin.throwNPE()).resolve(context_36, readOnly, mutableOnly)) != null ? tmp$37 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.AdaptationPrimitiveType) || Kotlin.isType(o, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl)) {
                var context_37 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_37, this.get_mainFactory(), mutableOnly);
                var tmp$38;
                return (tmp$38 = (o != null ? o : Kotlin.throwNPE()).resolve(context_37, readOnly, mutableOnly)) != null ? tmp$38 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.AdaptationPrimitiveTypeRef) || Kotlin.isType(o, _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl)) {
                var context_38 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_38, this.get_mainFactory(), mutableOnly);
                var tmp$39;
                return (tmp$39 = (o != null ? o : Kotlin.throwNPE()).resolve(context_38, readOnly, mutableOnly)) != null ? tmp$39 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ComponentInstance) || Kotlin.isType(o, _.org.kevoree.impl.ComponentInstanceImpl)) {
                var context_39 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_39, this.get_mainFactory(), mutableOnly);
                var tmp$40;
                return (tmp$40 = (o != null ? o : Kotlin.throwNPE()).resolve(context_39, readOnly, mutableOnly)) != null ? tmp$40 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ComponentType) || Kotlin.isType(o, _.org.kevoree.impl.ComponentTypeImpl)) {
                var context_40 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_40, this.get_mainFactory(), mutableOnly);
                var tmp$41;
                return (tmp$41 = (o != null ? o : Kotlin.throwNPE()).resolve(context_40, readOnly, mutableOnly)) != null ? tmp$41 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ContainerNode) || Kotlin.isType(o, _.org.kevoree.impl.ContainerNodeImpl)) {
                var context_41 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_41, this.get_mainFactory(), mutableOnly);
                var tmp$42;
                return (tmp$42 = (o != null ? o : Kotlin.throwNPE()).resolve(context_41, readOnly, mutableOnly)) != null ? tmp$42 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ContainerRoot) || Kotlin.isType(o, _.org.kevoree.impl.ContainerRootImpl)) {
                var context_42 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_42, this.get_mainFactory(), mutableOnly);
                var tmp$43;
                return (tmp$43 = (o != null ? o : Kotlin.throwNPE()).resolve(context_42, readOnly, mutableOnly)) != null ? tmp$43 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.PortType) || Kotlin.isType(o, _.org.kevoree.impl.PortTypeImpl)) {
                var context_43 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_43, this.get_mainFactory(), mutableOnly);
                var tmp$44;
                return (tmp$44 = (o != null ? o : Kotlin.throwNPE()).resolve(context_43, readOnly, mutableOnly)) != null ? tmp$44 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Port) || Kotlin.isType(o, _.org.kevoree.impl.PortImpl)) {
                var context_44 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_44, this.get_mainFactory(), mutableOnly);
                var tmp$45;
                return (tmp$45 = (o != null ? o : Kotlin.throwNPE()).resolve(context_44, readOnly, mutableOnly)) != null ? tmp$45 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Namespace) || Kotlin.isType(o, _.org.kevoree.impl.NamespaceImpl)) {
                var context_45 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_45, this.get_mainFactory(), mutableOnly);
                var tmp$46;
                return (tmp$46 = (o != null ? o : Kotlin.throwNPE()).resolve(context_45, readOnly, mutableOnly)) != null ? tmp$46 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Dictionary) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryImpl)) {
                var context_46 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_46, this.get_mainFactory(), mutableOnly);
                var tmp$47;
                return (tmp$47 = (o != null ? o : Kotlin.throwNPE()).resolve(context_46, readOnly, mutableOnly)) != null ? tmp$47 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.DictionaryType) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryTypeImpl)) {
                var context_47 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_47, this.get_mainFactory(), mutableOnly);
                var tmp$48;
                return (tmp$48 = (o != null ? o : Kotlin.throwNPE()).resolve(context_47, readOnly, mutableOnly)) != null ? tmp$48 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.DictionaryAttribute) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryAttributeImpl)) {
                var context_48 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_48, this.get_mainFactory(), mutableOnly);
                var tmp$49;
                return (tmp$49 = (o != null ? o : Kotlin.throwNPE()).resolve(context_48, readOnly, mutableOnly)) != null ? tmp$49 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.DictionaryValue) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryValueImpl)) {
                var context_49 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_49, this.get_mainFactory(), mutableOnly);
                var tmp$50;
                return (tmp$50 = (o != null ? o : Kotlin.throwNPE()).resolve(context_49, readOnly, mutableOnly)) != null ? tmp$50 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.CompositeType) || Kotlin.isType(o, _.org.kevoree.impl.CompositeTypeImpl)) {
                var context_50 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_50, this.get_mainFactory(), mutableOnly);
                var tmp$51;
                return (tmp$51 = (o != null ? o : Kotlin.throwNPE()).resolve(context_50, readOnly, mutableOnly)) != null ? tmp$51 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.PortTypeRef) || Kotlin.isType(o, _.org.kevoree.impl.PortTypeRefImpl)) {
                var context_51 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_51, this.get_mainFactory(), mutableOnly);
                var tmp$52;
                return (tmp$52 = (o != null ? o : Kotlin.throwNPE()).resolve(context_51, readOnly, mutableOnly)) != null ? tmp$52 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Wire) || Kotlin.isType(o, _.org.kevoree.impl.WireImpl)) {
                var context_52 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_52, this.get_mainFactory(), mutableOnly);
                var tmp$53;
                return (tmp$53 = (o != null ? o : Kotlin.throwNPE()).resolve(context_52, readOnly, mutableOnly)) != null ? tmp$53 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ServicePortType) || Kotlin.isType(o, _.org.kevoree.impl.ServicePortTypeImpl)) {
                var context_53 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_53, this.get_mainFactory(), mutableOnly);
                var tmp$54;
                return (tmp$54 = (o != null ? o : Kotlin.throwNPE()).resolve(context_53, readOnly, mutableOnly)) != null ? tmp$54 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Operation) || Kotlin.isType(o, _.org.kevoree.impl.OperationImpl)) {
                var context_54 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_54, this.get_mainFactory(), mutableOnly);
                var tmp$55;
                return (tmp$55 = (o != null ? o : Kotlin.throwNPE()).resolve(context_54, readOnly, mutableOnly)) != null ? tmp$55 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Parameter) || Kotlin.isType(o, _.org.kevoree.impl.ParameterImpl)) {
                var context_55 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_55, this.get_mainFactory(), mutableOnly);
                var tmp$56;
                return (tmp$56 = (o != null ? o : Kotlin.throwNPE()).resolve(context_55, readOnly, mutableOnly)) != null ? tmp$56 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.TypedElement) || Kotlin.isType(o, _.org.kevoree.impl.TypedElementImpl)) {
                var context_56 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_56, this.get_mainFactory(), mutableOnly);
                var tmp$57;
                return (tmp$57 = (o != null ? o : Kotlin.throwNPE()).resolve(context_56, readOnly, mutableOnly)) != null ? tmp$57 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.MessagePortType) || Kotlin.isType(o, _.org.kevoree.impl.MessagePortTypeImpl)) {
                var context_57 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_57, this.get_mainFactory(), mutableOnly);
                var tmp$58;
                return (tmp$58 = (o != null ? o : Kotlin.throwNPE()).resolve(context_57, readOnly, mutableOnly)) != null ? tmp$58 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Repository) || Kotlin.isType(o, _.org.kevoree.impl.RepositoryImpl)) {
                var context_58 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_58, this.get_mainFactory(), mutableOnly);
                var tmp$59;
                return (tmp$59 = (o != null ? o : Kotlin.throwNPE()).resolve(context_58, readOnly, mutableOnly)) != null ? tmp$59 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.DeployUnit) || Kotlin.isType(o, _.org.kevoree.impl.DeployUnitImpl)) {
                var context_59 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_59, this.get_mainFactory(), mutableOnly);
                var tmp$60;
                return (tmp$60 = (o != null ? o : Kotlin.throwNPE()).resolve(context_59, readOnly, mutableOnly)) != null ? tmp$60 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.TypeLibrary) || Kotlin.isType(o, _.org.kevoree.impl.TypeLibraryImpl)) {
                var context_60 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_60, this.get_mainFactory(), mutableOnly);
                var tmp$61;
                return (tmp$61 = (o != null ? o : Kotlin.throwNPE()).resolve(context_60, readOnly, mutableOnly)) != null ? tmp$61 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.NamedElement) || Kotlin.isType(o, _.org.kevoree.impl.NamedElementImpl)) {
                var context_61 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_61, this.get_mainFactory(), mutableOnly);
                var tmp$62;
                return (tmp$62 = (o != null ? o : Kotlin.throwNPE()).resolve(context_61, readOnly, mutableOnly)) != null ? tmp$62 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.IntegrationPattern) || Kotlin.isType(o, _.org.kevoree.impl.IntegrationPatternImpl)) {
                var context_62 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_62, this.get_mainFactory(), mutableOnly);
                var tmp$63;
                return (tmp$63 = (o != null ? o : Kotlin.throwNPE()).resolve(context_62, readOnly, mutableOnly)) != null ? tmp$63 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ExtraFonctionalProperty) || Kotlin.isType(o, _.org.kevoree.impl.ExtraFonctionalPropertyImpl)) {
                var context_63 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_63, this.get_mainFactory(), mutableOnly);
                var tmp$64;
                return (tmp$64 = (o != null ? o : Kotlin.throwNPE()).resolve(context_63, readOnly, mutableOnly)) != null ? tmp$64 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.PortTypeMapping) || Kotlin.isType(o, _.org.kevoree.impl.PortTypeMappingImpl)) {
                var context_64 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_64, this.get_mainFactory(), mutableOnly);
                var tmp$65;
                return (tmp$65 = (o != null ? o : Kotlin.throwNPE()).resolve(context_64, readOnly, mutableOnly)) != null ? tmp$65 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Channel) || Kotlin.isType(o, _.org.kevoree.impl.ChannelImpl)) {
                var context_65 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_65, this.get_mainFactory(), mutableOnly);
                var tmp$66;
                return (tmp$66 = (o != null ? o : Kotlin.throwNPE()).resolve(context_65, readOnly, mutableOnly)) != null ? tmp$66 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.MBinding) || Kotlin.isType(o, _.org.kevoree.impl.MBindingImpl)) {
                var context_66 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_66, this.get_mainFactory(), mutableOnly);
                var tmp$67;
                return (tmp$67 = (o != null ? o : Kotlin.throwNPE()).resolve(context_66, readOnly, mutableOnly)) != null ? tmp$67 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.NodeNetwork) || Kotlin.isType(o, _.org.kevoree.impl.NodeNetworkImpl)) {
                var context_67 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_67, this.get_mainFactory(), mutableOnly);
                var tmp$68;
                return (tmp$68 = (o != null ? o : Kotlin.throwNPE()).resolve(context_67, readOnly, mutableOnly)) != null ? tmp$68 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.NodeLink) || Kotlin.isType(o, _.org.kevoree.impl.NodeLinkImpl)) {
                var context_68 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_68, this.get_mainFactory(), mutableOnly);
                var tmp$69;
                return (tmp$69 = (o != null ? o : Kotlin.throwNPE()).resolve(context_68, readOnly, mutableOnly)) != null ? tmp$69 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.NetworkProperty) || Kotlin.isType(o, _.org.kevoree.impl.NetworkPropertyImpl)) {
                var context_69 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_69, this.get_mainFactory(), mutableOnly);
                var tmp$70;
                return (tmp$70 = (o != null ? o : Kotlin.throwNPE()).resolve(context_69, readOnly, mutableOnly)) != null ? tmp$70 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.ChannelType) || Kotlin.isType(o, _.org.kevoree.impl.ChannelTypeImpl)) {
                var context_70 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_70, this.get_mainFactory(), mutableOnly);
                var tmp$71;
                return (tmp$71 = (o != null ? o : Kotlin.throwNPE()).resolve(context_70, readOnly, mutableOnly)) != null ? tmp$71 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.TypeDefinition) || Kotlin.isType(o, _.org.kevoree.impl.TypeDefinitionImpl)) {
                var context_71 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_71, this.get_mainFactory(), mutableOnly);
                var tmp$72;
                return (tmp$72 = (o != null ? o : Kotlin.throwNPE()).resolve(context_71, readOnly, mutableOnly)) != null ? tmp$72 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Instance) || Kotlin.isType(o, _.org.kevoree.impl.InstanceImpl)) {
                var context_72 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_72, this.get_mainFactory(), mutableOnly);
                var tmp$73;
                return (tmp$73 = (o != null ? o : Kotlin.throwNPE()).resolve(context_72, readOnly, mutableOnly)) != null ? tmp$73 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.LifeCycleTypeDefinition) || Kotlin.isType(o, _.org.kevoree.impl.LifeCycleTypeDefinitionImpl)) {
                var context_73 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_73, this.get_mainFactory(), mutableOnly);
                var tmp$74;
                return (tmp$74 = (o != null ? o : Kotlin.throwNPE()).resolve(context_73, readOnly, mutableOnly)) != null ? tmp$74 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.Group) || Kotlin.isType(o, _.org.kevoree.impl.GroupImpl)) {
                var context_74 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_74, this.get_mainFactory(), mutableOnly);
                var tmp$75;
                return (tmp$75 = (o != null ? o : Kotlin.throwNPE()).resolve(context_74, readOnly, mutableOnly)) != null ? tmp$75 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.GroupType) || Kotlin.isType(o, _.org.kevoree.impl.GroupTypeImpl)) {
                var context_75 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_75, this.get_mainFactory(), mutableOnly);
                var tmp$76;
                return (tmp$76 = (o != null ? o : Kotlin.throwNPE()).resolve(context_75, readOnly, mutableOnly)) != null ? tmp$76 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.NodeType) || Kotlin.isType(o, _.org.kevoree.impl.NodeTypeImpl)) {
                var context_76 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_76, this.get_mainFactory(), mutableOnly);
                var tmp$77;
                return (tmp$77 = (o != null ? o : Kotlin.throwNPE()).resolve(context_76, readOnly, mutableOnly)) != null ? tmp$77 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.AdaptationPrimitiveType) || Kotlin.isType(o, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl)) {
                var context_77 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_77, this.get_mainFactory(), mutableOnly);
                var tmp$78;
                return (tmp$78 = (o != null ? o : Kotlin.throwNPE()).resolve(context_77, readOnly, mutableOnly)) != null ? tmp$78 : Kotlin.throwNPE();
              }
              if (Kotlin.isType(o, _.org.kevoree.AdaptationPrimitiveTypeRef) || Kotlin.isType(o, _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl)) {
                var context_78 = new Kotlin.ComplexHashMap(0);
                (o != null ? o : Kotlin.throwNPE()).getClonelazy(context_78, this.get_mainFactory(), mutableOnly);
                var tmp$79;
                return (tmp$79 = (o != null ? o : Kotlin.throwNPE()).resolve(context_78, readOnly, mutableOnly)) != null ? tmp$79 : Kotlin.throwNPE();
              }
              return null;
            },
            get_mainFactory: function () {
              return this.$mainFactory;
            },
            set_mainFactory: function (tmp$0) {
              this.$mainFactory = tmp$0;
            },
            setKevoreeFactory: function (fct) {
              this.get_mainFactory().setKevoreeFactory(fct);
            }
          })
        }),
        compare: Kotlin.definePackage({
          DefaultModelCompare: Kotlin.createClass(classes.cq, /** @lends _.org.kevoree.compare.DefaultModelCompare.prototype */ {
            initialize: function () {
            },
            createSequence: function () {
              return new _.org.kevoree.trace.DefaultTraceSequence();
            },
            diff: function (origin, target) {
              return this.createSequence().populate(this.internal_diff(origin, target, false, false));
            },
            merge: function (origin, target) {
              return this.createSequence().populate(this.internal_diff(origin, target, false, true));
            },
            inter: function (origin, target) {
              return this.createSequence().populate(this.internal_diff(origin, target, true, false));
            },
            internal_diff: function (origin, target, inter, merge) {
              var traces = new Kotlin.ArrayList(0);
              var tracesRef = new Kotlin.ArrayList(0);
              var objectsMap = new Kotlin.PrimitiveHashMap(0);
              traces.addAll((origin != null ? origin : Kotlin.throwNPE()).generateDiffTraces(target, inter, false));
              tracesRef.addAll((origin != null ? origin : Kotlin.throwNPE()).generateDiffTraces(target, inter, true));
              var visitor = _.org.kevoree.compare.DefaultModelCompare.f0(objectsMap);
              origin.visit(visitor, true, true);
              var visitor2 = _.org.kevoree.compare.DefaultModelCompare.f1(objectsMap, inter, traces, tracesRef);
              target.visit(visitor2, true, true);
              if (!inter) {
                if (!merge) {
                  {
                    var tmp$0 = objectsMap.values().iterator();
                    while (tmp$0.hasNext()) {
                      var diffChild = tmp$0.next();
                      var tmp$1, tmp$2, tmp$3, tmp$4;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$2 = ((tmp$1 = diffChild.eContainer()) != null ? tmp$1 : Kotlin.throwNPE()).path()) != null ? tmp$2 : Kotlin.throwNPE(), (tmp$3 = diffChild.getRefInParent()) != null ? tmp$3 : Kotlin.throwNPE(), (tmp$4 = (diffChild != null ? diffChild : Kotlin.throwNPE()).path()) != null ? tmp$4 : Kotlin.throwNPE()));
                    }
                  }
                }
              }
              traces.addAll(tracesRef);
              return traces;
            }
          }, /** @lends _.org.kevoree.compare.DefaultModelCompare */ {
            f0: function (objectsMap) {
              return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
                initialize: function () {
                  this.super_init();
                },
                visit: function (elem, refNameInParent, parent) {
                  var childPath = elem.path();
                  if (childPath != null) {
                    objectsMap.put(childPath, elem != null ? elem : Kotlin.throwNPE());
                  }
                   else {
                    throw new Error('Null child path ' + elem);
                  }
                }
              });
            },
            f1: function (objectsMap, inter, traces, tracesRef) {
              return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
                initialize: function () {
                  this.super_init();
                },
                visit: function (elem, refNameInParent, parent) {
                  var childPath = elem.path();
                  if (childPath != null) {
                    if (objectsMap.containsKey(childPath)) {
                      if (inter) {
                        var tmp$0;
                        traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$0 = parent.path()) != null ? tmp$0 : Kotlin.throwNPE(), refNameInParent, elem.path(), elem.metaClassName()));
                      }
                      var tmp$1, tmp$2;
                      traces.addAll(((tmp$1 = objectsMap.get(childPath)) != null ? tmp$1 : Kotlin.throwNPE()).generateDiffTraces(elem, inter, false));
                      tracesRef.addAll(((tmp$2 = objectsMap.get(childPath)) != null ? tmp$2 : Kotlin.throwNPE()).generateDiffTraces(elem, inter, true));
                      objectsMap.remove(childPath);
                    }
                     else {
                      if (!inter) {
                        var tmp$3;
                        traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$3 = parent.path()) != null ? tmp$3 : Kotlin.throwNPE(), refNameInParent, elem.path(), elem.metaClassName()));
                        traces.addAll((elem != null ? elem : Kotlin.throwNPE()).generateDiffTraces(elem != null ? elem : Kotlin.throwNPE(), true, false));
                        tracesRef.addAll((elem != null ? elem : Kotlin.throwNPE()).generateDiffTraces(elem != null ? elem : Kotlin.throwNPE(), true, true));
                      }
                    }
                  }
                   else {
                    throw new Error('Null child path ' + elem);
                  }
                }
              });
            }
          })
        }),
        container: Kotlin.definePackage({
          KMFContainerImpl: classes.c8,
          RemoveFromContainerCommand: Kotlin.createClass(null, /** @lends _.org.kevoree.container.RemoveFromContainerCommand.prototype */ {
            initialize: function (target, mutatorType, refName, element) {
              this.$target = target;
              this.$mutatorType = mutatorType;
              this.$refName = refName;
              this.$element = element;
            },
            get_target: function () {
              return this.$target;
            },
            get_mutatorType: function () {
              return this.$mutatorType;
            },
            get_refName: function () {
              return this.$refName;
            },
            get_element: function () {
              return this.$element;
            },
            run: function () {
              this.get_target().reflexiveMutator(this.get_mutatorType(), this.get_refName(), this.get_element());
            }
          })
        }),
        factory: Kotlin.definePackage({
          MainFactory: Kotlin.createClass(classes.cu, /** @lends _.org.kevoree.factory.MainFactory.prototype */ {
            initialize: function () {
              this.$factories = Kotlin.arrayFromFun(1, function (i) {
                return null;
              });
              this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()] = new _.org.kevoree.impl.DefaultKevoreeFactory();
            },
            get_factories: function () {
              return this.$factories;
            },
            set_factories: function (tmp$0) {
              this.$factories = tmp$0;
            },
            getFactoryForPackage: function (pack) {
              return this.get_factories()[pack];
            },
            getKevoreeFactory: function () {
              var tmp$0;
              return (tmp$0 = this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()]) != null ? tmp$0 : Kotlin.throwNPE();
            },
            setKevoreeFactory: function (fct) {
              this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()] = fct;
            },
            create: function (metaClassName) {
              var tmp$0;
              return (tmp$0 = this.getFactoryForPackage(_.org.kevoree.factory.Package.getPackageForName(metaClassName))) != null ? tmp$0.create(metaClassName) : null;
            }
          })
        }),
        impl: Kotlin.definePackage({
          AdaptationPrimitiveTypeImpl: Kotlin.createClass([classes.c8, classes.c1], /** @lends _.org.kevoree.impl.AdaptationPrimitiveTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createAdaptationPrimitiveType();
              selfObjectClone.set_name(this.get_name());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.AdaptationPrimitiveType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.AdaptationPrimitiveType';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.AdaptationPrimitiveType) || Kotlin.isType(similarObj, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            }
          }),
          AdaptationPrimitiveTypeRefImpl: Kotlin.createClass([classes.c8, classes.c2], /** @lends _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$maxTime = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$ref = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              this.set_ref(null);
            },
            get_maxTime: function () {
              return this.$maxTime;
            },
            set_maxTime: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$maxTime = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_maxTime(), this.get_maxTime()));
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get_ref: function () {
              return this.$ref;
            },
            set_ref: function (refP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$ref, refP)) {
                this.$ref = refP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ref(), refP));
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createAdaptationPrimitiveTypeRef();
              selfObjectClone.set_maxTime(this.get_maxTime());
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (this.get_ref() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.get_ref()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.set_ref((tmp$2 = this.get_ref()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.get_ref());
                  if (interObj == null) {
                    throw new Error('Non contained ref from AdaptationPrimitiveTypeRef : ' + this.get_ref());
                  }
                  clonedSelfObject.set_ref(interObj != null ? interObj : Kotlin.throwNPE());
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_maxTime()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_maxTime(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_ref()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_ref(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_ref(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_ref(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.AdaptationPrimitiveTypeRef) || !Kotlin.isType(similarObj, _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_maxTime(), similarObjCasted.get_maxTime())) {
                return false;
              }
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_ref() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_ref()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.AdaptationPrimitiveTypeRef';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.AdaptationPrimitiveTypeRef) || Kotlin.isType(similarObj, _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_maxTime();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_maxTime() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_maxTime(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_maxTime(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$4, tmp$5;
                attVal = (tmp$4 = this.get_ref()) != null ? tmp$4.path() : null;
                attVal2 = null;
                attVal2 = (tmp$5 = similarObjCasted != null ? similarObjCasted.get_ref() : null) != null ? tmp$5.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ref(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ref(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getMaxTime: function () {
              return this.get_maxTime();
            },
            setMaxTime: function (internal_p) {
              this.set_maxTime(internal_p);
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getRef: function () {
              return this.get_ref();
            },
            setRef: function (internal_p) {
              this.set_ref(internal_p);
            }
          }),
          ChannelImpl: Kotlin.createClass([classes.c8, classes.c3], /** @lends _.org.kevoree.impl.ChannelImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$metaData = null;
              this.$typeDefinition = null;
              this.$dictionary = null;
              this.$_bindings = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1;
              (tmp$0 = this.get_dictionary()) != null ? tmp$0.delete() : null;
              this.set_typeDefinition(null);
              this.set_dictionary(null);
              (tmp$1 = this.get__bindings()) != null ? tmp$1.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_metaData: function () {
              return this.$metaData;
            },
            set_metaData: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$metaData = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_metaData(), this.get_metaData()));
            },
            get_typeDefinition: function () {
              return this.$typeDefinition;
            },
            set_typeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$typeDefinition, typeDefinitionP)) {
                this.$typeDefinition = typeDefinitionP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), typeDefinitionP));
              }
            },
            get_dictionary: function () {
              return this.$dictionary;
            },
            set_dictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionary, dictionaryP)) {
                if (this.$dictionary != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionary) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionary', null), 'dictionary');
                }
                this.$dictionary = dictionaryP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionary(), dictionaryP));
              }
            },
            get__bindings: function () {
              return this.$_bindings;
            },
            get_bindings: function () {
              return _.kotlin.toList_2(this.get__bindings().values());
            },
            set_bindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (bindingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__bindings().values(), bindingsP)) {
                this.get__bindings().clear();
                {
                  var tmp$0 = bindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__bindings().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = bindingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).noOpposite_hub(this);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
              }
            },
            addBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__bindings().put(_key_, bindingsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
              (bindingsP != null ? bindingsP : Kotlin.throwNPE()).noOpposite_hub(this);
            },
            addAllBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = bindingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__bindings().put(_key_, el);
                }
              }
              {
                var tmp$1 = bindingsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).noOpposite_hub(this);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
            },
            noOpposite_addBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__bindings().put(_key_, bindingsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
            },
            noOpposite_addAllBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = bindingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__bindings().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
            },
            removeBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__bindings().remove((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
                (bindingsP != null ? bindingsP : Kotlin.throwNPE()).noOpposite_hub(null);
              }
            },
            removeAllBindings: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_bindings()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).noOpposite_hub(null);
                }
              }
              this.get__bindings().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), temp_els));
            },
            noOpposite_removeBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__bindings().remove((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
              }
            },
            noOpposite_removeAllBindings: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_bindings()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__bindings().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createChannel();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_metaData(this.get_metaData());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionary = this.get_dictionary();
              if (subsubsubsubdictionary != null) {
                (subsubsubsubdictionary != null ? subsubsubsubdictionary : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (this.get_typeDefinition() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.get_typeDefinition()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.set_typeDefinition((tmp$2 = this.get_typeDefinition()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.get_typeDefinition());
                  if (interObj == null) {
                    throw new Error('Non contained typeDefinition from Channel : ' + this.get_typeDefinition());
                  }
                  clonedSelfObject.set_typeDefinition(interObj != null ? interObj : Kotlin.throwNPE());
                }
              }
              if (this.get_dictionary() != null) {
                var tmp$3;
                if (mutableOnly && ((tmp$3 = this.get_dictionary()) != null ? tmp$3 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$4;
                  clonedSelfObject.set_dictionary((tmp$4 = this.get_dictionary()) != null ? tmp$4 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionary());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionary from Channel : ' + this.get_dictionary());
                  }
                  clonedSelfObject.set_dictionary(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$5 = this.get_bindings().iterator();
                while (tmp$5.hasNext()) {
                  var sub = tmp$5.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.noOpposite_addBindings(sub);
                  }
                   else {
                    var interObj_1 = addrs.get(sub);
                    if (interObj_1 == null) {
                      throw new Error('Non contained bindings from Channel : ' + this.get_bindings());
                    }
                    clonedSelfObject.noOpposite_addBindings(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionary = this.get_dictionary();
              if (subsubsubdictionary != null) {
                (subsubsubdictionary != null ? subsubsubdictionary : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_metaData(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_typeDefinition(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_typeDefinition(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_typeDefinition(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionary(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionary(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionary(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addBindings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllBindings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeBindings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllBindings();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey(value)) {
                    var obj = this.get__bindings().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__bindings().put(objNewKey, obj);
                    this.get__bindings().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findBindingsByID: function (key) {
              return this.get__bindings().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_typeDefinition();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_typeDefinition();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.get_dictionary();
                  tmp$0 = obj_0 != null ? obj_0.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionary();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                var objFound = this.findBindingsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Channel) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ChannelImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_metaData(), similarObjCasted.get_metaData())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionary(), similarObjCasted.get_dictionary())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionary() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionary()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_typeDefinition() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_typeDefinition()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__bindings().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionary() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionary()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionary(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionary()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              if (!onlyContainedRef) {
                var tmp$2;
                visitor.visit((tmp$2 = this.get_typeDefinition()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$3;
                  ((tmp$3 = this.get_typeDefinition()) != null ? tmp$3 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
                {
                  var tmp$4 = this.get__bindings().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey = tmp$4.next();
                    var tmp$5;
                    var KMFLoopEntry = (tmp$5 = this.get__bindings().get(KMFLoopEntryKey)) != null ? tmp$5 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_bindings(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.Channel';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Channel) || Kotlin.isType(similarObj, _.org.kevoree.impl.ChannelImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_metaData();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_metaData() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$4, tmp$5;
                attVal = (tmp$4 = this.get_typeDefinition()) != null ? tmp$4.path() : null;
                attVal2 = null;
                attVal2 = (tmp$5 = similarObjCasted != null ? similarObjCasted.get_typeDefinition() : null) != null ? tmp$5.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$8 = this.get__bindings().values().iterator();
                  while (tmp$8.hasNext()) {
                    var elem = tmp$8.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$9 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_bindings().iterator();
                    while (tmp$9.hasNext()) {
                      var elem_0 = tmp$9.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$10 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$10.hasNext()) {
                      var hashLoopRes = tmp$10.next();
                      var tmp$11, tmp$12;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_bindings(), hashLoopRes, ((tmp$12 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$12 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getMetaData: function () {
              return this.get_metaData();
            },
            setMetaData: function (internal_p) {
              this.set_metaData(internal_p);
            },
            getTypeDefinition: function () {
              return this.get_typeDefinition();
            },
            setTypeDefinition: function (internal_p) {
              this.set_typeDefinition(internal_p);
            },
            getDictionary: function () {
              return this.get_dictionary();
            },
            setDictionary: function (internal_p) {
              this.set_dictionary(internal_p);
            },
            getBindings: function () {
              return this.get_bindings();
            },
            setBindings: function (internal_p) {
              this.set_bindings(internal_p);
            }
          }),
          ChannelTypeImpl: Kotlin.createClass([classes.c8, classes.c4], /** @lends _.org.kevoree.impl.ChannelTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$nature = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$lowerBindings = null;
              this.$upperBindings = null;
              this.$lowerFragments = null;
              this.$upperFragments = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2;
              (tmp$0 = this.get_dictionaryType()) != null ? tmp$0.delete() : null;
              (tmp$1 = this.get__deployUnits()) != null ? tmp$1.clear() : null;
              this.set_dictionaryType(null);
              (tmp$2 = this.get__superTypes()) != null ? tmp$2.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$factoryBean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$bean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
            },
            get_nature: function () {
              return this.$nature;
            },
            set_nature: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$nature = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_nature(), this.get_nature()));
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$startMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$stopMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$updateMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
            },
            get_lowerBindings: function () {
              return this.$lowerBindings;
            },
            set_lowerBindings: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$lowerBindings = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_lowerBindings(), this.get_lowerBindings()));
            },
            get_upperBindings: function () {
              return this.$upperBindings;
            },
            set_upperBindings: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$upperBindings = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_upperBindings(), this.get_upperBindings()));
            },
            get_lowerFragments: function () {
              return this.$lowerFragments;
            },
            set_lowerFragments: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$lowerFragments = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_lowerFragments(), this.get_lowerFragments()));
            },
            get_upperFragments: function () {
              return this.$upperFragments;
            },
            set_upperFragments: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$upperFragments = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_upperFragments(), this.get_upperFragments()));
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.$dictionaryType = dictionaryTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList_2(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createChannelType();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_factoryBean(this.get_factoryBean());
              selfObjectClone.set_bean(this.get_bean());
              selfObjectClone.set_nature(this.get_nature());
              selfObjectClone.set_startMethod(this.get_startMethod());
              selfObjectClone.set_stopMethod(this.get_stopMethod());
              selfObjectClone.set_updateMethod(this.get_updateMethod());
              selfObjectClone.set_lowerBindings(this.get_lowerBindings());
              selfObjectClone.set_upperBindings(this.get_upperBindings());
              selfObjectClone.set_lowerFragments(this.get_lowerFragments());
              selfObjectClone.set_upperFragments(this.get_upperFragments());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubsubdictionaryType != null) {
                (subsubsubsubdictionaryType != null ? subsubsubsubdictionaryType : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_deployUnits().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained deployUnits from ChannelType : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_dictionaryType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_dictionaryType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_dictionaryType((tmp$3 = this.get_dictionaryType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionaryType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionaryType from ChannelType : ' + this.get_dictionaryType());
                  }
                  clonedSelfObject.set_dictionaryType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_superTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Error('Non contained superTypes from ChannelType : ' + this.get_superTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubdictionaryType != null) {
                (subsubsubdictionaryType != null ? subsubsubdictionaryType : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_factoryBean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_bean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_nature()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_nature(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_startMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_stopMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_updateMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lowerBindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_lowerBindings(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_upperBindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_upperBindings(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lowerFragments()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_lowerFragments(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_upperFragments()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_upperFragments(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().put(objNewKey, obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionaryType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().put(objNewKey_0, obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_dictionaryType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ChannelType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ChannelTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_factoryBean(), similarObjCasted.get_factoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_bean(), similarObjCasted.get_bean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_nature(), similarObjCasted.get_nature())) {
                return false;
              }
              if (!Kotlin.equals(this.get_startMethod(), similarObjCasted.get_startMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_stopMethod(), similarObjCasted.get_stopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_updateMethod(), similarObjCasted.get_updateMethod())) {
                return false;
              }
              if (this.get_lowerBindings() !== similarObjCasted.get_lowerBindings()) {
                return false;
              }
              if (this.get_upperBindings() !== similarObjCasted.get_upperBindings()) {
                return false;
              }
              if (this.get_lowerFragments() !== similarObjCasted.get_lowerFragments()) {
                return false;
              }
              if (this.get_upperFragments() !== similarObjCasted.get_upperFragments()) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionaryType(), similarObjCasted.get_dictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__superTypes().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$2 = this.get__deployUnits().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey = tmp$2.next();
                    var tmp$3;
                    var KMFLoopEntry = (tmp$3 = this.get__deployUnits().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$4 = this.get__superTypes().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$4.next();
                    var tmp$5;
                    var KMFLoopEntry_0 = (tmp$5 = this.get__superTypes().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_superTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.ChannelType';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ChannelType) || Kotlin.isType(similarObj, _.org.kevoree.impl.ChannelTypeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_factoryBean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_factoryBean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_bean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_bean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_nature();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_nature() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_startMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_startMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_stopMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_stopMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$11;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_updateMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_updateMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$12;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$13;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_lowerBindings();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_lowerBindings() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$14;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lowerBindings(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$15;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$15 = this.path()) != null ? tmp$15 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lowerBindings(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_upperBindings();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_upperBindings() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$16;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_upperBindings(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$17;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_upperBindings(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_lowerFragments();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_lowerFragments() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$18;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$18 = this.path()) != null ? tmp$18 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lowerFragments(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$19;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$19 = this.path()) != null ? tmp$19 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lowerFragments(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_upperFragments();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_upperFragments() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$20;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$20 = this.path()) != null ? tmp$20 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_upperFragments(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$21;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$21 = this.path()) != null ? tmp$21 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_upperFragments(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$22 = this.get__deployUnits().values().iterator();
                  while (tmp$22.hasNext()) {
                    var elem = tmp$22.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$23 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_deployUnits().iterator();
                    while (tmp$23.hasNext()) {
                      var elem_0 = tmp$23.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$24 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$24.hasNext()) {
                      var hashLoopRes = tmp$24.next();
                      var tmp$25, tmp$26;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$25 = this.path()) != null ? tmp$25 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), hashLoopRes, ((tmp$26 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$26 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$27 = this.get__superTypes().values().iterator();
                  while (tmp$27.hasNext()) {
                    var elem_1 = tmp$27.next();
                    var elemPath_1 = elem_1.path();
                    if (elemPath_1 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_1, elem_1);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$28 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_superTypes().iterator();
                    while (tmp$28.hasNext()) {
                      var elem_2 = tmp$28.next();
                      var elemPath_2 = elem_2.path();
                      if (elemPath_2 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_2)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$29 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$29.hasNext()) {
                      var hashLoopRes_0 = tmp$29.next();
                      var tmp$30, tmp$31;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$30 = this.path()) != null ? tmp$30 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), hashLoopRes_0, ((tmp$31 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_0)) != null ? tmp$31 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getNature: function () {
              return this.get_nature();
            },
            setNature: function (internal_p) {
              this.set_nature(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getLowerBindings: function () {
              return this.get_lowerBindings();
            },
            setLowerBindings: function (internal_p) {
              this.set_lowerBindings(internal_p);
            },
            getUpperBindings: function () {
              return this.get_upperBindings();
            },
            setUpperBindings: function (internal_p) {
              this.set_upperBindings(internal_p);
            },
            getLowerFragments: function () {
              return this.get_lowerFragments();
            },
            setLowerFragments: function (internal_p) {
              this.set_lowerFragments(internal_p);
            },
            getUpperFragments: function () {
              return this.get_upperFragments();
            },
            setUpperFragments: function (internal_p) {
              this.set_upperFragments(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            }
          }),
          ComponentInstanceImpl: Kotlin.createClass([classes.c8, classes.c5], /** @lends _.org.kevoree.impl.ComponentInstanceImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$metaData = null;
              this.$typeDefinition = null;
              this.$dictionary = null;
              this.$_provided = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllProvidedCurrentlyProcessing = false;
              this.$_required = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllRequiredCurrentlyProcessing = false;
              this.$namespace = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$3, tmp$4;
              (tmp$0 = this.get_dictionary()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = this.get__provided().entrySet().iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              {
                var tmp$2 = this.get__required().entrySet().iterator();
                while (tmp$2.hasNext()) {
                  var el_0 = tmp$2.next();
                  _.kotlin.get_value(el_0).delete();
                }
              }
              this.set_typeDefinition(null);
              this.set_dictionary(null);
              (tmp$3 = this.get__provided()) != null ? tmp$3.clear() : null;
              (tmp$4 = this.get__required()) != null ? tmp$4.clear() : null;
              this.set_namespace(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_metaData: function () {
              return this.$metaData;
            },
            set_metaData: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$metaData = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_metaData(), this.get_metaData()));
            },
            get_typeDefinition: function () {
              return this.$typeDefinition;
            },
            set_typeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$typeDefinition, typeDefinitionP)) {
                this.$typeDefinition = typeDefinitionP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), typeDefinitionP));
              }
            },
            get_dictionary: function () {
              return this.$dictionary;
            },
            set_dictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionary, dictionaryP)) {
                if (this.$dictionary != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionary) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionary', null), 'dictionary');
                }
                this.$dictionary = dictionaryP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionary(), dictionaryP));
              }
            },
            get__provided: function () {
              return this.$_provided;
            },
            get_provided: function () {
              return _.kotlin.toList_2(this.get__provided().values());
            },
            set_provided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (providedP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__provided().values(), providedP)) {
                this.get__provided().clear();
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__provided().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = providedP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', elem), 'provided');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
              }
            },
            addProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (providedP != null ? providedP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', providedP), 'provided');
              var _key_ = (providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__provided().put(_key_, providedP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
            },
            addAllProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = providedP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__provided().put(_key_, el);
                }
              }
              {
                var tmp$1 = providedP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', el_0), 'provided');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
            },
            get_removeAllProvidedCurrentlyProcessing: function () {
              return this.$removeAllProvidedCurrentlyProcessing;
            },
            set_removeAllProvidedCurrentlyProcessing: function (tmp$0) {
              this.$removeAllProvidedCurrentlyProcessing = tmp$0;
            },
            removeProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__provided().size() !== 0 && this.get__provided().containsKey((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__provided().remove((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey());
                ((providedP != null ? providedP : Kotlin.throwNPE()) != null ? providedP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllProvidedCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
                }
              }
            },
            removeAllProvided: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllProvidedCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_provided()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__provided().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), temp_els));
              this.set_removeAllProvidedCurrentlyProcessing(false);
            },
            get__required: function () {
              return this.$_required;
            },
            get_required: function () {
              return _.kotlin.toList_2(this.get__required().values());
            },
            set_required: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__required().values(), requiredP)) {
                this.get__required().clear();
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__required().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = requiredP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', elem), 'required');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
              }
            },
            addRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (requiredP != null ? requiredP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', requiredP), 'required');
              var _key_ = (requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__required().put(_key_, requiredP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
            },
            addAllRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = requiredP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__required().put(_key_, el);
                }
              }
              {
                var tmp$1 = requiredP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', el_0), 'required');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
            },
            get_removeAllRequiredCurrentlyProcessing: function () {
              return this.$removeAllRequiredCurrentlyProcessing;
            },
            set_removeAllRequiredCurrentlyProcessing: function (tmp$0) {
              this.$removeAllRequiredCurrentlyProcessing = tmp$0;
            },
            removeRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__required().size() !== 0 && this.get__required().containsKey((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__required().remove((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey());
                ((requiredP != null ? requiredP : Kotlin.throwNPE()) != null ? requiredP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllRequiredCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
                }
              }
            },
            removeAllRequired: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllRequiredCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_required()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__required().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), temp_els));
              this.set_removeAllRequiredCurrentlyProcessing(false);
            },
            get_namespace: function () {
              return this.$namespace;
            },
            set_namespace: function (namespaceP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$namespace, namespaceP)) {
                this.$namespace = namespaceP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_namespace(), namespaceP));
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createComponentInstance();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_metaData(this.get_metaData());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionary = this.get_dictionary();
              if (subsubsubsubdictionary != null) {
                (subsubsubsubdictionary != null ? subsubsubsubdictionary : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.get_provided().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$1 = this.get_required().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (this.get_typeDefinition() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.get_typeDefinition()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.set_typeDefinition((tmp$2 = this.get_typeDefinition()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.get_typeDefinition());
                  if (interObj == null) {
                    throw new Error('Non contained typeDefinition from ComponentInstance : ' + this.get_typeDefinition());
                  }
                  clonedSelfObject.set_typeDefinition(interObj != null ? interObj : Kotlin.throwNPE());
                }
              }
              if (this.get_dictionary() != null) {
                var tmp$3;
                if (mutableOnly && ((tmp$3 = this.get_dictionary()) != null ? tmp$3 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$4;
                  clonedSelfObject.set_dictionary((tmp$4 = this.get_dictionary()) != null ? tmp$4 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionary());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionary from ComponentInstance : ' + this.get_dictionary());
                  }
                  clonedSelfObject.set_dictionary(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$5 = this.get_provided().iterator();
                while (tmp$5.hasNext()) {
                  var sub = tmp$5.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addProvided(sub);
                  }
                   else {
                    var interObj_1 = addrs.get(sub);
                    if (interObj_1 == null) {
                      throw new Error('Non contained provided from ComponentInstance : ' + this.get_provided());
                    }
                    clonedSelfObject.addProvided(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$6 = this.get_required().iterator();
                while (tmp$6.hasNext()) {
                  var sub_0 = tmp$6.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addRequired(sub_0);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_0);
                    if (interObj_2 == null) {
                      throw new Error('Non contained required from ComponentInstance : ' + this.get_required());
                    }
                    clonedSelfObject.addRequired(interObj_2 != null ? interObj_2 : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_namespace() != null) {
                var tmp$7;
                if (mutableOnly && ((tmp$7 = this.get_namespace()) != null ? tmp$7 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$8;
                  clonedSelfObject.set_namespace((tmp$8 = this.get_namespace()) != null ? tmp$8 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_3 = addrs.get(this.get_namespace());
                  if (interObj_3 == null) {
                    throw new Error('Non contained namespace from ComponentInstance : ' + this.get_namespace());
                  }
                  clonedSelfObject.set_namespace(interObj_3 != null ? interObj_3 : Kotlin.throwNPE());
                }
              }
              var subsubsubdictionary = this.get_dictionary();
              if (subsubsubdictionary != null) {
                (subsubsubdictionary != null ? subsubsubdictionary : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$9 = this.get_provided().iterator();
                while (tmp$9.hasNext()) {
                  var sub_1 = tmp$9.next();
                  (sub_1 != null ? sub_1 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$10 = this.get_required().iterator();
                while (tmp$10.hasNext()) {
                  var sub_2 = tmp$10.next();
                  (sub_2 != null ? sub_2 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_metaData(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_typeDefinition(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_typeDefinition(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_typeDefinition(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionary(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionary(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionary(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addProvided(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllProvided(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeProvided(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllProvided();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__provided().size() !== 0 && this.get__provided().containsKey(value)) {
                    var obj = this.get__provided().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__provided().put(objNewKey, obj);
                    this.get__provided().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_required()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addRequired(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllRequired(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeRequired(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequired();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__required().size() !== 0 && this.get__required().containsKey(value)) {
                    var obj_0 = this.get__required().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__required().put(objNewKey_0, obj_0);
                    this.get__required().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_namespace()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_namespace(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_namespace(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_namespace(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findProvidedByID: function (key) {
              return this.get__provided().get(key);
            },
            findRequiredByID: function (key) {
              return this.get__required().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_typeDefinition();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_typeDefinition();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.get_dictionary();
                  tmp$0 = obj_0 != null ? obj_0.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionary();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                var objFound = this.findProvidedByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_required()) {
                var objFound_0 = this.findRequiredByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_namespace()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_1 = this.get_namespace();
                  tmp$0 = obj_1 != null ? obj_1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_namespace();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__provided().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findProvidedByID(subElement.get_generated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              {
                var tmp$1 = this.get__required().values().iterator();
                while (tmp$1.hasNext()) {
                  var subElement_0 = tmp$1.next();
                  var foundedElement_0 = similarObjCasted.findRequiredByID(subElement_0.get_generated_KMF_ID());
                  if (foundedElement_0 == null || !Kotlin.equals(foundedElement_0, subElement_0)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ComponentInstance) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ComponentInstanceImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_metaData(), similarObjCasted.get_metaData())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionary(), similarObjCasted.get_dictionary())) {
                return false;
              }
              if (this.get_provided().size() !== similarObjCasted.get_provided().size()) {
                return false;
              }
              if (this.get_required().size() !== similarObjCasted.get_required().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionary() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionary()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__provided().values());
              result.addAll(this.get__required().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_typeDefinition() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_typeDefinition()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              if (this.get_namespace() != null) {
                var tmp$1;
                result.add((tmp$1 = this.get_namespace()) != null ? tmp$1 : Kotlin.throwNPE());
              }
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionary() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionary()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionary(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionary()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              {
                var tmp$2 = this.get__provided().keySet().iterator();
                while (tmp$2.hasNext()) {
                  var KMFLoopEntryKey = tmp$2.next();
                  var tmp$3;
                  var KMFLoopEntry = (tmp$3 = this.get__provided().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_provided(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$4 = this.get__required().keySet().iterator();
                while (tmp$4.hasNext()) {
                  var KMFLoopEntryKey_0 = tmp$4.next();
                  var tmp$5;
                  var KMFLoopEntry_0 = (tmp$5 = this.get__required().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_required(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                var tmp$6, tmp$8;
                visitor.visit((tmp$6 = this.get_typeDefinition()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$7;
                  ((tmp$7 = this.get_typeDefinition()) != null ? tmp$7 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
                visitor.visit((tmp$8 = this.get_namespace()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_namespace(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$9;
                  ((tmp$9 = this.get_namespace()) != null ? tmp$9 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.ComponentInstance';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ComponentInstance) || Kotlin.isType(similarObj, _.org.kevoree.impl.ComponentInstanceImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_metaData();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_metaData() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$4, tmp$5, tmp$8, tmp$9;
                attVal = (tmp$4 = this.get_typeDefinition()) != null ? tmp$4.path() : null;
                attVal2 = null;
                attVal2 = (tmp$5 = similarObjCasted != null ? similarObjCasted.get_typeDefinition() : null) != null ? tmp$5.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                  }
                }
                attVal = null;
                attVal = (tmp$8 = this.get_namespace()) != null ? tmp$8.path() : null;
                attVal2 = null;
                attVal2 = (tmp$9 = similarObjCasted != null ? similarObjCasted.get_namespace() : null) != null ? tmp$9.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_namespace(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$11;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_namespace(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getMetaData: function () {
              return this.get_metaData();
            },
            setMetaData: function (internal_p) {
              this.set_metaData(internal_p);
            },
            getTypeDefinition: function () {
              return this.get_typeDefinition();
            },
            setTypeDefinition: function (internal_p) {
              this.set_typeDefinition(internal_p);
            },
            getDictionary: function () {
              return this.get_dictionary();
            },
            setDictionary: function (internal_p) {
              this.set_dictionary(internal_p);
            },
            getProvided: function () {
              return this.get_provided();
            },
            setProvided: function (internal_p) {
              this.set_provided(internal_p);
            },
            getRequired: function () {
              return this.get_required();
            },
            setRequired: function (internal_p) {
              this.set_required(internal_p);
            },
            getNamespace: function () {
              return this.get_namespace();
            },
            setNamespace: function (internal_p) {
              this.set_namespace(internal_p);
            }
          }),
          ComponentTypeImpl: Kotlin.createClass([classes.c8, classes.c6], /** @lends _.org.kevoree.impl.ComponentTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$nature = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_required = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllRequiredCurrentlyProcessing = false;
              this.$_integrationPatterns = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllIntegrationPatternsCurrentlyProcessing = false;
              this.$extraFonctionalProperties = null;
              this.$_provided = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllProvidedCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$3, tmp$5, tmp$6, tmp$7, tmp$8, tmp$9;
              (tmp$0 = this.get_dictionaryType()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = this.get__required().entrySet().iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              {
                var tmp$2 = this.get__integrationPatterns().entrySet().iterator();
                while (tmp$2.hasNext()) {
                  var el_0 = tmp$2.next();
                  _.kotlin.get_value(el_0).delete();
                }
              }
              (tmp$3 = this.get_extraFonctionalProperties()) != null ? tmp$3.delete() : null;
              {
                var tmp$4 = this.get__provided().entrySet().iterator();
                while (tmp$4.hasNext()) {
                  var el_1 = tmp$4.next();
                  _.kotlin.get_value(el_1).delete();
                }
              }
              (tmp$5 = this.get__deployUnits()) != null ? tmp$5.clear() : null;
              this.set_dictionaryType(null);
              (tmp$6 = this.get__superTypes()) != null ? tmp$6.clear() : null;
              (tmp$7 = this.get__required()) != null ? tmp$7.clear() : null;
              (tmp$8 = this.get__integrationPatterns()) != null ? tmp$8.clear() : null;
              this.set_extraFonctionalProperties(null);
              (tmp$9 = this.get__provided()) != null ? tmp$9.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$factoryBean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$bean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
            },
            get_nature: function () {
              return this.$nature;
            },
            set_nature: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$nature = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_nature(), this.get_nature()));
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$startMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$stopMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$updateMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.$dictionaryType = dictionaryTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList_2(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
            },
            get__required: function () {
              return this.$_required;
            },
            get_required: function () {
              return _.kotlin.toList_2(this.get__required().values());
            },
            set_required: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__required().values(), requiredP)) {
                this.get__required().clear();
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__required().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = requiredP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', elem), 'required');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
              }
            },
            addRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (requiredP != null ? requiredP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', requiredP), 'required');
              var _key_ = (requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__required().put(_key_, requiredP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
            },
            addAllRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = requiredP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__required().put(_key_, el);
                }
              }
              {
                var tmp$1 = requiredP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', el_0), 'required');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
            },
            get_removeAllRequiredCurrentlyProcessing: function () {
              return this.$removeAllRequiredCurrentlyProcessing;
            },
            set_removeAllRequiredCurrentlyProcessing: function (tmp$0) {
              this.$removeAllRequiredCurrentlyProcessing = tmp$0;
            },
            removeRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__required().size() !== 0 && this.get__required().containsKey((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__required().remove((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey());
                ((requiredP != null ? requiredP : Kotlin.throwNPE()) != null ? requiredP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllRequiredCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
                }
              }
            },
            removeAllRequired: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllRequiredCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_required()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__required().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), temp_els));
              this.set_removeAllRequiredCurrentlyProcessing(false);
            },
            get__integrationPatterns: function () {
              return this.$_integrationPatterns;
            },
            get_integrationPatterns: function () {
              return _.kotlin.toList_2(this.get__integrationPatterns().values());
            },
            set_integrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (integrationPatternsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__integrationPatterns().values(), integrationPatternsP)) {
                this.get__integrationPatterns().clear();
                {
                  var tmp$0 = integrationPatternsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__integrationPatterns().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = integrationPatternsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', elem), 'integrationPatterns');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
              }
            },
            addIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', integrationPatternsP), 'integrationPatterns');
              var _key_ = (integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__integrationPatterns().put(_key_, integrationPatternsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
            },
            addAllIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = integrationPatternsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__integrationPatterns().put(_key_, el);
                }
              }
              {
                var tmp$1 = integrationPatternsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', el_0), 'integrationPatterns');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
            },
            get_removeAllIntegrationPatternsCurrentlyProcessing: function () {
              return this.$removeAllIntegrationPatternsCurrentlyProcessing;
            },
            set_removeAllIntegrationPatternsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllIntegrationPatternsCurrentlyProcessing = tmp$0;
            },
            removeIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__integrationPatterns().remove((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey());
                ((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()) != null ? integrationPatternsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllIntegrationPatternsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
                }
              }
            },
            removeAllIntegrationPatterns: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllIntegrationPatternsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_integrationPatterns()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__integrationPatterns().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), temp_els));
              this.set_removeAllIntegrationPatternsCurrentlyProcessing(false);
            },
            get_extraFonctionalProperties: function () {
              return this.$extraFonctionalProperties;
            },
            set_extraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$extraFonctionalProperties, extraFonctionalPropertiesP)) {
                if (this.$extraFonctionalProperties != null) {
                  var tmp$0;
                  (((tmp$0 = this.$extraFonctionalProperties) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (extraFonctionalPropertiesP != null) {
                  (extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'extraFonctionalProperties', null), 'extraFonctionalProperties');
                }
                this.$extraFonctionalProperties = extraFonctionalPropertiesP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
              }
            },
            get__provided: function () {
              return this.$_provided;
            },
            get_provided: function () {
              return _.kotlin.toList_2(this.get__provided().values());
            },
            set_provided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (providedP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__provided().values(), providedP)) {
                this.get__provided().clear();
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__provided().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = providedP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', elem), 'provided');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
              }
            },
            addProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (providedP != null ? providedP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', providedP), 'provided');
              var _key_ = (providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__provided().put(_key_, providedP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
            },
            addAllProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = providedP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__provided().put(_key_, el);
                }
              }
              {
                var tmp$1 = providedP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', el_0), 'provided');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
            },
            get_removeAllProvidedCurrentlyProcessing: function () {
              return this.$removeAllProvidedCurrentlyProcessing;
            },
            set_removeAllProvidedCurrentlyProcessing: function (tmp$0) {
              this.$removeAllProvidedCurrentlyProcessing = tmp$0;
            },
            removeProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__provided().size() !== 0 && this.get__provided().containsKey((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__provided().remove((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey());
                ((providedP != null ? providedP : Kotlin.throwNPE()) != null ? providedP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllProvidedCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
                }
              }
            },
            removeAllProvided: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllProvidedCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_provided()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__provided().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), temp_els));
              this.set_removeAllProvidedCurrentlyProcessing(false);
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createComponentType();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_factoryBean(this.get_factoryBean());
              selfObjectClone.set_bean(this.get_bean());
              selfObjectClone.set_nature(this.get_nature());
              selfObjectClone.set_startMethod(this.get_startMethod());
              selfObjectClone.set_stopMethod(this.get_stopMethod());
              selfObjectClone.set_updateMethod(this.get_updateMethod());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubsubdictionaryType != null) {
                (subsubsubsubdictionaryType != null ? subsubsubsubdictionaryType : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.get_required().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$1 = this.get_integrationPatterns().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              var subsubsubsubextraFonctionalProperties = this.get_extraFonctionalProperties();
              if (subsubsubsubextraFonctionalProperties != null) {
                (subsubsubsubextraFonctionalProperties != null ? subsubsubsubextraFonctionalProperties : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$2 = this.get_provided().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  (sub_1 != null ? sub_1 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_deployUnits().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained deployUnits from ComponentType : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_dictionaryType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_dictionaryType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_dictionaryType((tmp$3 = this.get_dictionaryType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionaryType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionaryType from ComponentType : ' + this.get_dictionaryType());
                  }
                  clonedSelfObject.set_dictionaryType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_superTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Error('Non contained superTypes from ComponentType : ' + this.get_superTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$5 = this.get_required().iterator();
                while (tmp$5.hasNext()) {
                  var sub_1 = tmp$5.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addRequired(sub_1);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_1);
                    if (interObj_2 == null) {
                      throw new Error('Non contained required from ComponentType : ' + this.get_required());
                    }
                    clonedSelfObject.addRequired(interObj_2 != null ? interObj_2 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$6 = this.get_integrationPatterns().iterator();
                while (tmp$6.hasNext()) {
                  var sub_2 = tmp$6.next();
                  if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                    clonedSelfObject.addIntegrationPatterns(sub_2);
                  }
                   else {
                    var interObj_3 = addrs.get(sub_2);
                    if (interObj_3 == null) {
                      throw new Error('Non contained integrationPatterns from ComponentType : ' + this.get_integrationPatterns());
                    }
                    clonedSelfObject.addIntegrationPatterns(interObj_3 != null ? interObj_3 : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_extraFonctionalProperties() != null) {
                var tmp$7;
                if (mutableOnly && ((tmp$7 = this.get_extraFonctionalProperties()) != null ? tmp$7 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$8;
                  clonedSelfObject.set_extraFonctionalProperties((tmp$8 = this.get_extraFonctionalProperties()) != null ? tmp$8 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_4 = addrs.get(this.get_extraFonctionalProperties());
                  if (interObj_4 == null) {
                    throw new Error('Non contained extraFonctionalProperties from ComponentType : ' + this.get_extraFonctionalProperties());
                  }
                  clonedSelfObject.set_extraFonctionalProperties(interObj_4 != null ? interObj_4 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$9 = this.get_provided().iterator();
                while (tmp$9.hasNext()) {
                  var sub_3 = tmp$9.next();
                  if (mutableOnly && sub_3.isRecursiveReadOnly()) {
                    clonedSelfObject.addProvided(sub_3);
                  }
                   else {
                    var interObj_5 = addrs.get(sub_3);
                    if (interObj_5 == null) {
                      throw new Error('Non contained provided from ComponentType : ' + this.get_provided());
                    }
                    clonedSelfObject.addProvided(interObj_5 != null ? interObj_5 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubdictionaryType != null) {
                (subsubsubdictionaryType != null ? subsubsubdictionaryType : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$10 = this.get_required().iterator();
                while (tmp$10.hasNext()) {
                  var sub_4 = tmp$10.next();
                  (sub_4 != null ? sub_4 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$11 = this.get_integrationPatterns().iterator();
                while (tmp$11.hasNext()) {
                  var sub_5 = tmp$11.next();
                  (sub_5 != null ? sub_5 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              var subsubsubextraFonctionalProperties = this.get_extraFonctionalProperties();
              if (subsubsubextraFonctionalProperties != null) {
                (subsubsubextraFonctionalProperties != null ? subsubsubextraFonctionalProperties : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$12 = this.get_provided().iterator();
                while (tmp$12.hasNext()) {
                  var sub_6 = tmp$12.next();
                  (sub_6 != null ? sub_6 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_factoryBean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_bean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_nature()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_nature(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_startMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_stopMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_updateMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().put(objNewKey, obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionaryType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().put(objNewKey_0, obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_required()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addRequired(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllRequired(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeRequired(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequired();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__required().size() !== 0 && this.get__required().containsKey(value)) {
                    var obj_1 = this.get__required().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__required().put(objNewKey_1, obj_1);
                    this.get__required().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addIntegrationPatterns(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllIntegrationPatterns(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeIntegrationPatterns(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllIntegrationPatterns();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey(value)) {
                    var obj_2 = this.get__integrationPatterns().get(value);
                    var objNewKey_2 = (obj_2 != null ? obj_2 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_2 == null) {
                      throw new Error('Key newed to null ' + obj_2);
                    }
                    this.get__integrationPatterns().put(objNewKey_2, obj_2);
                    this.get__integrationPatterns().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_extraFonctionalProperties(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_extraFonctionalProperties(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_extraFonctionalProperties(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addProvided(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllProvided(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeProvided(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllProvided();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__provided().size() !== 0 && this.get__provided().containsKey(value)) {
                    var obj_3 = this.get__provided().get(value);
                    var objNewKey_3 = (obj_3 != null ? obj_3 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_3 == null) {
                      throw new Error('Key newed to null ' + obj_3);
                    }
                    this.get__provided().put(objNewKey_3, obj_3);
                    this.get__provided().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findRequiredByID: function (key) {
              return this.get__required().get(key);
            },
            findIntegrationPatternsByID: function (key) {
              return this.get__integrationPatterns().get(key);
            },
            findProvidedByID: function (key) {
              return this.get__provided().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_dictionaryType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_required()) {
                var objFound_1 = this.findRequiredByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                var objFound_2 = this.findIntegrationPatternsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_2 != null) {
                  tmp$0 = objFound_2.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_2;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.get_extraFonctionalProperties();
                  tmp$0 = obj_0 != null ? obj_0.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_extraFonctionalProperties();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                var objFound_3 = this.findProvidedByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_3 != null) {
                  tmp$0 = objFound_3.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_3;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__required().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findRequiredByID(subElement.get_name());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              {
                var tmp$1 = this.get__integrationPatterns().values().iterator();
                while (tmp$1.hasNext()) {
                  var subElement_0 = tmp$1.next();
                  var foundedElement_0 = similarObjCasted.findIntegrationPatternsByID(subElement_0.get_name());
                  if (foundedElement_0 == null || !Kotlin.equals(foundedElement_0, subElement_0)) {
                    return false;
                  }
                }
              }
              {
                var tmp$2 = this.get__provided().values().iterator();
                while (tmp$2.hasNext()) {
                  var subElement_1 = tmp$2.next();
                  var foundedElement_1 = similarObjCasted.findProvidedByID(subElement_1.get_name());
                  if (foundedElement_1 == null || !Kotlin.equals(foundedElement_1, subElement_1)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ComponentType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ComponentTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_factoryBean(), similarObjCasted.get_factoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_bean(), similarObjCasted.get_bean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_nature(), similarObjCasted.get_nature())) {
                return false;
              }
              if (!Kotlin.equals(this.get_startMethod(), similarObjCasted.get_startMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_stopMethod(), similarObjCasted.get_stopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_updateMethod(), similarObjCasted.get_updateMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionaryType(), similarObjCasted.get_dictionaryType())) {
                return false;
              }
              if (this.get_required().size() !== similarObjCasted.get_required().size()) {
                return false;
              }
              if (this.get_integrationPatterns().size() !== similarObjCasted.get_integrationPatterns().size()) {
                return false;
              }
              if (!Kotlin.equals(this.get_extraFonctionalProperties(), similarObjCasted.get_extraFonctionalProperties())) {
                return false;
              }
              if (this.get_provided().size() !== similarObjCasted.get_provided().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__required().values());
              result.addAll(this.get__integrationPatterns().values());
              if (this.get_extraFonctionalProperties() != null) {
                var tmp$1;
                result.add((tmp$1 = this.get_extraFonctionalProperties()) != null ? tmp$1 : Kotlin.throwNPE());
              }
              result.addAll(this.get__provided().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__superTypes().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              {
                var tmp$2 = this.get__required().keySet().iterator();
                while (tmp$2.hasNext()) {
                  var KMFLoopEntryKey = tmp$2.next();
                  var tmp$3;
                  var KMFLoopEntry = (tmp$3 = this.get__required().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_required(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$4 = this.get__integrationPatterns().keySet().iterator();
                while (tmp$4.hasNext()) {
                  var KMFLoopEntryKey_0 = tmp$4.next();
                  var tmp$5;
                  var KMFLoopEntry_0 = (tmp$5 = this.get__integrationPatterns().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (this.get_extraFonctionalProperties() != null) {
                var tmp$6;
                visitor.visit((tmp$6 = this.get_extraFonctionalProperties()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$7;
                  ((tmp$7 = this.get_extraFonctionalProperties()) != null ? tmp$7 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              {
                var tmp$8 = this.get__provided().keySet().iterator();
                while (tmp$8.hasNext()) {
                  var KMFLoopEntryKey_1 = tmp$8.next();
                  var tmp$9;
                  var KMFLoopEntry_1 = (tmp$9 = this.get__provided().get(KMFLoopEntryKey_1)) != null ? tmp$9 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_1, _.org.kevoree.util.Constants.get_Ref_provided(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_1.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$10 = this.get__deployUnits().keySet().iterator();
                  while (tmp$10.hasNext()) {
                    var KMFLoopEntryKey_2 = tmp$10.next();
                    var tmp$11;
                    var KMFLoopEntry_2 = (tmp$11 = this.get__deployUnits().get(KMFLoopEntryKey_2)) != null ? tmp$11 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_2, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_2.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$12 = this.get__superTypes().keySet().iterator();
                  while (tmp$12.hasNext()) {
                    var KMFLoopEntryKey_3 = tmp$12.next();
                    var tmp$13;
                    var KMFLoopEntry_3 = (tmp$13 = this.get__superTypes().get(KMFLoopEntryKey_3)) != null ? tmp$13 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_3, _.org.kevoree.util.Constants.get_Ref_superTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_3.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.ComponentType';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ComponentType) || Kotlin.isType(similarObj, _.org.kevoree.impl.ComponentTypeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_factoryBean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_factoryBean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_bean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_bean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_nature();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_nature() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_startMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_startMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_stopMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_stopMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$11;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_updateMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_updateMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$12;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$13;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$14 = this.get__deployUnits().values().iterator();
                  while (tmp$14.hasNext()) {
                    var elem = tmp$14.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$15 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_deployUnits().iterator();
                    while (tmp$15.hasNext()) {
                      var elem_0 = tmp$15.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$16 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$16.hasNext()) {
                      var hashLoopRes = tmp$16.next();
                      var tmp$17, tmp$18;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), hashLoopRes, ((tmp$18 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$18 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$19 = this.get__superTypes().values().iterator();
                  while (tmp$19.hasNext()) {
                    var elem_1 = tmp$19.next();
                    var elemPath_1 = elem_1.path();
                    if (elemPath_1 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_1, elem_1);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$20 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_superTypes().iterator();
                    while (tmp$20.hasNext()) {
                      var elem_2 = tmp$20.next();
                      var elemPath_2 = elem_2.path();
                      if (elemPath_2 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_2)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$21 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$21.hasNext()) {
                      var hashLoopRes_0 = tmp$21.next();
                      var tmp$22, tmp$23;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$22 = this.path()) != null ? tmp$22 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), hashLoopRes_0, ((tmp$23 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_0)) != null ? tmp$23 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getNature: function () {
              return this.get_nature();
            },
            setNature: function (internal_p) {
              this.set_nature(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            },
            getRequired: function () {
              return this.get_required();
            },
            setRequired: function (internal_p) {
              this.set_required(internal_p);
            },
            getIntegrationPatterns: function () {
              return this.get_integrationPatterns();
            },
            setIntegrationPatterns: function (internal_p) {
              this.set_integrationPatterns(internal_p);
            },
            getExtraFonctionalProperties: function () {
              return this.get_extraFonctionalProperties();
            },
            setExtraFonctionalProperties: function (internal_p) {
              this.set_extraFonctionalProperties(internal_p);
            },
            getProvided: function () {
              return this.get_provided();
            },
            setProvided: function (internal_p) {
              this.set_provided(internal_p);
            }
          }),
          CompositeTypeImpl: Kotlin.createClass([classes.c8, classes.c7], /** @lends _.org.kevoree.impl.CompositeTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$nature = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_required = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllRequiredCurrentlyProcessing = false;
              this.$_integrationPatterns = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllIntegrationPatternsCurrentlyProcessing = false;
              this.$extraFonctionalProperties = null;
              this.$_provided = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllProvidedCurrentlyProcessing = false;
              this.$_childs = new Kotlin.PrimitiveHashMap(0);
              this.$_wires = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllWiresCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$3, tmp$6, tmp$7, tmp$8, tmp$9, tmp$10, tmp$11, tmp$12;
              (tmp$0 = this.get_dictionaryType()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = this.get__required().entrySet().iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              {
                var tmp$2 = this.get__integrationPatterns().entrySet().iterator();
                while (tmp$2.hasNext()) {
                  var el_0 = tmp$2.next();
                  _.kotlin.get_value(el_0).delete();
                }
              }
              (tmp$3 = this.get_extraFonctionalProperties()) != null ? tmp$3.delete() : null;
              {
                var tmp$4 = this.get__provided().entrySet().iterator();
                while (tmp$4.hasNext()) {
                  var el_1 = tmp$4.next();
                  _.kotlin.get_value(el_1).delete();
                }
              }
              {
                var tmp$5 = this.get__wires().entrySet().iterator();
                while (tmp$5.hasNext()) {
                  var el_2 = tmp$5.next();
                  _.kotlin.get_value(el_2).delete();
                }
              }
              (tmp$6 = this.get__deployUnits()) != null ? tmp$6.clear() : null;
              this.set_dictionaryType(null);
              (tmp$7 = this.get__superTypes()) != null ? tmp$7.clear() : null;
              (tmp$8 = this.get__required()) != null ? tmp$8.clear() : null;
              (tmp$9 = this.get__integrationPatterns()) != null ? tmp$9.clear() : null;
              this.set_extraFonctionalProperties(null);
              (tmp$10 = this.get__provided()) != null ? tmp$10.clear() : null;
              (tmp$11 = this.get__childs()) != null ? tmp$11.clear() : null;
              (tmp$12 = this.get__wires()) != null ? tmp$12.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$factoryBean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$bean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
            },
            get_nature: function () {
              return this.$nature;
            },
            set_nature: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$nature = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_nature(), this.get_nature()));
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$startMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$stopMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$updateMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.$dictionaryType = dictionaryTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList_2(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
            },
            get__required: function () {
              return this.$_required;
            },
            get_required: function () {
              return _.kotlin.toList_2(this.get__required().values());
            },
            set_required: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__required().values(), requiredP)) {
                this.get__required().clear();
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__required().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = requiredP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', elem), 'required');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
              }
            },
            addRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (requiredP != null ? requiredP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', requiredP), 'required');
              var _key_ = (requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__required().put(_key_, requiredP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
            },
            addAllRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = requiredP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__required().put(_key_, el);
                }
              }
              {
                var tmp$1 = requiredP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', el_0), 'required');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
            },
            get_removeAllRequiredCurrentlyProcessing: function () {
              return this.$removeAllRequiredCurrentlyProcessing;
            },
            set_removeAllRequiredCurrentlyProcessing: function (tmp$0) {
              this.$removeAllRequiredCurrentlyProcessing = tmp$0;
            },
            removeRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__required().size() !== 0 && this.get__required().containsKey((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__required().remove((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey());
                ((requiredP != null ? requiredP : Kotlin.throwNPE()) != null ? requiredP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllRequiredCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
                }
              }
            },
            removeAllRequired: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllRequiredCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_required()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__required().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), temp_els));
              this.set_removeAllRequiredCurrentlyProcessing(false);
            },
            get__integrationPatterns: function () {
              return this.$_integrationPatterns;
            },
            get_integrationPatterns: function () {
              return _.kotlin.toList_2(this.get__integrationPatterns().values());
            },
            set_integrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (integrationPatternsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__integrationPatterns().values(), integrationPatternsP)) {
                this.get__integrationPatterns().clear();
                {
                  var tmp$0 = integrationPatternsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__integrationPatterns().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = integrationPatternsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', elem), 'integrationPatterns');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
              }
            },
            addIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', integrationPatternsP), 'integrationPatterns');
              var _key_ = (integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__integrationPatterns().put(_key_, integrationPatternsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
            },
            addAllIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = integrationPatternsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__integrationPatterns().put(_key_, el);
                }
              }
              {
                var tmp$1 = integrationPatternsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', el_0), 'integrationPatterns');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
            },
            get_removeAllIntegrationPatternsCurrentlyProcessing: function () {
              return this.$removeAllIntegrationPatternsCurrentlyProcessing;
            },
            set_removeAllIntegrationPatternsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllIntegrationPatternsCurrentlyProcessing = tmp$0;
            },
            removeIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__integrationPatterns().remove((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey());
                ((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()) != null ? integrationPatternsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllIntegrationPatternsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
                }
              }
            },
            removeAllIntegrationPatterns: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllIntegrationPatternsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_integrationPatterns()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__integrationPatterns().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), temp_els));
              this.set_removeAllIntegrationPatternsCurrentlyProcessing(false);
            },
            get_extraFonctionalProperties: function () {
              return this.$extraFonctionalProperties;
            },
            set_extraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$extraFonctionalProperties, extraFonctionalPropertiesP)) {
                if (this.$extraFonctionalProperties != null) {
                  var tmp$0;
                  (((tmp$0 = this.$extraFonctionalProperties) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (extraFonctionalPropertiesP != null) {
                  (extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'extraFonctionalProperties', null), 'extraFonctionalProperties');
                }
                this.$extraFonctionalProperties = extraFonctionalPropertiesP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
              }
            },
            get__provided: function () {
              return this.$_provided;
            },
            get_provided: function () {
              return _.kotlin.toList_2(this.get__provided().values());
            },
            set_provided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (providedP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__provided().values(), providedP)) {
                this.get__provided().clear();
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__provided().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = providedP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', elem), 'provided');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
              }
            },
            addProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (providedP != null ? providedP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', providedP), 'provided');
              var _key_ = (providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__provided().put(_key_, providedP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
            },
            addAllProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = providedP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__provided().put(_key_, el);
                }
              }
              {
                var tmp$1 = providedP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', el_0), 'provided');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
            },
            get_removeAllProvidedCurrentlyProcessing: function () {
              return this.$removeAllProvidedCurrentlyProcessing;
            },
            set_removeAllProvidedCurrentlyProcessing: function (tmp$0) {
              this.$removeAllProvidedCurrentlyProcessing = tmp$0;
            },
            removeProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__provided().size() !== 0 && this.get__provided().containsKey((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__provided().remove((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey());
                ((providedP != null ? providedP : Kotlin.throwNPE()) != null ? providedP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllProvidedCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
                }
              }
            },
            removeAllProvided: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllProvidedCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_provided()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__provided().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), temp_els));
              this.set_removeAllProvidedCurrentlyProcessing(false);
            },
            get__childs: function () {
              return this.$_childs;
            },
            get_childs: function () {
              return _.kotlin.toList_2(this.get__childs().values());
            },
            set_childs: function (childsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (childsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__childs().values(), childsP)) {
                this.get__childs().clear();
                {
                  var tmp$0 = childsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__childs().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
              }
            },
            addChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__childs().put(_key_, childsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
            },
            addAllChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = childsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__childs().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
            },
            removeChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__childs().size() !== 0 && this.get__childs().containsKey((childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__childs().remove((childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
              }
            },
            removeAllChilds: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_childs()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__childs().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_childs(), temp_els));
            },
            get__wires: function () {
              return this.$_wires;
            },
            get_wires: function () {
              return _.kotlin.toList_2(this.get__wires().values());
            },
            set_wires: function (wiresP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (wiresP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__wires().values(), wiresP)) {
                this.get__wires().clear();
                {
                  var tmp$0 = wiresP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__wires().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = wiresP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'wires', elem), 'wires');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_wires(), wiresP));
              }
            },
            addWires: function (wiresP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (wiresP != null ? wiresP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'wires', wiresP), 'wires');
              var _key_ = (wiresP != null ? wiresP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__wires().put(_key_, wiresP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_wires(), wiresP));
            },
            addAllWires: function (wiresP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = wiresP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__wires().put(_key_, el);
                }
              }
              {
                var tmp$1 = wiresP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'wires', el_0), 'wires');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_wires(), wiresP));
            },
            get_removeAllWiresCurrentlyProcessing: function () {
              return this.$removeAllWiresCurrentlyProcessing;
            },
            set_removeAllWiresCurrentlyProcessing: function (tmp$0) {
              this.$removeAllWiresCurrentlyProcessing = tmp$0;
            },
            removeWires: function (wiresP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__wires().size() !== 0 && this.get__wires().containsKey((wiresP != null ? wiresP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__wires().remove((wiresP != null ? wiresP : Kotlin.throwNPE()).internalGetKey());
                ((wiresP != null ? wiresP : Kotlin.throwNPE()) != null ? wiresP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllWiresCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_wires(), wiresP));
                }
              }
            },
            removeAllWires: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllWiresCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_wires()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__wires().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_wires(), temp_els));
              this.set_removeAllWiresCurrentlyProcessing(false);
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createCompositeType();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_factoryBean(this.get_factoryBean());
              selfObjectClone.set_bean(this.get_bean());
              selfObjectClone.set_nature(this.get_nature());
              selfObjectClone.set_startMethod(this.get_startMethod());
              selfObjectClone.set_stopMethod(this.get_stopMethod());
              selfObjectClone.set_updateMethod(this.get_updateMethod());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubsubdictionaryType != null) {
                (subsubsubsubdictionaryType != null ? subsubsubsubdictionaryType : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.get_required().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$1 = this.get_integrationPatterns().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              var subsubsubsubextraFonctionalProperties = this.get_extraFonctionalProperties();
              if (subsubsubsubextraFonctionalProperties != null) {
                (subsubsubsubextraFonctionalProperties != null ? subsubsubsubextraFonctionalProperties : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$2 = this.get_provided().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  (sub_1 != null ? sub_1 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$3 = this.get_wires().iterator();
                while (tmp$3.hasNext()) {
                  var sub_2 = tmp$3.next();
                  (sub_2 != null ? sub_2 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_deployUnits().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained deployUnits from CompositeType : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_dictionaryType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_dictionaryType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_dictionaryType((tmp$3 = this.get_dictionaryType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionaryType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionaryType from CompositeType : ' + this.get_dictionaryType());
                  }
                  clonedSelfObject.set_dictionaryType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_superTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Error('Non contained superTypes from CompositeType : ' + this.get_superTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$5 = this.get_required().iterator();
                while (tmp$5.hasNext()) {
                  var sub_1 = tmp$5.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addRequired(sub_1);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_1);
                    if (interObj_2 == null) {
                      throw new Error('Non contained required from CompositeType : ' + this.get_required());
                    }
                    clonedSelfObject.addRequired(interObj_2 != null ? interObj_2 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$6 = this.get_integrationPatterns().iterator();
                while (tmp$6.hasNext()) {
                  var sub_2 = tmp$6.next();
                  if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                    clonedSelfObject.addIntegrationPatterns(sub_2);
                  }
                   else {
                    var interObj_3 = addrs.get(sub_2);
                    if (interObj_3 == null) {
                      throw new Error('Non contained integrationPatterns from CompositeType : ' + this.get_integrationPatterns());
                    }
                    clonedSelfObject.addIntegrationPatterns(interObj_3 != null ? interObj_3 : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_extraFonctionalProperties() != null) {
                var tmp$7;
                if (mutableOnly && ((tmp$7 = this.get_extraFonctionalProperties()) != null ? tmp$7 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$8;
                  clonedSelfObject.set_extraFonctionalProperties((tmp$8 = this.get_extraFonctionalProperties()) != null ? tmp$8 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_4 = addrs.get(this.get_extraFonctionalProperties());
                  if (interObj_4 == null) {
                    throw new Error('Non contained extraFonctionalProperties from CompositeType : ' + this.get_extraFonctionalProperties());
                  }
                  clonedSelfObject.set_extraFonctionalProperties(interObj_4 != null ? interObj_4 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$9 = this.get_provided().iterator();
                while (tmp$9.hasNext()) {
                  var sub_3 = tmp$9.next();
                  if (mutableOnly && sub_3.isRecursiveReadOnly()) {
                    clonedSelfObject.addProvided(sub_3);
                  }
                   else {
                    var interObj_5 = addrs.get(sub_3);
                    if (interObj_5 == null) {
                      throw new Error('Non contained provided from CompositeType : ' + this.get_provided());
                    }
                    clonedSelfObject.addProvided(interObj_5 != null ? interObj_5 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$10 = this.get_childs().iterator();
                while (tmp$10.hasNext()) {
                  var sub_4 = tmp$10.next();
                  if (mutableOnly && sub_4.isRecursiveReadOnly()) {
                    clonedSelfObject.addChilds(sub_4);
                  }
                   else {
                    var interObj_6 = addrs.get(sub_4);
                    if (interObj_6 == null) {
                      throw new Error('Non contained childs from CompositeType : ' + this.get_childs());
                    }
                    clonedSelfObject.addChilds(interObj_6 != null ? interObj_6 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$11 = this.get_wires().iterator();
                while (tmp$11.hasNext()) {
                  var sub_5 = tmp$11.next();
                  if (mutableOnly && sub_5.isRecursiveReadOnly()) {
                    clonedSelfObject.addWires(sub_5);
                  }
                   else {
                    var interObj_7 = addrs.get(sub_5);
                    if (interObj_7 == null) {
                      throw new Error('Non contained wires from CompositeType : ' + this.get_wires());
                    }
                    clonedSelfObject.addWires(interObj_7 != null ? interObj_7 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubdictionaryType != null) {
                (subsubsubdictionaryType != null ? subsubsubdictionaryType : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$12 = this.get_required().iterator();
                while (tmp$12.hasNext()) {
                  var sub_6 = tmp$12.next();
                  (sub_6 != null ? sub_6 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$13 = this.get_integrationPatterns().iterator();
                while (tmp$13.hasNext()) {
                  var sub_7 = tmp$13.next();
                  (sub_7 != null ? sub_7 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              var subsubsubextraFonctionalProperties = this.get_extraFonctionalProperties();
              if (subsubsubextraFonctionalProperties != null) {
                (subsubsubextraFonctionalProperties != null ? subsubsubextraFonctionalProperties : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$14 = this.get_provided().iterator();
                while (tmp$14.hasNext()) {
                  var sub_8 = tmp$14.next();
                  (sub_8 != null ? sub_8 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$15 = this.get_wires().iterator();
                while (tmp$15.hasNext()) {
                  var sub_9 = tmp$15.next();
                  (sub_9 != null ? sub_9 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_factoryBean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_bean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_nature()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_nature(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_startMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_stopMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_updateMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().put(objNewKey, obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionaryType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().put(objNewKey_0, obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_required()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addRequired(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllRequired(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeRequired(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequired();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__required().size() !== 0 && this.get__required().containsKey(value)) {
                    var obj_1 = this.get__required().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__required().put(objNewKey_1, obj_1);
                    this.get__required().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addIntegrationPatterns(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllIntegrationPatterns(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeIntegrationPatterns(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllIntegrationPatterns();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey(value)) {
                    var obj_2 = this.get__integrationPatterns().get(value);
                    var objNewKey_2 = (obj_2 != null ? obj_2 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_2 == null) {
                      throw new Error('Key newed to null ' + obj_2);
                    }
                    this.get__integrationPatterns().put(objNewKey_2, obj_2);
                    this.get__integrationPatterns().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_extraFonctionalProperties(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_extraFonctionalProperties(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_extraFonctionalProperties(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addProvided(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllProvided(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeProvided(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllProvided();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__provided().size() !== 0 && this.get__provided().containsKey(value)) {
                    var obj_3 = this.get__provided().get(value);
                    var objNewKey_3 = (obj_3 != null ? obj_3 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_3 == null) {
                      throw new Error('Key newed to null ' + obj_3);
                    }
                    this.get__provided().put(objNewKey_3, obj_3);
                    this.get__provided().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addChilds(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllChilds(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeChilds(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllChilds();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__childs().size() !== 0 && this.get__childs().containsKey(value)) {
                    var obj_4 = this.get__childs().get(value);
                    var objNewKey_4 = (obj_4 != null ? obj_4 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_4 == null) {
                      throw new Error('Key newed to null ' + obj_4);
                    }
                    this.get__childs().put(objNewKey_4, obj_4);
                    this.get__childs().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_wires()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addWires(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllWires(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeWires(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllWires();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__wires().size() !== 0 && this.get__wires().containsKey(value)) {
                    var obj_5 = this.get__wires().get(value);
                    var objNewKey_5 = (obj_5 != null ? obj_5 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_5 == null) {
                      throw new Error('Key newed to null ' + obj_5);
                    }
                    this.get__wires().put(objNewKey_5, obj_5);
                    this.get__wires().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findRequiredByID: function (key) {
              return this.get__required().get(key);
            },
            findIntegrationPatternsByID: function (key) {
              return this.get__integrationPatterns().get(key);
            },
            findProvidedByID: function (key) {
              return this.get__provided().get(key);
            },
            findChildsByID: function (key) {
              return this.get__childs().get(key);
            },
            findWiresByID: function (key) {
              return this.get__wires().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_dictionaryType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_required()) {
                var objFound_1 = this.findRequiredByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                var objFound_2 = this.findIntegrationPatternsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_2 != null) {
                  tmp$0 = objFound_2.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_2;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.get_extraFonctionalProperties();
                  tmp$0 = obj_0 != null ? obj_0.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_extraFonctionalProperties();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                var objFound_3 = this.findProvidedByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_3 != null) {
                  tmp$0 = objFound_3.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_3;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                var objFound_4 = this.findChildsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_4 != null) {
                  tmp$0 = objFound_4.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_4;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_wires()) {
                var objFound_5 = this.findWiresByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_5 != null) {
                  tmp$0 = objFound_5.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_5;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__required().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findRequiredByID(subElement.get_name());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              {
                var tmp$1 = this.get__integrationPatterns().values().iterator();
                while (tmp$1.hasNext()) {
                  var subElement_0 = tmp$1.next();
                  var foundedElement_0 = similarObjCasted.findIntegrationPatternsByID(subElement_0.get_name());
                  if (foundedElement_0 == null || !Kotlin.equals(foundedElement_0, subElement_0)) {
                    return false;
                  }
                }
              }
              {
                var tmp$2 = this.get__provided().values().iterator();
                while (tmp$2.hasNext()) {
                  var subElement_1 = tmp$2.next();
                  var foundedElement_1 = similarObjCasted.findProvidedByID(subElement_1.get_name());
                  if (foundedElement_1 == null || !Kotlin.equals(foundedElement_1, subElement_1)) {
                    return false;
                  }
                }
              }
              {
                var tmp$3 = this.get__wires().values().iterator();
                while (tmp$3.hasNext()) {
                  var subElement_2 = tmp$3.next();
                  var foundedElement_2 = similarObjCasted.findWiresByID(subElement_2.get_generated_KMF_ID());
                  if (foundedElement_2 == null || !Kotlin.equals(foundedElement_2, subElement_2)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.CompositeType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.CompositeTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_factoryBean(), similarObjCasted.get_factoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_bean(), similarObjCasted.get_bean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_nature(), similarObjCasted.get_nature())) {
                return false;
              }
              if (!Kotlin.equals(this.get_startMethod(), similarObjCasted.get_startMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_stopMethod(), similarObjCasted.get_stopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_updateMethod(), similarObjCasted.get_updateMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionaryType(), similarObjCasted.get_dictionaryType())) {
                return false;
              }
              if (this.get_required().size() !== similarObjCasted.get_required().size()) {
                return false;
              }
              if (this.get_integrationPatterns().size() !== similarObjCasted.get_integrationPatterns().size()) {
                return false;
              }
              if (!Kotlin.equals(this.get_extraFonctionalProperties(), similarObjCasted.get_extraFonctionalProperties())) {
                return false;
              }
              if (this.get_provided().size() !== similarObjCasted.get_provided().size()) {
                return false;
              }
              if (this.get_wires().size() !== similarObjCasted.get_wires().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__required().values());
              result.addAll(this.get__integrationPatterns().values());
              if (this.get_extraFonctionalProperties() != null) {
                var tmp$1;
                result.add((tmp$1 = this.get_extraFonctionalProperties()) != null ? tmp$1 : Kotlin.throwNPE());
              }
              result.addAll(this.get__provided().values());
              result.addAll(this.get__wires().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__superTypes().values());
              result.addAll(this.get__childs().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              {
                var tmp$2 = this.get__required().keySet().iterator();
                while (tmp$2.hasNext()) {
                  var KMFLoopEntryKey = tmp$2.next();
                  var tmp$3;
                  var KMFLoopEntry = (tmp$3 = this.get__required().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_required(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$4 = this.get__integrationPatterns().keySet().iterator();
                while (tmp$4.hasNext()) {
                  var KMFLoopEntryKey_0 = tmp$4.next();
                  var tmp$5;
                  var KMFLoopEntry_0 = (tmp$5 = this.get__integrationPatterns().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (this.get_extraFonctionalProperties() != null) {
                var tmp$6;
                visitor.visit((tmp$6 = this.get_extraFonctionalProperties()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$7;
                  ((tmp$7 = this.get_extraFonctionalProperties()) != null ? tmp$7 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              {
                var tmp$8 = this.get__provided().keySet().iterator();
                while (tmp$8.hasNext()) {
                  var KMFLoopEntryKey_1 = tmp$8.next();
                  var tmp$9;
                  var KMFLoopEntry_1 = (tmp$9 = this.get__provided().get(KMFLoopEntryKey_1)) != null ? tmp$9 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_1, _.org.kevoree.util.Constants.get_Ref_provided(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_1.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$10 = this.get__wires().keySet().iterator();
                while (tmp$10.hasNext()) {
                  var KMFLoopEntryKey_2 = tmp$10.next();
                  var tmp$11;
                  var KMFLoopEntry_2 = (tmp$11 = this.get__wires().get(KMFLoopEntryKey_2)) != null ? tmp$11 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_2, _.org.kevoree.util.Constants.get_Ref_wires(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_2.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$12 = this.get__deployUnits().keySet().iterator();
                  while (tmp$12.hasNext()) {
                    var KMFLoopEntryKey_3 = tmp$12.next();
                    var tmp$13;
                    var KMFLoopEntry_3 = (tmp$13 = this.get__deployUnits().get(KMFLoopEntryKey_3)) != null ? tmp$13 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_3, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_3.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$14 = this.get__superTypes().keySet().iterator();
                  while (tmp$14.hasNext()) {
                    var KMFLoopEntryKey_4 = tmp$14.next();
                    var tmp$15;
                    var KMFLoopEntry_4 = (tmp$15 = this.get__superTypes().get(KMFLoopEntryKey_4)) != null ? tmp$15 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_4, _.org.kevoree.util.Constants.get_Ref_superTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_4.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$16 = this.get__childs().keySet().iterator();
                  while (tmp$16.hasNext()) {
                    var KMFLoopEntryKey_5 = tmp$16.next();
                    var tmp$17;
                    var KMFLoopEntry_5 = (tmp$17 = this.get__childs().get(KMFLoopEntryKey_5)) != null ? tmp$17 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_5, _.org.kevoree.util.Constants.get_Ref_childs(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_5.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.CompositeType';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.CompositeType) || Kotlin.isType(similarObj, _.org.kevoree.impl.CompositeTypeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_factoryBean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_factoryBean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_bean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_bean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_nature();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_nature() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_startMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_startMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_stopMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_stopMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$11;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_updateMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_updateMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$12;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$13;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$14 = this.get__deployUnits().values().iterator();
                  while (tmp$14.hasNext()) {
                    var elem = tmp$14.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$15 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_deployUnits().iterator();
                    while (tmp$15.hasNext()) {
                      var elem_0 = tmp$15.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$16 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$16.hasNext()) {
                      var hashLoopRes = tmp$16.next();
                      var tmp$17, tmp$18;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), hashLoopRes, ((tmp$18 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$18 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$19 = this.get__superTypes().values().iterator();
                  while (tmp$19.hasNext()) {
                    var elem_1 = tmp$19.next();
                    var elemPath_1 = elem_1.path();
                    if (elemPath_1 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_1, elem_1);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$20 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_superTypes().iterator();
                    while (tmp$20.hasNext()) {
                      var elem_2 = tmp$20.next();
                      var elemPath_2 = elem_2.path();
                      if (elemPath_2 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_2)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$21 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$21.hasNext()) {
                      var hashLoopRes_0 = tmp$21.next();
                      var tmp$22, tmp$23;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$22 = this.path()) != null ? tmp$22 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), hashLoopRes_0, ((tmp$23 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_0)) != null ? tmp$23 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$24 = this.get__childs().values().iterator();
                  while (tmp$24.hasNext()) {
                    var elem_3 = tmp$24.next();
                    var elemPath_3 = elem_3.path();
                    if (elemPath_3 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_3, elem_3);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$25 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_childs().iterator();
                    while (tmp$25.hasNext()) {
                      var elem_4 = tmp$25.next();
                      var elemPath_4 = elem_4.path();
                      if (elemPath_4 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_4)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_4, elem_4);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_4, elem_4);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$26 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$26.hasNext()) {
                      var hashLoopRes_1 = tmp$26.next();
                      var tmp$27, tmp$28;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$27 = this.path()) != null ? tmp$27 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_childs(), hashLoopRes_1, ((tmp$28 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_1)) != null ? tmp$28 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getNature: function () {
              return this.get_nature();
            },
            setNature: function (internal_p) {
              this.set_nature(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            },
            getRequired: function () {
              return this.get_required();
            },
            setRequired: function (internal_p) {
              this.set_required(internal_p);
            },
            getIntegrationPatterns: function () {
              return this.get_integrationPatterns();
            },
            setIntegrationPatterns: function (internal_p) {
              this.set_integrationPatterns(internal_p);
            },
            getExtraFonctionalProperties: function () {
              return this.get_extraFonctionalProperties();
            },
            setExtraFonctionalProperties: function (internal_p) {
              this.set_extraFonctionalProperties(internal_p);
            },
            getProvided: function () {
              return this.get_provided();
            },
            setProvided: function (internal_p) {
              this.set_provided(internal_p);
            },
            getChilds: function () {
              return this.get_childs();
            },
            setChilds: function (internal_p) {
              this.set_childs(internal_p);
            },
            getWires: function () {
              return this.get_wires();
            },
            setWires: function (internal_p) {
              this.set_wires(internal_p);
            }
          }),
          ContainerNodeImpl: Kotlin.createClass([classes.c8, classes.c9], /** @lends _.org.kevoree.impl.ContainerNodeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$metaData = null;
              this.$typeDefinition = null;
              this.$dictionary = null;
              this.$_components = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllComponentsCurrentlyProcessing = false;
              this.$_hosts = new Kotlin.PrimitiveHashMap(0);
              this.$host = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$2, tmp$3;
              (tmp$0 = this.get_dictionary()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = this.get__components().entrySet().iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              this.set_typeDefinition(null);
              this.set_dictionary(null);
              (tmp$2 = this.get__components()) != null ? tmp$2.clear() : null;
              (tmp$3 = this.get__hosts()) != null ? tmp$3.clear() : null;
              this.set_host(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_metaData: function () {
              return this.$metaData;
            },
            set_metaData: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$metaData = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_metaData(), this.get_metaData()));
            },
            get_typeDefinition: function () {
              return this.$typeDefinition;
            },
            set_typeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$typeDefinition, typeDefinitionP)) {
                this.$typeDefinition = typeDefinitionP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), typeDefinitionP));
              }
            },
            get_dictionary: function () {
              return this.$dictionary;
            },
            set_dictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionary, dictionaryP)) {
                if (this.$dictionary != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionary) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionary', null), 'dictionary');
                }
                this.$dictionary = dictionaryP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionary(), dictionaryP));
              }
            },
            get__components: function () {
              return this.$_components;
            },
            get_components: function () {
              return _.kotlin.toList_2(this.get__components().values());
            },
            set_components: function (componentsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (componentsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__components().values(), componentsP)) {
                this.get__components().clear();
                {
                  var tmp$0 = componentsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__components().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = componentsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'components', elem), 'components');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_components(), componentsP));
              }
            },
            addComponents: function (componentsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (componentsP != null ? componentsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'components', componentsP), 'components');
              var _key_ = (componentsP != null ? componentsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__components().put(_key_, componentsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_components(), componentsP));
            },
            addAllComponents: function (componentsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = componentsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__components().put(_key_, el);
                }
              }
              {
                var tmp$1 = componentsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'components', el_0), 'components');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_components(), componentsP));
            },
            get_removeAllComponentsCurrentlyProcessing: function () {
              return this.$removeAllComponentsCurrentlyProcessing;
            },
            set_removeAllComponentsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllComponentsCurrentlyProcessing = tmp$0;
            },
            removeComponents: function (componentsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__components().size() !== 0 && this.get__components().containsKey((componentsP != null ? componentsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__components().remove((componentsP != null ? componentsP : Kotlin.throwNPE()).internalGetKey());
                ((componentsP != null ? componentsP : Kotlin.throwNPE()) != null ? componentsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllComponentsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_components(), componentsP));
                }
              }
            },
            removeAllComponents: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllComponentsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_components()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__components().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_components(), temp_els));
              this.set_removeAllComponentsCurrentlyProcessing(false);
            },
            get__hosts: function () {
              return this.$_hosts;
            },
            get_hosts: function () {
              return _.kotlin.toList_2(this.get__hosts().values());
            },
            set_hosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (hostsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__hosts().values(), hostsP)) {
                this.get__hosts().clear();
                {
                  var tmp$0 = hostsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__hosts().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = hostsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).noOpposite_host(this);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
              }
            },
            addHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__hosts().put(_key_, hostsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
              (hostsP != null ? hostsP : Kotlin.throwNPE()).noOpposite_host(this);
            },
            addAllHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = hostsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__hosts().put(_key_, el);
                }
              }
              {
                var tmp$1 = hostsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).noOpposite_host(this);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
            },
            noOpposite_addHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__hosts().put(_key_, hostsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
            },
            noOpposite_addAllHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = hostsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__hosts().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
            },
            removeHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__hosts().size() !== 0 && this.get__hosts().containsKey((hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__hosts().remove((hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
                (hostsP != null ? hostsP : Kotlin.throwNPE()).noOpposite_host(null);
              }
            },
            removeAllHosts: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_hosts()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).noOpposite_host(null);
                }
              }
              this.get__hosts().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), temp_els));
            },
            noOpposite_removeHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__hosts().size() !== 0 && this.get__hosts().containsKey((hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__hosts().remove((hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
              }
            },
            noOpposite_removeAllHosts: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_hosts()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__hosts().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), temp_els));
            },
            get_host: function () {
              return this.$host;
            },
            set_host: function (hostP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$host, hostP)) {
                if (this.$host != null) {
                  var tmp$0;
                  (((tmp$0 = this.$host) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).noOpposite_removeHosts(this);
                }
                if (hostP != null) {
                  (hostP != null ? hostP : Kotlin.throwNPE()).noOpposite_addHosts(this);
                }
                this.$host = hostP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_host(), hostP));
              }
            },
            noOpposite_host: function (hostP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$host, hostP)) {
                this.$host = hostP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_host(), hostP));
              }
               else {
                if (this.get_host() != null) {
                  var tmp$0;
                  (((tmp$0 = this.get_host()) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).noOpposite_removeHosts(this);
                }
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createContainerNode();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_metaData(this.get_metaData());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionary = this.get_dictionary();
              if (subsubsubsubdictionary != null) {
                (subsubsubsubdictionary != null ? subsubsubsubdictionary : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.get_components().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (this.get_typeDefinition() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.get_typeDefinition()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.set_typeDefinition((tmp$2 = this.get_typeDefinition()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.get_typeDefinition());
                  if (interObj == null) {
                    throw new Error('Non contained typeDefinition from ContainerNode : ' + this.get_typeDefinition());
                  }
                  clonedSelfObject.set_typeDefinition(interObj != null ? interObj : Kotlin.throwNPE());
                }
              }
              if (this.get_dictionary() != null) {
                var tmp$3;
                if (mutableOnly && ((tmp$3 = this.get_dictionary()) != null ? tmp$3 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$4;
                  clonedSelfObject.set_dictionary((tmp$4 = this.get_dictionary()) != null ? tmp$4 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionary());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionary from ContainerNode : ' + this.get_dictionary());
                  }
                  clonedSelfObject.set_dictionary(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$5 = this.get_components().iterator();
                while (tmp$5.hasNext()) {
                  var sub = tmp$5.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addComponents(sub);
                  }
                   else {
                    var interObj_1 = addrs.get(sub);
                    if (interObj_1 == null) {
                      throw new Error('Non contained components from ContainerNode : ' + this.get_components());
                    }
                    clonedSelfObject.addComponents(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$6 = this.get_hosts().iterator();
                while (tmp$6.hasNext()) {
                  var sub_0 = tmp$6.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.noOpposite_addHosts(sub_0);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_0);
                    if (interObj_2 == null) {
                      throw new Error('Non contained hosts from ContainerNode : ' + this.get_hosts());
                    }
                    clonedSelfObject.noOpposite_addHosts(interObj_2 != null ? interObj_2 : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_host() != null) {
                var tmp$7;
                if (mutableOnly && ((tmp$7 = this.get_host()) != null ? tmp$7 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$8;
                  clonedSelfObject.noOpposite_host((tmp$8 = this.get_host()) != null ? tmp$8 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_3 = addrs.get(this.get_host());
                  if (interObj_3 == null) {
                    throw new Error('Non contained host from ContainerNode : ' + this.get_host());
                  }
                  clonedSelfObject.noOpposite_host(interObj_3 != null ? interObj_3 : Kotlin.throwNPE());
                }
              }
              var subsubsubdictionary = this.get_dictionary();
              if (subsubsubdictionary != null) {
                (subsubsubdictionary != null ? subsubsubdictionary : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$9 = this.get_components().iterator();
                while (tmp$9.hasNext()) {
                  var sub_1 = tmp$9.next();
                  (sub_1 != null ? sub_1 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_metaData(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_typeDefinition(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_typeDefinition(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_typeDefinition(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionary(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionary(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionary(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_components()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addComponents(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllComponents(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeComponents(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllComponents();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__components().size() !== 0 && this.get__components().containsKey(value)) {
                    var obj = this.get__components().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__components().put(objNewKey, obj);
                    this.get__components().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_hosts()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addHosts(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllHosts(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeHosts(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllHosts();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__hosts().size() !== 0 && this.get__hosts().containsKey(value)) {
                    var obj_0 = this.get__hosts().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__hosts().put(objNewKey_0, obj_0);
                    this.get__hosts().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_host()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_host(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_host(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_host(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findComponentsByID: function (key) {
              return this.get__components().get(key);
            },
            findHostsByID: function (key) {
              return this.get__hosts().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_typeDefinition();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_typeDefinition();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.get_dictionary();
                  tmp$0 = obj_0 != null ? obj_0.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionary();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_components()) {
                var objFound = this.findComponentsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_hosts()) {
                var objFound_0 = this.findHostsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_host()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_1 = this.get_host();
                  tmp$0 = obj_1 != null ? obj_1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_host();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__components().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findComponentsByID(subElement.get_name());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ContainerNode) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ContainerNodeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_metaData(), similarObjCasted.get_metaData())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionary(), similarObjCasted.get_dictionary())) {
                return false;
              }
              if (this.get_components().size() !== similarObjCasted.get_components().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionary() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionary()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__components().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_typeDefinition() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_typeDefinition()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__hosts().values());
              if (this.get_host() != null) {
                var tmp$1;
                result.add((tmp$1 = this.get_host()) != null ? tmp$1 : Kotlin.throwNPE());
              }
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionary() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionary()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionary(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionary()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              {
                var tmp$2 = this.get__components().keySet().iterator();
                while (tmp$2.hasNext()) {
                  var KMFLoopEntryKey = tmp$2.next();
                  var tmp$3;
                  var KMFLoopEntry = (tmp$3 = this.get__components().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_components(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                var tmp$4, tmp$8;
                visitor.visit((tmp$4 = this.get_typeDefinition()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$5;
                  ((tmp$5 = this.get_typeDefinition()) != null ? tmp$5 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
                {
                  var tmp$6 = this.get__hosts().keySet().iterator();
                  while (tmp$6.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$6.next();
                    var tmp$7;
                    var KMFLoopEntry_0 = (tmp$7 = this.get__hosts().get(KMFLoopEntryKey_0)) != null ? tmp$7 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_hosts(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                visitor.visit((tmp$8 = this.get_host()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_host(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$9;
                  ((tmp$9 = this.get_host()) != null ? tmp$9 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.ContainerNode';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ContainerNode) || Kotlin.isType(similarObj, _.org.kevoree.impl.ContainerNodeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_metaData();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_metaData() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$4, tmp$5, tmp$13, tmp$14;
                attVal = (tmp$4 = this.get_typeDefinition()) != null ? tmp$4.path() : null;
                attVal2 = null;
                attVal2 = (tmp$5 = similarObjCasted != null ? similarObjCasted.get_typeDefinition() : null) != null ? tmp$5.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$8 = this.get__hosts().values().iterator();
                  while (tmp$8.hasNext()) {
                    var elem = tmp$8.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$9 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_hosts().iterator();
                    while (tmp$9.hasNext()) {
                      var elem_0 = tmp$9.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$10 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$10.hasNext()) {
                      var hashLoopRes = tmp$10.next();
                      var tmp$11, tmp$12;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hashLoopRes, ((tmp$12 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$12 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                attVal = null;
                attVal = (tmp$13 = this.get_host()) != null ? tmp$13.path() : null;
                attVal2 = null;
                attVal2 = (tmp$14 = similarObjCasted != null ? similarObjCasted.get_host() : null) != null ? tmp$14.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$15;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$15 = this.path()) != null ? tmp$15 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_host(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$16;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_host(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getMetaData: function () {
              return this.get_metaData();
            },
            setMetaData: function (internal_p) {
              this.set_metaData(internal_p);
            },
            getTypeDefinition: function () {
              return this.get_typeDefinition();
            },
            setTypeDefinition: function (internal_p) {
              this.set_typeDefinition(internal_p);
            },
            getDictionary: function () {
              return this.get_dictionary();
            },
            setDictionary: function (internal_p) {
              this.set_dictionary(internal_p);
            },
            getComponents: function () {
              return this.get_components();
            },
            setComponents: function (internal_p) {
              this.set_components(internal_p);
            },
            getHosts: function () {
              return this.get_hosts();
            },
            setHosts: function (internal_p) {
              this.set_hosts(internal_p);
            },
            getHost: function () {
              return this.get_host();
            },
            setHost: function (internal_p) {
              this.set_host(internal_p);
            }
          }),
          ContainerRootImpl: Kotlin.createClass([classes.c8, classes.ca], /** @lends _.org.kevoree.impl.ContainerRootImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_nodes = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllNodesCurrentlyProcessing = false;
              this.$_typeDefinitions = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllTypeDefinitionsCurrentlyProcessing = false;
              this.$_repositories = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllRepositoriesCurrentlyProcessing = false;
              this.$_dataTypes = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllDataTypesCurrentlyProcessing = false;
              this.$_libraries = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllLibrariesCurrentlyProcessing = false;
              this.$_hubs = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllHubsCurrentlyProcessing = false;
              this.$_mBindings = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllMBindingsCurrentlyProcessing = false;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllDeployUnitsCurrentlyProcessing = false;
              this.$_nodeNetworks = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllNodeNetworksCurrentlyProcessing = false;
              this.$_groups = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllGroupsCurrentlyProcessing = false;
              this.$_adaptationPrimitiveTypes = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllAdaptationPrimitiveTypesCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              {
                var tmp$0 = this.get__nodes().entrySet().iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              {
                var tmp$1 = this.get__typeDefinitions().entrySet().iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  _.kotlin.get_value(el_0).delete();
                }
              }
              {
                var tmp$2 = this.get__repositories().entrySet().iterator();
                while (tmp$2.hasNext()) {
                  var el_1 = tmp$2.next();
                  _.kotlin.get_value(el_1).delete();
                }
              }
              {
                var tmp$3 = this.get__dataTypes().entrySet().iterator();
                while (tmp$3.hasNext()) {
                  var el_2 = tmp$3.next();
                  _.kotlin.get_value(el_2).delete();
                }
              }
              {
                var tmp$4 = this.get__libraries().entrySet().iterator();
                while (tmp$4.hasNext()) {
                  var el_3 = tmp$4.next();
                  _.kotlin.get_value(el_3).delete();
                }
              }
              {
                var tmp$5 = this.get__hubs().entrySet().iterator();
                while (tmp$5.hasNext()) {
                  var el_4 = tmp$5.next();
                  _.kotlin.get_value(el_4).delete();
                }
              }
              {
                var tmp$6 = this.get__mBindings().entrySet().iterator();
                while (tmp$6.hasNext()) {
                  var el_5 = tmp$6.next();
                  _.kotlin.get_value(el_5).delete();
                }
              }
              {
                var tmp$7 = this.get__deployUnits().entrySet().iterator();
                while (tmp$7.hasNext()) {
                  var el_6 = tmp$7.next();
                  _.kotlin.get_value(el_6).delete();
                }
              }
              {
                var tmp$8 = this.get__nodeNetworks().entrySet().iterator();
                while (tmp$8.hasNext()) {
                  var el_7 = tmp$8.next();
                  _.kotlin.get_value(el_7).delete();
                }
              }
              {
                var tmp$9 = this.get__groups().entrySet().iterator();
                while (tmp$9.hasNext()) {
                  var el_8 = tmp$9.next();
                  _.kotlin.get_value(el_8).delete();
                }
              }
              {
                var tmp$10 = this.get__adaptationPrimitiveTypes().entrySet().iterator();
                while (tmp$10.hasNext()) {
                  var el_9 = tmp$10.next();
                  _.kotlin.get_value(el_9).delete();
                }
              }
              var tmp$11, tmp$12, tmp$13, tmp$14, tmp$15, tmp$16, tmp$17, tmp$18, tmp$19, tmp$20, tmp$21;
              (tmp$11 = this.get__nodes()) != null ? tmp$11.clear() : null;
              (tmp$12 = this.get__typeDefinitions()) != null ? tmp$12.clear() : null;
              (tmp$13 = this.get__repositories()) != null ? tmp$13.clear() : null;
              (tmp$14 = this.get__dataTypes()) != null ? tmp$14.clear() : null;
              (tmp$15 = this.get__libraries()) != null ? tmp$15.clear() : null;
              (tmp$16 = this.get__hubs()) != null ? tmp$16.clear() : null;
              (tmp$17 = this.get__mBindings()) != null ? tmp$17.clear() : null;
              (tmp$18 = this.get__deployUnits()) != null ? tmp$18.clear() : null;
              (tmp$19 = this.get__nodeNetworks()) != null ? tmp$19.clear() : null;
              (tmp$20 = this.get__groups()) != null ? tmp$20.clear() : null;
              (tmp$21 = this.get__adaptationPrimitiveTypes()) != null ? tmp$21.clear() : null;
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get__nodes: function () {
              return this.$_nodes;
            },
            get_nodes: function () {
              return _.kotlin.toList_2(this.get__nodes().values());
            },
            set_nodes: function (nodesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (nodesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__nodes().values(), nodesP)) {
                this.get__nodes().clear();
                {
                  var tmp$0 = nodesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__nodes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = nodesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodes', elem), 'nodes');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodes(), nodesP));
              }
            },
            addNodes: function (nodesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (nodesP != null ? nodesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodes', nodesP), 'nodes');
              var _key_ = (nodesP != null ? nodesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__nodes().put(_key_, nodesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodes(), nodesP));
            },
            addAllNodes: function (nodesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = nodesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__nodes().put(_key_, el);
                }
              }
              {
                var tmp$1 = nodesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodes', el_0), 'nodes');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodes(), nodesP));
            },
            get_removeAllNodesCurrentlyProcessing: function () {
              return this.$removeAllNodesCurrentlyProcessing;
            },
            set_removeAllNodesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllNodesCurrentlyProcessing = tmp$0;
            },
            removeNodes: function (nodesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__nodes().size() !== 0 && this.get__nodes().containsKey((nodesP != null ? nodesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__nodes().remove((nodesP != null ? nodesP : Kotlin.throwNPE()).internalGetKey());
                ((nodesP != null ? nodesP : Kotlin.throwNPE()) != null ? nodesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllNodesCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodes(), nodesP));
                }
              }
            },
            removeAllNodes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllNodesCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_nodes()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__nodes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodes(), temp_els));
              this.set_removeAllNodesCurrentlyProcessing(false);
            },
            get__typeDefinitions: function () {
              return this.$_typeDefinitions;
            },
            get_typeDefinitions: function () {
              return _.kotlin.toList_2(this.get__typeDefinitions().values());
            },
            set_typeDefinitions: function (typeDefinitionsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (typeDefinitionsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__typeDefinitions().values(), typeDefinitionsP)) {
                this.get__typeDefinitions().clear();
                {
                  var tmp$0 = typeDefinitionsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__typeDefinitions().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = typeDefinitionsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'typeDefinitions', elem), 'typeDefinitions');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), typeDefinitionsP));
              }
            },
            addTypeDefinitions: function (typeDefinitionsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'typeDefinitions', typeDefinitionsP), 'typeDefinitions');
              var _key_ = (typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__typeDefinitions().put(_key_, typeDefinitionsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), typeDefinitionsP));
            },
            addAllTypeDefinitions: function (typeDefinitionsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = typeDefinitionsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__typeDefinitions().put(_key_, el);
                }
              }
              {
                var tmp$1 = typeDefinitionsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'typeDefinitions', el_0), 'typeDefinitions');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), typeDefinitionsP));
            },
            get_removeAllTypeDefinitionsCurrentlyProcessing: function () {
              return this.$removeAllTypeDefinitionsCurrentlyProcessing;
            },
            set_removeAllTypeDefinitionsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllTypeDefinitionsCurrentlyProcessing = tmp$0;
            },
            removeTypeDefinitions: function (typeDefinitionsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__typeDefinitions().size() !== 0 && this.get__typeDefinitions().containsKey((typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__typeDefinitions().remove((typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).internalGetKey());
                ((typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()) != null ? typeDefinitionsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllTypeDefinitionsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), typeDefinitionsP));
                }
              }
            },
            removeAllTypeDefinitions: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllTypeDefinitionsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_typeDefinitions()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__typeDefinitions().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), temp_els));
              this.set_removeAllTypeDefinitionsCurrentlyProcessing(false);
            },
            get__repositories: function () {
              return this.$_repositories;
            },
            get_repositories: function () {
              return _.kotlin.toList_2(this.get__repositories().values());
            },
            set_repositories: function (repositoriesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (repositoriesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__repositories().values(), repositoriesP)) {
                this.get__repositories().clear();
                {
                  var tmp$0 = repositoriesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__repositories().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = repositoriesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'repositories', elem), 'repositories');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_repositories(), repositoriesP));
              }
            },
            addRepositories: function (repositoriesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'repositories', repositoriesP), 'repositories');
              var _key_ = (repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__repositories().put(_key_, repositoriesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_repositories(), repositoriesP));
            },
            addAllRepositories: function (repositoriesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = repositoriesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__repositories().put(_key_, el);
                }
              }
              {
                var tmp$1 = repositoriesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'repositories', el_0), 'repositories');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_repositories(), repositoriesP));
            },
            get_removeAllRepositoriesCurrentlyProcessing: function () {
              return this.$removeAllRepositoriesCurrentlyProcessing;
            },
            set_removeAllRepositoriesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllRepositoriesCurrentlyProcessing = tmp$0;
            },
            removeRepositories: function (repositoriesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__repositories().size() !== 0 && this.get__repositories().containsKey((repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__repositories().remove((repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).internalGetKey());
                ((repositoriesP != null ? repositoriesP : Kotlin.throwNPE()) != null ? repositoriesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllRepositoriesCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_repositories(), repositoriesP));
                }
              }
            },
            removeAllRepositories: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllRepositoriesCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_repositories()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__repositories().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_repositories(), temp_els));
              this.set_removeAllRepositoriesCurrentlyProcessing(false);
            },
            get__dataTypes: function () {
              return this.$_dataTypes;
            },
            get_dataTypes: function () {
              return _.kotlin.toList_2(this.get__dataTypes().values());
            },
            set_dataTypes: function (dataTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (dataTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dataTypes().values(), dataTypesP)) {
                this.get__dataTypes().clear();
                {
                  var tmp$0 = dataTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__dataTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = dataTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'dataTypes', elem), 'dataTypes');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), dataTypesP));
              }
            },
            addDataTypes: function (dataTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'dataTypes', dataTypesP), 'dataTypes');
              var _key_ = (dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__dataTypes().put(_key_, dataTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), dataTypesP));
            },
            addAllDataTypes: function (dataTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = dataTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__dataTypes().put(_key_, el);
                }
              }
              {
                var tmp$1 = dataTypesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'dataTypes', el_0), 'dataTypes');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), dataTypesP));
            },
            get_removeAllDataTypesCurrentlyProcessing: function () {
              return this.$removeAllDataTypesCurrentlyProcessing;
            },
            set_removeAllDataTypesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllDataTypesCurrentlyProcessing = tmp$0;
            },
            removeDataTypes: function (dataTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__dataTypes().size() !== 0 && this.get__dataTypes().containsKey((dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__dataTypes().remove((dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).internalGetKey());
                ((dataTypesP != null ? dataTypesP : Kotlin.throwNPE()) != null ? dataTypesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllDataTypesCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), dataTypesP));
                }
              }
            },
            removeAllDataTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllDataTypesCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_dataTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__dataTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), temp_els));
              this.set_removeAllDataTypesCurrentlyProcessing(false);
            },
            get__libraries: function () {
              return this.$_libraries;
            },
            get_libraries: function () {
              return _.kotlin.toList_2(this.get__libraries().values());
            },
            set_libraries: function (librariesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (librariesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__libraries().values(), librariesP)) {
                this.get__libraries().clear();
                {
                  var tmp$0 = librariesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__libraries().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = librariesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'libraries', elem), 'libraries');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_libraries(), librariesP));
              }
            },
            addLibraries: function (librariesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (librariesP != null ? librariesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'libraries', librariesP), 'libraries');
              var _key_ = (librariesP != null ? librariesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__libraries().put(_key_, librariesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_libraries(), librariesP));
            },
            addAllLibraries: function (librariesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = librariesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__libraries().put(_key_, el);
                }
              }
              {
                var tmp$1 = librariesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'libraries', el_0), 'libraries');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_libraries(), librariesP));
            },
            get_removeAllLibrariesCurrentlyProcessing: function () {
              return this.$removeAllLibrariesCurrentlyProcessing;
            },
            set_removeAllLibrariesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllLibrariesCurrentlyProcessing = tmp$0;
            },
            removeLibraries: function (librariesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__libraries().size() !== 0 && this.get__libraries().containsKey((librariesP != null ? librariesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__libraries().remove((librariesP != null ? librariesP : Kotlin.throwNPE()).internalGetKey());
                ((librariesP != null ? librariesP : Kotlin.throwNPE()) != null ? librariesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllLibrariesCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_libraries(), librariesP));
                }
              }
            },
            removeAllLibraries: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllLibrariesCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_libraries()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__libraries().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_libraries(), temp_els));
              this.set_removeAllLibrariesCurrentlyProcessing(false);
            },
            get__hubs: function () {
              return this.$_hubs;
            },
            get_hubs: function () {
              return _.kotlin.toList_2(this.get__hubs().values());
            },
            set_hubs: function (hubsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (hubsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__hubs().values(), hubsP)) {
                this.get__hubs().clear();
                {
                  var tmp$0 = hubsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__hubs().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = hubsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'hubs', elem), 'hubs');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_hubs(), hubsP));
              }
            },
            addHubs: function (hubsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (hubsP != null ? hubsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'hubs', hubsP), 'hubs');
              var _key_ = (hubsP != null ? hubsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__hubs().put(_key_, hubsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_hubs(), hubsP));
            },
            addAllHubs: function (hubsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = hubsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__hubs().put(_key_, el);
                }
              }
              {
                var tmp$1 = hubsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'hubs', el_0), 'hubs');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_hubs(), hubsP));
            },
            get_removeAllHubsCurrentlyProcessing: function () {
              return this.$removeAllHubsCurrentlyProcessing;
            },
            set_removeAllHubsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllHubsCurrentlyProcessing = tmp$0;
            },
            removeHubs: function (hubsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__hubs().size() !== 0 && this.get__hubs().containsKey((hubsP != null ? hubsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__hubs().remove((hubsP != null ? hubsP : Kotlin.throwNPE()).internalGetKey());
                ((hubsP != null ? hubsP : Kotlin.throwNPE()) != null ? hubsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllHubsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_hubs(), hubsP));
                }
              }
            },
            removeAllHubs: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllHubsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_hubs()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__hubs().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_hubs(), temp_els));
              this.set_removeAllHubsCurrentlyProcessing(false);
            },
            get__mBindings: function () {
              return this.$_mBindings;
            },
            get_mBindings: function () {
              return _.kotlin.toList_2(this.get__mBindings().values());
            },
            set_mBindings: function (mBindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (mBindingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__mBindings().values(), mBindingsP)) {
                this.get__mBindings().clear();
                {
                  var tmp$0 = mBindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__mBindings().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = mBindingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mBindings', elem), 'mBindings');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mBindings(), mBindingsP));
              }
            },
            addMBindings: function (mBindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mBindings', mBindingsP), 'mBindings');
              var _key_ = (mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__mBindings().put(_key_, mBindingsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mBindings(), mBindingsP));
            },
            addAllMBindings: function (mBindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = mBindingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__mBindings().put(_key_, el);
                }
              }
              {
                var tmp$1 = mBindingsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mBindings', el_0), 'mBindings');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mBindings(), mBindingsP));
            },
            get_removeAllMBindingsCurrentlyProcessing: function () {
              return this.$removeAllMBindingsCurrentlyProcessing;
            },
            set_removeAllMBindingsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllMBindingsCurrentlyProcessing = tmp$0;
            },
            removeMBindings: function (mBindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__mBindings().size() !== 0 && this.get__mBindings().containsKey((mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__mBindings().remove((mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).internalGetKey());
                ((mBindingsP != null ? mBindingsP : Kotlin.throwNPE()) != null ? mBindingsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllMBindingsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mBindings(), mBindingsP));
                }
              }
            },
            removeAllMBindings: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllMBindingsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_mBindings()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__mBindings().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mBindings(), temp_els));
              this.set_removeAllMBindingsCurrentlyProcessing(false);
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = deployUnitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'deployUnits', elem), 'deployUnits');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'deployUnits', deployUnitsP), 'deployUnits');
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              {
                var tmp$1 = deployUnitsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'deployUnits', el_0), 'deployUnits');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            get_removeAllDeployUnitsCurrentlyProcessing: function () {
              return this.$removeAllDeployUnitsCurrentlyProcessing;
            },
            set_removeAllDeployUnitsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllDeployUnitsCurrentlyProcessing = tmp$0;
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                ((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()) != null ? deployUnitsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllDeployUnitsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllDeployUnitsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
              this.set_removeAllDeployUnitsCurrentlyProcessing(false);
            },
            get__nodeNetworks: function () {
              return this.$_nodeNetworks;
            },
            get_nodeNetworks: function () {
              return _.kotlin.toList_2(this.get__nodeNetworks().values());
            },
            set_nodeNetworks: function (nodeNetworksP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (nodeNetworksP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__nodeNetworks().values(), nodeNetworksP)) {
                this.get__nodeNetworks().clear();
                {
                  var tmp$0 = nodeNetworksP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__nodeNetworks().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = nodeNetworksP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodeNetworks', elem), 'nodeNetworks');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), nodeNetworksP));
              }
            },
            addNodeNetworks: function (nodeNetworksP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodeNetworks', nodeNetworksP), 'nodeNetworks');
              var _key_ = (nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__nodeNetworks().put(_key_, nodeNetworksP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), nodeNetworksP));
            },
            addAllNodeNetworks: function (nodeNetworksP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = nodeNetworksP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__nodeNetworks().put(_key_, el);
                }
              }
              {
                var tmp$1 = nodeNetworksP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodeNetworks', el_0), 'nodeNetworks');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), nodeNetworksP));
            },
            get_removeAllNodeNetworksCurrentlyProcessing: function () {
              return this.$removeAllNodeNetworksCurrentlyProcessing;
            },
            set_removeAllNodeNetworksCurrentlyProcessing: function (tmp$0) {
              this.$removeAllNodeNetworksCurrentlyProcessing = tmp$0;
            },
            removeNodeNetworks: function (nodeNetworksP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__nodeNetworks().size() !== 0 && this.get__nodeNetworks().containsKey((nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__nodeNetworks().remove((nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).internalGetKey());
                ((nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()) != null ? nodeNetworksP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllNodeNetworksCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), nodeNetworksP));
                }
              }
            },
            removeAllNodeNetworks: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllNodeNetworksCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_nodeNetworks()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__nodeNetworks().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), temp_els));
              this.set_removeAllNodeNetworksCurrentlyProcessing(false);
            },
            get__groups: function () {
              return this.$_groups;
            },
            get_groups: function () {
              return _.kotlin.toList_2(this.get__groups().values());
            },
            set_groups: function (groupsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (groupsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__groups().values(), groupsP)) {
                this.get__groups().clear();
                {
                  var tmp$0 = groupsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__groups().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = groupsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'groups', elem), 'groups');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_groups(), groupsP));
              }
            },
            addGroups: function (groupsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (groupsP != null ? groupsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'groups', groupsP), 'groups');
              var _key_ = (groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__groups().put(_key_, groupsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_groups(), groupsP));
            },
            addAllGroups: function (groupsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = groupsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__groups().put(_key_, el);
                }
              }
              {
                var tmp$1 = groupsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'groups', el_0), 'groups');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_groups(), groupsP));
            },
            get_removeAllGroupsCurrentlyProcessing: function () {
              return this.$removeAllGroupsCurrentlyProcessing;
            },
            set_removeAllGroupsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllGroupsCurrentlyProcessing = tmp$0;
            },
            removeGroups: function (groupsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__groups().size() !== 0 && this.get__groups().containsKey((groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__groups().remove((groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey());
                ((groupsP != null ? groupsP : Kotlin.throwNPE()) != null ? groupsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllGroupsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_groups(), groupsP));
                }
              }
            },
            removeAllGroups: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllGroupsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_groups()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__groups().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_groups(), temp_els));
              this.set_removeAllGroupsCurrentlyProcessing(false);
            },
            get__adaptationPrimitiveTypes: function () {
              return this.$_adaptationPrimitiveTypes;
            },
            get_adaptationPrimitiveTypes: function () {
              return _.kotlin.toList_2(this.get__adaptationPrimitiveTypes().values());
            },
            set_adaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (adaptationPrimitiveTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__adaptationPrimitiveTypes().values(), adaptationPrimitiveTypesP)) {
                this.get__adaptationPrimitiveTypes().clear();
                {
                  var tmp$0 = adaptationPrimitiveTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__adaptationPrimitiveTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = adaptationPrimitiveTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'adaptationPrimitiveTypes', elem), 'adaptationPrimitiveTypes');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), adaptationPrimitiveTypesP));
              }
            },
            addAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (adaptationPrimitiveTypesP != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'adaptationPrimitiveTypes', adaptationPrimitiveTypesP), 'adaptationPrimitiveTypes');
              var _key_ = (adaptationPrimitiveTypesP != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__adaptationPrimitiveTypes().put(_key_, adaptationPrimitiveTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), adaptationPrimitiveTypesP));
            },
            addAllAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = adaptationPrimitiveTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__adaptationPrimitiveTypes().put(_key_, el);
                }
              }
              {
                var tmp$1 = adaptationPrimitiveTypesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'adaptationPrimitiveTypes', el_0), 'adaptationPrimitiveTypes');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), adaptationPrimitiveTypesP));
            },
            get_removeAllAdaptationPrimitiveTypesCurrentlyProcessing: function () {
              return this.$removeAllAdaptationPrimitiveTypesCurrentlyProcessing;
            },
            set_removeAllAdaptationPrimitiveTypesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllAdaptationPrimitiveTypesCurrentlyProcessing = tmp$0;
            },
            removeAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__adaptationPrimitiveTypes().size() !== 0 && this.get__adaptationPrimitiveTypes().containsKey((adaptationPrimitiveTypesP != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__adaptationPrimitiveTypes().remove((adaptationPrimitiveTypesP != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey());
                ((adaptationPrimitiveTypesP != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()) != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllAdaptationPrimitiveTypesCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), adaptationPrimitiveTypesP));
                }
              }
            },
            removeAllAdaptationPrimitiveTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllAdaptationPrimitiveTypesCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_adaptationPrimitiveTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__adaptationPrimitiveTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), temp_els));
              this.set_removeAllAdaptationPrimitiveTypesCurrentlyProcessing(false);
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createContainerRoot();
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.get_nodes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$1 = this.get_typeDefinitions().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$2 = this.get_repositories().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  (sub_1 != null ? sub_1 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$3 = this.get_dataTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_2 = tmp$3.next();
                  (sub_2 != null ? sub_2 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$4 = this.get_libraries().iterator();
                while (tmp$4.hasNext()) {
                  var sub_3 = tmp$4.next();
                  (sub_3 != null ? sub_3 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$5 = this.get_hubs().iterator();
                while (tmp$5.hasNext()) {
                  var sub_4 = tmp$5.next();
                  (sub_4 != null ? sub_4 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$6 = this.get_mBindings().iterator();
                while (tmp$6.hasNext()) {
                  var sub_5 = tmp$6.next();
                  (sub_5 != null ? sub_5 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$7 = this.get_deployUnits().iterator();
                while (tmp$7.hasNext()) {
                  var sub_6 = tmp$7.next();
                  (sub_6 != null ? sub_6 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$8 = this.get_nodeNetworks().iterator();
                while (tmp$8.hasNext()) {
                  var sub_7 = tmp$8.next();
                  (sub_7 != null ? sub_7 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$9 = this.get_groups().iterator();
                while (tmp$9.hasNext()) {
                  var sub_8 = tmp$9.next();
                  (sub_8 != null ? sub_8 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$10 = this.get_adaptationPrimitiveTypes().iterator();
                while (tmp$10.hasNext()) {
                  var sub_9 = tmp$10.next();
                  (sub_9 != null ? sub_9 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_nodes().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addNodes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained nodes from ContainerRoot : ' + this.get_nodes());
                    }
                    clonedSelfObject.addNodes(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$2 = this.get_typeDefinitions().iterator();
                while (tmp$2.hasNext()) {
                  var sub_0 = tmp$2.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addTypeDefinitions(sub_0);
                  }
                   else {
                    var interObj_0 = addrs.get(sub_0);
                    if (interObj_0 == null) {
                      throw new Error('Non contained typeDefinitions from ContainerRoot : ' + this.get_typeDefinitions());
                    }
                    clonedSelfObject.addTypeDefinitions(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$3 = this.get_repositories().iterator();
                while (tmp$3.hasNext()) {
                  var sub_1 = tmp$3.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addRepositories(sub_1);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_1);
                    if (interObj_1 == null) {
                      throw new Error('Non contained repositories from ContainerRoot : ' + this.get_repositories());
                    }
                    clonedSelfObject.addRepositories(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$4 = this.get_dataTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_2 = tmp$4.next();
                  if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                    clonedSelfObject.addDataTypes(sub_2);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_2);
                    if (interObj_2 == null) {
                      throw new Error('Non contained dataTypes from ContainerRoot : ' + this.get_dataTypes());
                    }
                    clonedSelfObject.addDataTypes(interObj_2 != null ? interObj_2 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$5 = this.get_libraries().iterator();
                while (tmp$5.hasNext()) {
                  var sub_3 = tmp$5.next();
                  if (mutableOnly && sub_3.isRecursiveReadOnly()) {
                    clonedSelfObject.addLibraries(sub_3);
                  }
                   else {
                    var interObj_3 = addrs.get(sub_3);
                    if (interObj_3 == null) {
                      throw new Error('Non contained libraries from ContainerRoot : ' + this.get_libraries());
                    }
                    clonedSelfObject.addLibraries(interObj_3 != null ? interObj_3 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$6 = this.get_hubs().iterator();
                while (tmp$6.hasNext()) {
                  var sub_4 = tmp$6.next();
                  if (mutableOnly && sub_4.isRecursiveReadOnly()) {
                    clonedSelfObject.addHubs(sub_4);
                  }
                   else {
                    var interObj_4 = addrs.get(sub_4);
                    if (interObj_4 == null) {
                      throw new Error('Non contained hubs from ContainerRoot : ' + this.get_hubs());
                    }
                    clonedSelfObject.addHubs(interObj_4 != null ? interObj_4 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$7 = this.get_mBindings().iterator();
                while (tmp$7.hasNext()) {
                  var sub_5 = tmp$7.next();
                  if (mutableOnly && sub_5.isRecursiveReadOnly()) {
                    clonedSelfObject.addMBindings(sub_5);
                  }
                   else {
                    var interObj_5 = addrs.get(sub_5);
                    if (interObj_5 == null) {
                      throw new Error('Non contained mBindings from ContainerRoot : ' + this.get_mBindings());
                    }
                    clonedSelfObject.addMBindings(interObj_5 != null ? interObj_5 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$8 = this.get_deployUnits().iterator();
                while (tmp$8.hasNext()) {
                  var sub_6 = tmp$8.next();
                  if (mutableOnly && sub_6.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub_6);
                  }
                   else {
                    var interObj_6 = addrs.get(sub_6);
                    if (interObj_6 == null) {
                      throw new Error('Non contained deployUnits from ContainerRoot : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj_6 != null ? interObj_6 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$9 = this.get_nodeNetworks().iterator();
                while (tmp$9.hasNext()) {
                  var sub_7 = tmp$9.next();
                  if (mutableOnly && sub_7.isRecursiveReadOnly()) {
                    clonedSelfObject.addNodeNetworks(sub_7);
                  }
                   else {
                    var interObj_7 = addrs.get(sub_7);
                    if (interObj_7 == null) {
                      throw new Error('Non contained nodeNetworks from ContainerRoot : ' + this.get_nodeNetworks());
                    }
                    clonedSelfObject.addNodeNetworks(interObj_7 != null ? interObj_7 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$10 = this.get_groups().iterator();
                while (tmp$10.hasNext()) {
                  var sub_8 = tmp$10.next();
                  if (mutableOnly && sub_8.isRecursiveReadOnly()) {
                    clonedSelfObject.addGroups(sub_8);
                  }
                   else {
                    var interObj_8 = addrs.get(sub_8);
                    if (interObj_8 == null) {
                      throw new Error('Non contained groups from ContainerRoot : ' + this.get_groups());
                    }
                    clonedSelfObject.addGroups(interObj_8 != null ? interObj_8 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$11 = this.get_adaptationPrimitiveTypes().iterator();
                while (tmp$11.hasNext()) {
                  var sub_9 = tmp$11.next();
                  if (mutableOnly && sub_9.isRecursiveReadOnly()) {
                    clonedSelfObject.addAdaptationPrimitiveTypes(sub_9);
                  }
                   else {
                    var interObj_9 = addrs.get(sub_9);
                    if (interObj_9 == null) {
                      throw new Error('Non contained adaptationPrimitiveTypes from ContainerRoot : ' + this.get_adaptationPrimitiveTypes());
                    }
                    clonedSelfObject.addAdaptationPrimitiveTypes(interObj_9 != null ? interObj_9 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$12 = this.get_nodes().iterator();
                while (tmp$12.hasNext()) {
                  var sub_10 = tmp$12.next();
                  (sub_10 != null ? sub_10 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$13 = this.get_typeDefinitions().iterator();
                while (tmp$13.hasNext()) {
                  var sub_11 = tmp$13.next();
                  (sub_11 != null ? sub_11 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$14 = this.get_repositories().iterator();
                while (tmp$14.hasNext()) {
                  var sub_12 = tmp$14.next();
                  (sub_12 != null ? sub_12 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$15 = this.get_dataTypes().iterator();
                while (tmp$15.hasNext()) {
                  var sub_13 = tmp$15.next();
                  (sub_13 != null ? sub_13 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$16 = this.get_libraries().iterator();
                while (tmp$16.hasNext()) {
                  var sub_14 = tmp$16.next();
                  (sub_14 != null ? sub_14 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$17 = this.get_hubs().iterator();
                while (tmp$17.hasNext()) {
                  var sub_15 = tmp$17.next();
                  (sub_15 != null ? sub_15 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$18 = this.get_mBindings().iterator();
                while (tmp$18.hasNext()) {
                  var sub_16 = tmp$18.next();
                  (sub_16 != null ? sub_16 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$19 = this.get_deployUnits().iterator();
                while (tmp$19.hasNext()) {
                  var sub_17 = tmp$19.next();
                  (sub_17 != null ? sub_17 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$20 = this.get_nodeNetworks().iterator();
                while (tmp$20.hasNext()) {
                  var sub_18 = tmp$20.next();
                  (sub_18 != null ? sub_18 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$21 = this.get_groups().iterator();
                while (tmp$21.hasNext()) {
                  var sub_19 = tmp$21.next();
                  (sub_19 != null ? sub_19 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$22 = this.get_adaptationPrimitiveTypes().iterator();
                while (tmp$22.hasNext()) {
                  var sub_20 = tmp$22.next();
                  (sub_20 != null ? sub_20 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_nodes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addNodes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllNodes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeNodes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllNodes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__nodes().size() !== 0 && this.get__nodes().containsKey(value)) {
                    var obj = this.get__nodes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__nodes().put(objNewKey, obj);
                    this.get__nodes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinitions()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addTypeDefinitions(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllTypeDefinitions(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeTypeDefinitions(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllTypeDefinitions();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__typeDefinitions().size() !== 0 && this.get__typeDefinitions().containsKey(value)) {
                    var obj_0 = this.get__typeDefinitions().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__typeDefinitions().put(objNewKey_0, obj_0);
                    this.get__typeDefinitions().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_repositories()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addRepositories(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllRepositories(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeRepositories(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRepositories();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__repositories().size() !== 0 && this.get__repositories().containsKey(value)) {
                    var obj_1 = this.get__repositories().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__repositories().put(objNewKey_1, obj_1);
                    this.get__repositories().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dataTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDataTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDataTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDataTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDataTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__dataTypes().size() !== 0 && this.get__dataTypes().containsKey(value)) {
                    var obj_2 = this.get__dataTypes().get(value);
                    var objNewKey_2 = (obj_2 != null ? obj_2 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_2 == null) {
                      throw new Error('Key newed to null ' + obj_2);
                    }
                    this.get__dataTypes().put(objNewKey_2, obj_2);
                    this.get__dataTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_libraries()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addLibraries(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllLibraries(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeLibraries(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllLibraries();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__libraries().size() !== 0 && this.get__libraries().containsKey(value)) {
                    var obj_3 = this.get__libraries().get(value);
                    var objNewKey_3 = (obj_3 != null ? obj_3 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_3 == null) {
                      throw new Error('Key newed to null ' + obj_3);
                    }
                    this.get__libraries().put(objNewKey_3, obj_3);
                    this.get__libraries().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_hubs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addHubs(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllHubs(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeHubs(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllHubs();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__hubs().size() !== 0 && this.get__hubs().containsKey(value)) {
                    var obj_4 = this.get__hubs().get(value);
                    var objNewKey_4 = (obj_4 != null ? obj_4 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_4 == null) {
                      throw new Error('Key newed to null ' + obj_4);
                    }
                    this.get__hubs().put(objNewKey_4, obj_4);
                    this.get__hubs().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_mBindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addMBindings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllMBindings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeMBindings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllMBindings();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__mBindings().size() !== 0 && this.get__mBindings().containsKey(value)) {
                    var obj_5 = this.get__mBindings().get(value);
                    var objNewKey_5 = (obj_5 != null ? obj_5 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_5 == null) {
                      throw new Error('Key newed to null ' + obj_5);
                    }
                    this.get__mBindings().put(objNewKey_5, obj_5);
                    this.get__mBindings().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj_6 = this.get__deployUnits().get(value);
                    var objNewKey_6 = (obj_6 != null ? obj_6 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_6 == null) {
                      throw new Error('Key newed to null ' + obj_6);
                    }
                    this.get__deployUnits().put(objNewKey_6, obj_6);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_nodeNetworks()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addNodeNetworks(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllNodeNetworks(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeNodeNetworks(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllNodeNetworks();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__nodeNetworks().size() !== 0 && this.get__nodeNetworks().containsKey(value)) {
                    var obj_7 = this.get__nodeNetworks().get(value);
                    var objNewKey_7 = (obj_7 != null ? obj_7 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_7 == null) {
                      throw new Error('Key newed to null ' + obj_7);
                    }
                    this.get__nodeNetworks().put(objNewKey_7, obj_7);
                    this.get__nodeNetworks().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_groups()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addGroups(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllGroups(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeGroups(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllGroups();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__groups().size() !== 0 && this.get__groups().containsKey(value)) {
                    var obj_8 = this.get__groups().get(value);
                    var objNewKey_8 = (obj_8 != null ? obj_8 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_8 == null) {
                      throw new Error('Key newed to null ' + obj_8);
                    }
                    this.get__groups().put(objNewKey_8, obj_8);
                    this.get__groups().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addAdaptationPrimitiveTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllAdaptationPrimitiveTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeAdaptationPrimitiveTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllAdaptationPrimitiveTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__adaptationPrimitiveTypes().size() !== 0 && this.get__adaptationPrimitiveTypes().containsKey(value)) {
                    var obj_9 = this.get__adaptationPrimitiveTypes().get(value);
                    var objNewKey_9 = (obj_9 != null ? obj_9 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_9 == null) {
                      throw new Error('Key newed to null ' + obj_9);
                    }
                    this.get__adaptationPrimitiveTypes().put(objNewKey_9, obj_9);
                    this.get__adaptationPrimitiveTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findNodesByID: function (key) {
              return this.get__nodes().get(key);
            },
            findTypeDefinitionsByID: function (key) {
              return this.get__typeDefinitions().get(key);
            },
            findRepositoriesByID: function (key) {
              return this.get__repositories().get(key);
            },
            findDataTypesByID: function (key) {
              return this.get__dataTypes().get(key);
            },
            findLibrariesByID: function (key) {
              return this.get__libraries().get(key);
            },
            findHubsByID: function (key) {
              return this.get__hubs().get(key);
            },
            findMBindingsByID: function (key) {
              return this.get__mBindings().get(key);
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findNodeNetworksByID: function (key) {
              return this.get__nodeNetworks().get(key);
            },
            findGroupsByID: function (key) {
              return this.get__groups().get(key);
            },
            findAdaptationPrimitiveTypesByID: function (key) {
              return this.get__adaptationPrimitiveTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_nodes()) {
                var objFound = this.findNodesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinitions()) {
                var objFound_0 = this.findTypeDefinitionsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_repositories()) {
                var objFound_1 = this.findRepositoriesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dataTypes()) {
                var objFound_2 = this.findDataTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_2 != null) {
                  tmp$0 = objFound_2.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_2;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_libraries()) {
                var objFound_3 = this.findLibrariesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_3 != null) {
                  tmp$0 = objFound_3.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_3;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_hubs()) {
                var objFound_4 = this.findHubsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_4 != null) {
                  tmp$0 = objFound_4.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_4;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_mBindings()) {
                var objFound_5 = this.findMBindingsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_5 != null) {
                  tmp$0 = objFound_5.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_5;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound_6 = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_6 != null) {
                  tmp$0 = objFound_6.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_6;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_nodeNetworks()) {
                var objFound_7 = this.findNodeNetworksByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_7 != null) {
                  tmp$0 = objFound_7.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_7;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_groups()) {
                var objFound_8 = this.findGroupsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_8 != null) {
                  tmp$0 = objFound_8.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_8;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes()) {
                var objFound_9 = this.findAdaptationPrimitiveTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_9 != null) {
                  tmp$0 = objFound_9.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_9;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__nodes().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findNodesByID(subElement.get_name());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              {
                var tmp$1 = this.get__typeDefinitions().values().iterator();
                while (tmp$1.hasNext()) {
                  var subElement_0 = tmp$1.next();
                  var foundedElement_0 = similarObjCasted.findTypeDefinitionsByID(subElement_0.get_name());
                  if (foundedElement_0 == null || !Kotlin.equals(foundedElement_0, subElement_0)) {
                    return false;
                  }
                }
              }
              {
                var tmp$2 = this.get__repositories().values().iterator();
                while (tmp$2.hasNext()) {
                  var subElement_1 = tmp$2.next();
                  var foundedElement_1 = similarObjCasted.findRepositoriesByID(subElement_1.get_url());
                  if (foundedElement_1 == null || !Kotlin.equals(foundedElement_1, subElement_1)) {
                    return false;
                  }
                }
              }
              {
                var tmp$3 = this.get__dataTypes().values().iterator();
                while (tmp$3.hasNext()) {
                  var subElement_2 = tmp$3.next();
                  var foundedElement_2 = similarObjCasted.findDataTypesByID(subElement_2.get_name());
                  if (foundedElement_2 == null || !Kotlin.equals(foundedElement_2, subElement_2)) {
                    return false;
                  }
                }
              }
              {
                var tmp$4 = this.get__libraries().values().iterator();
                while (tmp$4.hasNext()) {
                  var subElement_3 = tmp$4.next();
                  var foundedElement_3 = similarObjCasted.findLibrariesByID(subElement_3.get_name());
                  if (foundedElement_3 == null || !Kotlin.equals(foundedElement_3, subElement_3)) {
                    return false;
                  }
                }
              }
              {
                var tmp$5 = this.get__hubs().values().iterator();
                while (tmp$5.hasNext()) {
                  var subElement_4 = tmp$5.next();
                  var foundedElement_4 = similarObjCasted.findHubsByID(subElement_4.get_name());
                  if (foundedElement_4 == null || !Kotlin.equals(foundedElement_4, subElement_4)) {
                    return false;
                  }
                }
              }
              {
                var tmp$6 = this.get__mBindings().values().iterator();
                while (tmp$6.hasNext()) {
                  var subElement_5 = tmp$6.next();
                  var foundedElement_5 = similarObjCasted.findMBindingsByID(subElement_5.get_generated_KMF_ID());
                  if (foundedElement_5 == null || !Kotlin.equals(foundedElement_5, subElement_5)) {
                    return false;
                  }
                }
              }
              {
                var tmp$7 = this.get__deployUnits().values().iterator();
                while (tmp$7.hasNext()) {
                  var subElement_6 = tmp$7.next();
                  var foundedElement_6 = similarObjCasted.findDeployUnitsByID(subElement_6.get_generated_KMF_ID());
                  if (foundedElement_6 == null || !Kotlin.equals(foundedElement_6, subElement_6)) {
                    return false;
                  }
                }
              }
              {
                var tmp$8 = this.get__nodeNetworks().values().iterator();
                while (tmp$8.hasNext()) {
                  var subElement_7 = tmp$8.next();
                  var foundedElement_7 = similarObjCasted.findNodeNetworksByID(subElement_7.get_generated_KMF_ID());
                  if (foundedElement_7 == null || !Kotlin.equals(foundedElement_7, subElement_7)) {
                    return false;
                  }
                }
              }
              {
                var tmp$9 = this.get__groups().values().iterator();
                while (tmp$9.hasNext()) {
                  var subElement_8 = tmp$9.next();
                  var foundedElement_8 = similarObjCasted.findGroupsByID(subElement_8.get_name());
                  if (foundedElement_8 == null || !Kotlin.equals(foundedElement_8, subElement_8)) {
                    return false;
                  }
                }
              }
              {
                var tmp$10 = this.get__adaptationPrimitiveTypes().values().iterator();
                while (tmp$10.hasNext()) {
                  var subElement_9 = tmp$10.next();
                  var foundedElement_9 = similarObjCasted.findAdaptationPrimitiveTypesByID(subElement_9.get_name());
                  if (foundedElement_9 == null || !Kotlin.equals(foundedElement_9, subElement_9)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ContainerRoot) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ContainerRootImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              if (this.get_nodes().size() !== similarObjCasted.get_nodes().size()) {
                return false;
              }
              if (this.get_typeDefinitions().size() !== similarObjCasted.get_typeDefinitions().size()) {
                return false;
              }
              if (this.get_repositories().size() !== similarObjCasted.get_repositories().size()) {
                return false;
              }
              if (this.get_dataTypes().size() !== similarObjCasted.get_dataTypes().size()) {
                return false;
              }
              if (this.get_libraries().size() !== similarObjCasted.get_libraries().size()) {
                return false;
              }
              if (this.get_hubs().size() !== similarObjCasted.get_hubs().size()) {
                return false;
              }
              if (this.get_mBindings().size() !== similarObjCasted.get_mBindings().size()) {
                return false;
              }
              if (this.get_deployUnits().size() !== similarObjCasted.get_deployUnits().size()) {
                return false;
              }
              if (this.get_nodeNetworks().size() !== similarObjCasted.get_nodeNetworks().size()) {
                return false;
              }
              if (this.get_groups().size() !== similarObjCasted.get_groups().size()) {
                return false;
              }
              if (this.get_adaptationPrimitiveTypes().size() !== similarObjCasted.get_adaptationPrimitiveTypes().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__nodes().values());
              result.addAll(this.get__typeDefinitions().values());
              result.addAll(this.get__repositories().values());
              result.addAll(this.get__dataTypes().values());
              result.addAll(this.get__libraries().values());
              result.addAll(this.get__hubs().values());
              result.addAll(this.get__mBindings().values());
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__nodeNetworks().values());
              result.addAll(this.get__groups().values());
              result.addAll(this.get__adaptationPrimitiveTypes().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              {
                var tmp$0 = this.get__nodes().keySet().iterator();
                while (tmp$0.hasNext()) {
                  var KMFLoopEntryKey = tmp$0.next();
                  var tmp$1;
                  var KMFLoopEntry = (tmp$1 = this.get__nodes().get(KMFLoopEntryKey)) != null ? tmp$1 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_nodes(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$2 = this.get__typeDefinitions().keySet().iterator();
                while (tmp$2.hasNext()) {
                  var KMFLoopEntryKey_0 = tmp$2.next();
                  var tmp$3;
                  var KMFLoopEntry_0 = (tmp$3 = this.get__typeDefinitions().get(KMFLoopEntryKey_0)) != null ? tmp$3 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$4 = this.get__repositories().keySet().iterator();
                while (tmp$4.hasNext()) {
                  var KMFLoopEntryKey_1 = tmp$4.next();
                  var tmp$5;
                  var KMFLoopEntry_1 = (tmp$5 = this.get__repositories().get(KMFLoopEntryKey_1)) != null ? tmp$5 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_1, _.org.kevoree.util.Constants.get_Ref_repositories(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_1.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$6 = this.get__dataTypes().keySet().iterator();
                while (tmp$6.hasNext()) {
                  var KMFLoopEntryKey_2 = tmp$6.next();
                  var tmp$7;
                  var KMFLoopEntry_2 = (tmp$7 = this.get__dataTypes().get(KMFLoopEntryKey_2)) != null ? tmp$7 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_2, _.org.kevoree.util.Constants.get_Ref_dataTypes(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_2.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$8 = this.get__libraries().keySet().iterator();
                while (tmp$8.hasNext()) {
                  var KMFLoopEntryKey_3 = tmp$8.next();
                  var tmp$9;
                  var KMFLoopEntry_3 = (tmp$9 = this.get__libraries().get(KMFLoopEntryKey_3)) != null ? tmp$9 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_3, _.org.kevoree.util.Constants.get_Ref_libraries(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_3.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$10 = this.get__hubs().keySet().iterator();
                while (tmp$10.hasNext()) {
                  var KMFLoopEntryKey_4 = tmp$10.next();
                  var tmp$11;
                  var KMFLoopEntry_4 = (tmp$11 = this.get__hubs().get(KMFLoopEntryKey_4)) != null ? tmp$11 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_4, _.org.kevoree.util.Constants.get_Ref_hubs(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_4.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$12 = this.get__mBindings().keySet().iterator();
                while (tmp$12.hasNext()) {
                  var KMFLoopEntryKey_5 = tmp$12.next();
                  var tmp$13;
                  var KMFLoopEntry_5 = (tmp$13 = this.get__mBindings().get(KMFLoopEntryKey_5)) != null ? tmp$13 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_5, _.org.kevoree.util.Constants.get_Ref_mBindings(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_5.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$14 = this.get__deployUnits().keySet().iterator();
                while (tmp$14.hasNext()) {
                  var KMFLoopEntryKey_6 = tmp$14.next();
                  var tmp$15;
                  var KMFLoopEntry_6 = (tmp$15 = this.get__deployUnits().get(KMFLoopEntryKey_6)) != null ? tmp$15 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_6, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_6.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$16 = this.get__nodeNetworks().keySet().iterator();
                while (tmp$16.hasNext()) {
                  var KMFLoopEntryKey_7 = tmp$16.next();
                  var tmp$17;
                  var KMFLoopEntry_7 = (tmp$17 = this.get__nodeNetworks().get(KMFLoopEntryKey_7)) != null ? tmp$17 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_7, _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_7.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$18 = this.get__groups().keySet().iterator();
                while (tmp$18.hasNext()) {
                  var KMFLoopEntryKey_8 = tmp$18.next();
                  var tmp$19;
                  var KMFLoopEntry_8 = (tmp$19 = this.get__groups().get(KMFLoopEntryKey_8)) != null ? tmp$19 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_8, _.org.kevoree.util.Constants.get_Ref_groups(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_8.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$20 = this.get__adaptationPrimitiveTypes().keySet().iterator();
                while (tmp$20.hasNext()) {
                  var KMFLoopEntryKey_9 = tmp$20.next();
                  var tmp$21;
                  var KMFLoopEntry_9 = (tmp$21 = this.get__adaptationPrimitiveTypes().get(KMFLoopEntryKey_9)) != null ? tmp$21 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_9, _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_9.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.ContainerRoot';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ContainerRoot) || Kotlin.isType(similarObj, _.org.kevoree.impl.ContainerRootImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
              }
              return traces;
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getNodes: function () {
              return this.get_nodes();
            },
            setNodes: function (internal_p) {
              this.set_nodes(internal_p);
            },
            getTypeDefinitions: function () {
              return this.get_typeDefinitions();
            },
            setTypeDefinitions: function (internal_p) {
              this.set_typeDefinitions(internal_p);
            },
            getRepositories: function () {
              return this.get_repositories();
            },
            setRepositories: function (internal_p) {
              this.set_repositories(internal_p);
            },
            getDataTypes: function () {
              return this.get_dataTypes();
            },
            setDataTypes: function (internal_p) {
              this.set_dataTypes(internal_p);
            },
            getLibraries: function () {
              return this.get_libraries();
            },
            setLibraries: function (internal_p) {
              this.set_libraries(internal_p);
            },
            getHubs: function () {
              return this.get_hubs();
            },
            setHubs: function (internal_p) {
              this.set_hubs(internal_p);
            },
            getMBindings: function () {
              return this.get_mBindings();
            },
            setMBindings: function (internal_p) {
              this.set_mBindings(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getNodeNetworks: function () {
              return this.get_nodeNetworks();
            },
            setNodeNetworks: function (internal_p) {
              this.set_nodeNetworks(internal_p);
            },
            getGroups: function () {
              return this.get_groups();
            },
            setGroups: function (internal_p) {
              this.set_groups(internal_p);
            },
            getAdaptationPrimitiveTypes: function () {
              return this.get_adaptationPrimitiveTypes();
            },
            setAdaptationPrimitiveTypes: function (internal_p) {
              this.set_adaptationPrimitiveTypes(internal_p);
            }
          }),
          DefaultKevoreeFactory: Kotlin.createClass(classes.cl, /** @lends _.org.kevoree.impl.DefaultKevoreeFactory.prototype */ {
            initialize: function () {
            },
            getVersion: function () {
              return '1.0.0-SNAPSHOT';
            },
            createComponentInstance: function () {
              return new _.org.kevoree.impl.ComponentInstanceImpl();
            },
            createComponentType: function () {
              return new _.org.kevoree.impl.ComponentTypeImpl();
            },
            createContainerNode: function () {
              return new _.org.kevoree.impl.ContainerNodeImpl();
            },
            createContainerRoot: function () {
              return new _.org.kevoree.impl.ContainerRootImpl();
            },
            createPortType: function () {
              return new _.org.kevoree.impl.PortTypeImpl();
            },
            createPort: function () {
              return new _.org.kevoree.impl.PortImpl();
            },
            createNamespace: function () {
              return new _.org.kevoree.impl.NamespaceImpl();
            },
            createDictionary: function () {
              return new _.org.kevoree.impl.DictionaryImpl();
            },
            createDictionaryType: function () {
              return new _.org.kevoree.impl.DictionaryTypeImpl();
            },
            createDictionaryAttribute: function () {
              return new _.org.kevoree.impl.DictionaryAttributeImpl();
            },
            createDictionaryValue: function () {
              return new _.org.kevoree.impl.DictionaryValueImpl();
            },
            createCompositeType: function () {
              return new _.org.kevoree.impl.CompositeTypeImpl();
            },
            createPortTypeRef: function () {
              return new _.org.kevoree.impl.PortTypeRefImpl();
            },
            createWire: function () {
              return new _.org.kevoree.impl.WireImpl();
            },
            createServicePortType: function () {
              return new _.org.kevoree.impl.ServicePortTypeImpl();
            },
            createOperation: function () {
              return new _.org.kevoree.impl.OperationImpl();
            },
            createParameter: function () {
              return new _.org.kevoree.impl.ParameterImpl();
            },
            createTypedElement: function () {
              return new _.org.kevoree.impl.TypedElementImpl();
            },
            createMessagePortType: function () {
              return new _.org.kevoree.impl.MessagePortTypeImpl();
            },
            createRepository: function () {
              return new _.org.kevoree.impl.RepositoryImpl();
            },
            createDeployUnit: function () {
              return new _.org.kevoree.impl.DeployUnitImpl();
            },
            createTypeLibrary: function () {
              return new _.org.kevoree.impl.TypeLibraryImpl();
            },
            createNamedElement: function () {
              return new _.org.kevoree.impl.NamedElementImpl();
            },
            createIntegrationPattern: function () {
              return new _.org.kevoree.impl.IntegrationPatternImpl();
            },
            createExtraFonctionalProperty: function () {
              return new _.org.kevoree.impl.ExtraFonctionalPropertyImpl();
            },
            createPortTypeMapping: function () {
              return new _.org.kevoree.impl.PortTypeMappingImpl();
            },
            createChannel: function () {
              return new _.org.kevoree.impl.ChannelImpl();
            },
            createMBinding: function () {
              return new _.org.kevoree.impl.MBindingImpl();
            },
            createNodeNetwork: function () {
              return new _.org.kevoree.impl.NodeNetworkImpl();
            },
            createNodeLink: function () {
              return new _.org.kevoree.impl.NodeLinkImpl();
            },
            createNetworkProperty: function () {
              return new _.org.kevoree.impl.NetworkPropertyImpl();
            },
            createChannelType: function () {
              return new _.org.kevoree.impl.ChannelTypeImpl();
            },
            createTypeDefinition: function () {
              return new _.org.kevoree.impl.TypeDefinitionImpl();
            },
            createInstance: function () {
              return new _.org.kevoree.impl.InstanceImpl();
            },
            createLifeCycleTypeDefinition: function () {
              return new _.org.kevoree.impl.LifeCycleTypeDefinitionImpl();
            },
            createGroup: function () {
              return new _.org.kevoree.impl.GroupImpl();
            },
            createGroupType: function () {
              return new _.org.kevoree.impl.GroupTypeImpl();
            },
            createNodeType: function () {
              return new _.org.kevoree.impl.NodeTypeImpl();
            },
            createAdaptationPrimitiveType: function () {
              return new _.org.kevoree.impl.AdaptationPrimitiveTypeImpl();
            },
            createAdaptationPrimitiveTypeRef: function () {
              return new _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl();
            },
            create: function (metaClassName) {
              if (metaClassName === 'org.kevoree.ComponentInstance') {
                return this.createComponentInstance();
              }
               else if (metaClassName === 'ComponentInstance') {
                return this.createComponentInstance();
              }
               else if (metaClassName === 'org.kevoree.ComponentType') {
                return this.createComponentType();
              }
               else if (metaClassName === 'ComponentType') {
                return this.createComponentType();
              }
               else if (metaClassName === 'org.kevoree.ContainerNode') {
                return this.createContainerNode();
              }
               else if (metaClassName === 'ContainerNode') {
                return this.createContainerNode();
              }
               else if (metaClassName === 'org.kevoree.ContainerRoot') {
                return this.createContainerRoot();
              }
               else if (metaClassName === 'ContainerRoot') {
                return this.createContainerRoot();
              }
               else if (metaClassName === 'org.kevoree.PortType') {
                return this.createPortType();
              }
               else if (metaClassName === 'PortType') {
                return this.createPortType();
              }
               else if (metaClassName === 'org.kevoree.Port') {
                return this.createPort();
              }
               else if (metaClassName === 'Port') {
                return this.createPort();
              }
               else if (metaClassName === 'org.kevoree.Namespace') {
                return this.createNamespace();
              }
               else if (metaClassName === 'Namespace') {
                return this.createNamespace();
              }
               else if (metaClassName === 'org.kevoree.Dictionary') {
                return this.createDictionary();
              }
               else if (metaClassName === 'Dictionary') {
                return this.createDictionary();
              }
               else if (metaClassName === 'org.kevoree.DictionaryType') {
                return this.createDictionaryType();
              }
               else if (metaClassName === 'DictionaryType') {
                return this.createDictionaryType();
              }
               else if (metaClassName === 'org.kevoree.DictionaryAttribute') {
                return this.createDictionaryAttribute();
              }
               else if (metaClassName === 'DictionaryAttribute') {
                return this.createDictionaryAttribute();
              }
               else if (metaClassName === 'org.kevoree.DictionaryValue') {
                return this.createDictionaryValue();
              }
               else if (metaClassName === 'DictionaryValue') {
                return this.createDictionaryValue();
              }
               else if (metaClassName === 'org.kevoree.CompositeType') {
                return this.createCompositeType();
              }
               else if (metaClassName === 'CompositeType') {
                return this.createCompositeType();
              }
               else if (metaClassName === 'org.kevoree.PortTypeRef') {
                return this.createPortTypeRef();
              }
               else if (metaClassName === 'PortTypeRef') {
                return this.createPortTypeRef();
              }
               else if (metaClassName === 'org.kevoree.Wire') {
                return this.createWire();
              }
               else if (metaClassName === 'Wire') {
                return this.createWire();
              }
               else if (metaClassName === 'org.kevoree.ServicePortType') {
                return this.createServicePortType();
              }
               else if (metaClassName === 'ServicePortType') {
                return this.createServicePortType();
              }
               else if (metaClassName === 'org.kevoree.Operation') {
                return this.createOperation();
              }
               else if (metaClassName === 'Operation') {
                return this.createOperation();
              }
               else if (metaClassName === 'org.kevoree.Parameter') {
                return this.createParameter();
              }
               else if (metaClassName === 'Parameter') {
                return this.createParameter();
              }
               else if (metaClassName === 'org.kevoree.TypedElement') {
                return this.createTypedElement();
              }
               else if (metaClassName === 'TypedElement') {
                return this.createTypedElement();
              }
               else if (metaClassName === 'org.kevoree.MessagePortType') {
                return this.createMessagePortType();
              }
               else if (metaClassName === 'MessagePortType') {
                return this.createMessagePortType();
              }
               else if (metaClassName === 'org.kevoree.Repository') {
                return this.createRepository();
              }
               else if (metaClassName === 'Repository') {
                return this.createRepository();
              }
               else if (metaClassName === 'org.kevoree.DeployUnit') {
                return this.createDeployUnit();
              }
               else if (metaClassName === 'DeployUnit') {
                return this.createDeployUnit();
              }
               else if (metaClassName === 'org.kevoree.TypeLibrary') {
                return this.createTypeLibrary();
              }
               else if (metaClassName === 'TypeLibrary') {
                return this.createTypeLibrary();
              }
               else if (metaClassName === 'org.kevoree.NamedElement') {
                return this.createNamedElement();
              }
               else if (metaClassName === 'NamedElement') {
                return this.createNamedElement();
              }
               else if (metaClassName === 'org.kevoree.IntegrationPattern') {
                return this.createIntegrationPattern();
              }
               else if (metaClassName === 'IntegrationPattern') {
                return this.createIntegrationPattern();
              }
               else if (metaClassName === 'org.kevoree.ExtraFonctionalProperty') {
                return this.createExtraFonctionalProperty();
              }
               else if (metaClassName === 'ExtraFonctionalProperty') {
                return this.createExtraFonctionalProperty();
              }
               else if (metaClassName === 'org.kevoree.PortTypeMapping') {
                return this.createPortTypeMapping();
              }
               else if (metaClassName === 'PortTypeMapping') {
                return this.createPortTypeMapping();
              }
               else if (metaClassName === 'org.kevoree.Channel') {
                return this.createChannel();
              }
               else if (metaClassName === 'Channel') {
                return this.createChannel();
              }
               else if (metaClassName === 'org.kevoree.MBinding') {
                return this.createMBinding();
              }
               else if (metaClassName === 'MBinding') {
                return this.createMBinding();
              }
               else if (metaClassName === 'org.kevoree.NodeNetwork') {
                return this.createNodeNetwork();
              }
               else if (metaClassName === 'NodeNetwork') {
                return this.createNodeNetwork();
              }
               else if (metaClassName === 'org.kevoree.NodeLink') {
                return this.createNodeLink();
              }
               else if (metaClassName === 'NodeLink') {
                return this.createNodeLink();
              }
               else if (metaClassName === 'org.kevoree.NetworkProperty') {
                return this.createNetworkProperty();
              }
               else if (metaClassName === 'NetworkProperty') {
                return this.createNetworkProperty();
              }
               else if (metaClassName === 'org.kevoree.ChannelType') {
                return this.createChannelType();
              }
               else if (metaClassName === 'ChannelType') {
                return this.createChannelType();
              }
               else if (metaClassName === 'org.kevoree.TypeDefinition') {
                return this.createTypeDefinition();
              }
               else if (metaClassName === 'TypeDefinition') {
                return this.createTypeDefinition();
              }
               else if (metaClassName === 'org.kevoree.Instance') {
                return this.createInstance();
              }
               else if (metaClassName === 'Instance') {
                return this.createInstance();
              }
               else if (metaClassName === 'org.kevoree.LifeCycleTypeDefinition') {
                return this.createLifeCycleTypeDefinition();
              }
               else if (metaClassName === 'LifeCycleTypeDefinition') {
                return this.createLifeCycleTypeDefinition();
              }
               else if (metaClassName === 'org.kevoree.Group') {
                return this.createGroup();
              }
               else if (metaClassName === 'Group') {
                return this.createGroup();
              }
               else if (metaClassName === 'org.kevoree.GroupType') {
                return this.createGroupType();
              }
               else if (metaClassName === 'GroupType') {
                return this.createGroupType();
              }
               else if (metaClassName === 'org.kevoree.NodeType') {
                return this.createNodeType();
              }
               else if (metaClassName === 'NodeType') {
                return this.createNodeType();
              }
               else if (metaClassName === 'org.kevoree.AdaptationPrimitiveType') {
                return this.createAdaptationPrimitiveType();
              }
               else if (metaClassName === 'AdaptationPrimitiveType') {
                return this.createAdaptationPrimitiveType();
              }
               else if (metaClassName === 'org.kevoree.AdaptationPrimitiveTypeRef') {
                return this.createAdaptationPrimitiveTypeRef();
              }
               else if (metaClassName === 'AdaptationPrimitiveTypeRef') {
                return this.createAdaptationPrimitiveTypeRef();
              }
               else {
                return null;
              }
            }
          }),
          DeployUnitImpl: Kotlin.createClass([classes.c8, classes.cb], /** @lends _.org.kevoree.impl.DeployUnitImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$groupName = null;
              this.$unitName = null;
              this.$version = null;
              this.$url = null;
              this.$hashcode = null;
              this.$type = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_requiredLibs = new Kotlin.PrimitiveHashMap(0);
              this.$targetNodeType = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__requiredLibs()) != null ? tmp$0.clear() : null;
              this.set_targetNodeType(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
            },
            get_groupName: function () {
              return this.$groupName;
            },
            set_groupName: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$groupName = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_groupName(), this.get_groupName()));
            },
            get_unitName: function () {
              return this.$unitName;
            },
            set_unitName: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$unitName = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_unitName(), this.get_unitName()));
            },
            get_version: function () {
              return this.$version;
            },
            set_version: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$version = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_version(), this.get_version()));
            },
            get_url: function () {
              return this.$url;
            },
            set_url: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$url = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_url(), this.get_url()));
            },
            get_hashcode: function () {
              return this.$hashcode;
            },
            set_hashcode: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$hashcode = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_hashcode(), this.get_hashcode()));
            },
            get_type: function () {
              return this.$type;
            },
            set_type: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$type = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_type(), this.get_type()));
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get__requiredLibs: function () {
              return this.$_requiredLibs;
            },
            get_requiredLibs: function () {
              return _.kotlin.toList_2(this.get__requiredLibs().values());
            },
            set_requiredLibs: function (requiredLibsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredLibsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__requiredLibs().values(), requiredLibsP)) {
                this.get__requiredLibs().clear();
                {
                  var tmp$0 = requiredLibsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__requiredLibs().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), requiredLibsP));
              }
            },
            addRequiredLibs: function (requiredLibsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__requiredLibs().put(_key_, requiredLibsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), requiredLibsP));
            },
            addAllRequiredLibs: function (requiredLibsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = requiredLibsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__requiredLibs().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), requiredLibsP));
            },
            removeRequiredLibs: function (requiredLibsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__requiredLibs().size() !== 0 && this.get__requiredLibs().containsKey((requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__requiredLibs().remove((requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), requiredLibsP));
              }
            },
            removeAllRequiredLibs: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_requiredLibs()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__requiredLibs().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), temp_els));
            },
            get_targetNodeType: function () {
              return this.$targetNodeType;
            },
            set_targetNodeType: function (targetNodeTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$targetNodeType, targetNodeTypeP)) {
                this.$targetNodeType = targetNodeTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_targetNodeType(), targetNodeTypeP));
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createDeployUnit();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_groupName(this.get_groupName());
              selfObjectClone.set_unitName(this.get_unitName());
              selfObjectClone.set_version(this.get_version());
              selfObjectClone.set_url(this.get_url());
              selfObjectClone.set_hashcode(this.get_hashcode());
              selfObjectClone.set_type(this.get_type());
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_requiredLibs().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addRequiredLibs(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained requiredLibs from DeployUnit : ' + this.get_requiredLibs());
                    }
                    clonedSelfObject.addRequiredLibs(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_targetNodeType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_targetNodeType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_targetNodeType((tmp$3 = this.get_targetNodeType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_targetNodeType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained targetNodeType from DeployUnit : ' + this.get_targetNodeType());
                  }
                  clonedSelfObject.set_targetNodeType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_groupName()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_groupName(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_unitName()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_unitName(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_version()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_version(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_url()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_url(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_hashcode()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_hashcode(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_type()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_type(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_requiredLibs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addRequiredLibs(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllRequiredLibs(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeRequiredLibs(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequiredLibs();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__requiredLibs().size() !== 0 && this.get__requiredLibs().containsKey(value)) {
                    var obj = this.get__requiredLibs().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__requiredLibs().put(objNewKey, obj);
                    this.get__requiredLibs().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_targetNodeType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_targetNodeType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_targetNodeType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_targetNodeType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findRequiredLibsByID: function (key) {
              return this.get__requiredLibs().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_requiredLibs()) {
                var objFound = this.findRequiredLibsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_targetNodeType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_targetNodeType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_targetNodeType();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.DeployUnit) || !Kotlin.isType(similarObj, _.org.kevoree.impl.DeployUnitImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_groupName(), similarObjCasted.get_groupName())) {
                return false;
              }
              if (!Kotlin.equals(this.get_unitName(), similarObjCasted.get_unitName())) {
                return false;
              }
              if (!Kotlin.equals(this.get_version(), similarObjCasted.get_version())) {
                return false;
              }
              if (!Kotlin.equals(this.get_url(), similarObjCasted.get_url())) {
                return false;
              }
              if (!Kotlin.equals(this.get_hashcode(), similarObjCasted.get_hashcode())) {
                return false;
              }
              if (!Kotlin.equals(this.get_type(), similarObjCasted.get_type())) {
                return false;
              }
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__requiredLibs().values());
              if (this.get_targetNodeType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_targetNodeType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.DeployUnit';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.DeployUnit) || Kotlin.isType(similarObj, _.org.kevoree.impl.DeployUnitImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_groupName();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_groupName() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_groupName(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_groupName(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_unitName();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_unitName() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_unitName(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_unitName(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_version();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_version() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_version(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_version(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_url();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_url() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_url(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_url(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_hashcode();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_hashcode() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_hashcode(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$11;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_hashcode(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_type();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_type() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$12;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_type(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$13;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_type(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$14;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$15;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$15 = this.path()) != null ? tmp$15 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$16 = this.get__requiredLibs().values().iterator();
                  while (tmp$16.hasNext()) {
                    var elem = tmp$16.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$17 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_requiredLibs().iterator();
                    while (tmp$17.hasNext()) {
                      var elem_0 = tmp$17.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$18 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$18.hasNext()) {
                      var hashLoopRes = tmp$18.next();
                      var tmp$19, tmp$20;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$19 = this.path()) != null ? tmp$19 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), hashLoopRes, ((tmp$20 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$20 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                attVal = null;
                var tmp$21, tmp$22;
                attVal = (tmp$21 = this.get_targetNodeType()) != null ? tmp$21.path() : null;
                attVal2 = null;
                attVal2 = (tmp$22 = similarObjCasted != null ? similarObjCasted.get_targetNodeType() : null) != null ? tmp$22.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$23;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$23 = this.path()) != null ? tmp$23 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_targetNodeType(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$24;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$24 = this.path()) != null ? tmp$24 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_targetNodeType(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getGroupName: function () {
              return this.get_groupName();
            },
            setGroupName: function (internal_p) {
              this.set_groupName(internal_p);
            },
            getUnitName: function () {
              return this.get_unitName();
            },
            setUnitName: function (internal_p) {
              this.set_unitName(internal_p);
            },
            getVersion: function () {
              return this.get_version();
            },
            setVersion: function (internal_p) {
              this.set_version(internal_p);
            },
            getUrl: function () {
              return this.get_url();
            },
            setUrl: function (internal_p) {
              this.set_url(internal_p);
            },
            getHashcode: function () {
              return this.get_hashcode();
            },
            setHashcode: function (internal_p) {
              this.set_hashcode(internal_p);
            },
            getType: function () {
              return this.get_type();
            },
            setType: function (internal_p) {
              this.set_type(internal_p);
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getRequiredLibs: function () {
              return this.get_requiredLibs();
            },
            setRequiredLibs: function (internal_p) {
              this.set_requiredLibs(internal_p);
            },
            getTargetNodeType: function () {
              return this.get_targetNodeType();
            },
            setTargetNodeType: function (internal_p) {
              this.set_targetNodeType(internal_p);
            }
          }),
          DictionaryAttributeImpl: Kotlin.createClass([classes.c8, classes.cd], /** @lends _.org.kevoree.impl.DictionaryAttributeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$optional = null;
              this.$state = null;
              this.$datatype = null;
              this.$fragmentDependant = null;
              this.$_genericTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__genericTypes()) != null ? tmp$0.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_optional: function () {
              return this.$optional;
            },
            set_optional: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$optional = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_optional(), this.get_optional()));
            },
            get_state: function () {
              return this.$state;
            },
            set_state: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$state = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_state(), this.get_state()));
            },
            get_datatype: function () {
              return this.$datatype;
            },
            set_datatype: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$datatype = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_datatype(), this.get_datatype()));
            },
            get_fragmentDependant: function () {
              return this.$fragmentDependant;
            },
            set_fragmentDependant: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$fragmentDependant = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_fragmentDependant(), this.get_fragmentDependant()));
            },
            get__genericTypes: function () {
              return this.$_genericTypes;
            },
            get_genericTypes: function () {
              return _.kotlin.toList_2(this.get__genericTypes().values());
            },
            set_genericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (genericTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__genericTypes().values(), genericTypesP)) {
                this.get__genericTypes().clear();
                {
                  var tmp$0 = genericTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__genericTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
              }
            },
            addGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__genericTypes().put(_key_, genericTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
            },
            addAllGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = genericTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__genericTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
            },
            removeGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__genericTypes().remove((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
              }
            },
            removeAllGenericTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_genericTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__genericTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createDictionaryAttribute();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_optional(this.get_optional());
              selfObjectClone.set_state(this.get_state());
              selfObjectClone.set_datatype(this.get_datatype());
              selfObjectClone.set_fragmentDependant(this.get_fragmentDependant());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_genericTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addGenericTypes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained genericTypes from DictionaryAttribute : ' + this.get_genericTypes());
                    }
                    clonedSelfObject.addGenericTypes(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_optional()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_optional(Kotlin.equals('true', value) || Kotlin.equals(true, value));
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_state()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_state(Kotlin.equals('true', value) || Kotlin.equals(true, value));
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_datatype()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_datatype(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_fragmentDependant()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_fragmentDependant(Kotlin.equals('true', value) || Kotlin.equals(true, value));
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addGenericTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllGenericTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeGenericTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllGenericTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey(value)) {
                    var obj = this.get__genericTypes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__genericTypes().put(objNewKey, obj);
                    this.get__genericTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findGenericTypesByID: function (key) {
              return this.get__genericTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_genericTypes();
              var optionalDetected = firstSepIndex !== 12;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, query.length);
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0 = query;
              var tmp$1;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = relationName.length;
              }
              var subquery = tmp$0.substring(tmp$1 + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                var objFound = this.findGenericTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.DictionaryAttribute) || !Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryAttributeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_optional(), similarObjCasted.get_optional())) {
                return false;
              }
              if (!Kotlin.equals(this.get_state(), similarObjCasted.get_state())) {
                return false;
              }
              if (!Kotlin.equals(this.get_datatype(), similarObjCasted.get_datatype())) {
                return false;
              }
              if (!Kotlin.equals(this.get_fragmentDependant(), similarObjCasted.get_fragmentDependant())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__genericTypes().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.DictionaryAttribute';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.DictionaryAttribute) || Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryAttributeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_optional();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_optional() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_optional(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_optional(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_state();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_state() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_state(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_state(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_datatype();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_datatype() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_datatype(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_datatype(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_fragmentDependant();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_fragmentDependant() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_fragmentDependant(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_fragmentDependant(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$10 = this.get__genericTypes().values().iterator();
                  while (tmp$10.hasNext()) {
                    var elem = tmp$10.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$11 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_genericTypes().iterator();
                    while (tmp$11.hasNext()) {
                      var elem_0 = tmp$11.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$12 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$12.hasNext()) {
                      var hashLoopRes = tmp$12.next();
                      var tmp$13, tmp$14;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), hashLoopRes, ((tmp$14 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$14 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getOptional: function () {
              return this.get_optional();
            },
            setOptional: function (internal_p) {
              this.set_optional(internal_p);
            },
            getState: function () {
              return this.get_state();
            },
            setState: function (internal_p) {
              this.set_state(internal_p);
            },
            getDatatype: function () {
              return this.get_datatype();
            },
            setDatatype: function (internal_p) {
              this.set_datatype(internal_p);
            },
            getFragmentDependant: function () {
              return this.get_fragmentDependant();
            },
            setFragmentDependant: function (internal_p) {
              this.set_fragmentDependant(internal_p);
            },
            getGenericTypes: function () {
              return this.get_genericTypes();
            },
            setGenericTypes: function (internal_p) {
              this.set_genericTypes(internal_p);
            }
          }),
          DictionaryImpl: Kotlin.createClass([classes.c8, classes.cc], /** @lends _.org.kevoree.impl.DictionaryImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_values = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllValuesCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              {
                var tmp$0 = this.get__values().entrySet().iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1;
              (tmp$1 = this.get__values()) != null ? tmp$1.clear() : null;
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get__values: function () {
              return this.$_values;
            },
            get_values: function () {
              return _.kotlin.toList_2(this.get__values().values());
            },
            set_values: function (valuesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (valuesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__values().values(), valuesP)) {
                this.get__values().clear();
                {
                  var tmp$0 = valuesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__values().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = valuesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'values', elem), 'values');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_values(), valuesP));
              }
            },
            addValues: function (valuesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (valuesP != null ? valuesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'values', valuesP), 'values');
              var _key_ = (valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__values().put(_key_, valuesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_values(), valuesP));
            },
            addAllValues: function (valuesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = valuesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__values().put(_key_, el);
                }
              }
              {
                var tmp$1 = valuesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'values', el_0), 'values');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_values(), valuesP));
            },
            get_removeAllValuesCurrentlyProcessing: function () {
              return this.$removeAllValuesCurrentlyProcessing;
            },
            set_removeAllValuesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllValuesCurrentlyProcessing = tmp$0;
            },
            removeValues: function (valuesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__values().size() !== 0 && this.get__values().containsKey((valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__values().remove((valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey());
                ((valuesP != null ? valuesP : Kotlin.throwNPE()) != null ? valuesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllValuesCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_values(), valuesP));
                }
              }
            },
            removeAllValues: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllValuesCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_values()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__values().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_values(), temp_els));
              this.set_removeAllValuesCurrentlyProcessing(false);
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createDictionary();
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.get_values().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_values().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addValues(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained values from Dictionary : ' + this.get_values());
                    }
                    clonedSelfObject.addValues(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$2 = this.get_values().iterator();
                while (tmp$2.hasNext()) {
                  var sub_0 = tmp$2.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_values()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addValues(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllValues(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeValues(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllValues();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__values().size() !== 0 && this.get__values().containsKey(value)) {
                    var obj = this.get__values().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__values().put(objNewKey, obj);
                    this.get__values().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findValuesByID: function (key) {
              return this.get__values().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_values();
              var optionalDetected = firstSepIndex !== 6;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, query.length);
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0 = query;
              var tmp$1;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = relationName.length;
              }
              var subquery = tmp$0.substring(tmp$1 + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_values()) {
                var objFound = this.findValuesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__values().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findValuesByID(subElement.get_generated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Dictionary) || !Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              if (this.get_values().size() !== similarObjCasted.get_values().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__values().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              {
                var tmp$0 = this.get__values().keySet().iterator();
                while (tmp$0.hasNext()) {
                  var KMFLoopEntryKey = tmp$0.next();
                  var tmp$1;
                  var KMFLoopEntry = (tmp$1 = this.get__values().get(KMFLoopEntryKey)) != null ? tmp$1 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_values(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.Dictionary';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Dictionary) || Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
              }
              return traces;
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getValues: function () {
              return this.get_values();
            },
            setValues: function (internal_p) {
              this.set_values(internal_p);
            }
          }),
          DictionaryTypeImpl: Kotlin.createClass([classes.c8, classes.ce], /** @lends _.org.kevoree.impl.DictionaryTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_attributes = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllAttributesCurrentlyProcessing = false;
              this.$_defaultValues = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllDefaultValuesCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              {
                var tmp$0 = this.get__attributes().entrySet().iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              {
                var tmp$1 = this.get__defaultValues().entrySet().iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  _.kotlin.get_value(el_0).delete();
                }
              }
              var tmp$2, tmp$3;
              (tmp$2 = this.get__attributes()) != null ? tmp$2.clear() : null;
              (tmp$3 = this.get__defaultValues()) != null ? tmp$3.clear() : null;
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get__attributes: function () {
              return this.$_attributes;
            },
            get_attributes: function () {
              return _.kotlin.toList_2(this.get__attributes().values());
            },
            set_attributes: function (attributesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (attributesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__attributes().values(), attributesP)) {
                this.get__attributes().clear();
                {
                  var tmp$0 = attributesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__attributes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = attributesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'attributes', elem), 'attributes');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_attributes(), attributesP));
              }
            },
            addAttributes: function (attributesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (attributesP != null ? attributesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'attributes', attributesP), 'attributes');
              var _key_ = (attributesP != null ? attributesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__attributes().put(_key_, attributesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_attributes(), attributesP));
            },
            addAllAttributes: function (attributesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = attributesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__attributes().put(_key_, el);
                }
              }
              {
                var tmp$1 = attributesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'attributes', el_0), 'attributes');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_attributes(), attributesP));
            },
            get_removeAllAttributesCurrentlyProcessing: function () {
              return this.$removeAllAttributesCurrentlyProcessing;
            },
            set_removeAllAttributesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllAttributesCurrentlyProcessing = tmp$0;
            },
            removeAttributes: function (attributesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__attributes().size() !== 0 && this.get__attributes().containsKey((attributesP != null ? attributesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__attributes().remove((attributesP != null ? attributesP : Kotlin.throwNPE()).internalGetKey());
                ((attributesP != null ? attributesP : Kotlin.throwNPE()) != null ? attributesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllAttributesCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_attributes(), attributesP));
                }
              }
            },
            removeAllAttributes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllAttributesCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_attributes()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__attributes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_attributes(), temp_els));
              this.set_removeAllAttributesCurrentlyProcessing(false);
            },
            get__defaultValues: function () {
              return this.$_defaultValues;
            },
            get_defaultValues: function () {
              return _.kotlin.toList_2(this.get__defaultValues().values());
            },
            set_defaultValues: function (defaultValuesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (defaultValuesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__defaultValues().values(), defaultValuesP)) {
                this.get__defaultValues().clear();
                {
                  var tmp$0 = defaultValuesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__defaultValues().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = defaultValuesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'defaultValues', elem), 'defaultValues');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), defaultValuesP));
              }
            },
            addDefaultValues: function (defaultValuesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (defaultValuesP != null ? defaultValuesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'defaultValues', defaultValuesP), 'defaultValues');
              var _key_ = (defaultValuesP != null ? defaultValuesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__defaultValues().put(_key_, defaultValuesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), defaultValuesP));
            },
            addAllDefaultValues: function (defaultValuesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = defaultValuesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__defaultValues().put(_key_, el);
                }
              }
              {
                var tmp$1 = defaultValuesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'defaultValues', el_0), 'defaultValues');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), defaultValuesP));
            },
            get_removeAllDefaultValuesCurrentlyProcessing: function () {
              return this.$removeAllDefaultValuesCurrentlyProcessing;
            },
            set_removeAllDefaultValuesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllDefaultValuesCurrentlyProcessing = tmp$0;
            },
            removeDefaultValues: function (defaultValuesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__defaultValues().size() !== 0 && this.get__defaultValues().containsKey((defaultValuesP != null ? defaultValuesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__defaultValues().remove((defaultValuesP != null ? defaultValuesP : Kotlin.throwNPE()).internalGetKey());
                ((defaultValuesP != null ? defaultValuesP : Kotlin.throwNPE()) != null ? defaultValuesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllDefaultValuesCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), defaultValuesP));
                }
              }
            },
            removeAllDefaultValues: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllDefaultValuesCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_defaultValues()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__defaultValues().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), temp_els));
              this.set_removeAllDefaultValuesCurrentlyProcessing(false);
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createDictionaryType();
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.get_attributes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$1 = this.get_defaultValues().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_attributes().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addAttributes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained attributes from DictionaryType : ' + this.get_attributes());
                    }
                    clonedSelfObject.addAttributes(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$2 = this.get_defaultValues().iterator();
                while (tmp$2.hasNext()) {
                  var sub_0 = tmp$2.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addDefaultValues(sub_0);
                  }
                   else {
                    var interObj_0 = addrs.get(sub_0);
                    if (interObj_0 == null) {
                      throw new Error('Non contained defaultValues from DictionaryType : ' + this.get_defaultValues());
                    }
                    clonedSelfObject.addDefaultValues(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$3 = this.get_attributes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_1 = tmp$3.next();
                  (sub_1 != null ? sub_1 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$4 = this.get_defaultValues().iterator();
                while (tmp$4.hasNext()) {
                  var sub_2 = tmp$4.next();
                  (sub_2 != null ? sub_2 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_attributes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addAttributes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllAttributes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeAttributes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllAttributes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__attributes().size() !== 0 && this.get__attributes().containsKey(value)) {
                    var obj = this.get__attributes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__attributes().put(objNewKey, obj);
                    this.get__attributes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_defaultValues()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDefaultValues(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDefaultValues(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDefaultValues(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDefaultValues();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__defaultValues().size() !== 0 && this.get__defaultValues().containsKey(value)) {
                    var obj_0 = this.get__defaultValues().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__defaultValues().put(objNewKey_0, obj_0);
                    this.get__defaultValues().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findAttributesByID: function (key) {
              return this.get__attributes().get(key);
            },
            findDefaultValuesByID: function (key) {
              return this.get__defaultValues().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_attributes()) {
                var objFound = this.findAttributesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_defaultValues()) {
                var objFound_0 = this.findDefaultValuesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__attributes().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findAttributesByID(subElement.get_name());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              {
                var tmp$1 = this.get__defaultValues().values().iterator();
                while (tmp$1.hasNext()) {
                  var subElement_0 = tmp$1.next();
                  var foundedElement_0 = similarObjCasted.findDefaultValuesByID(subElement_0.get_generated_KMF_ID());
                  if (foundedElement_0 == null || !Kotlin.equals(foundedElement_0, subElement_0)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.DictionaryType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              if (this.get_attributes().size() !== similarObjCasted.get_attributes().size()) {
                return false;
              }
              if (this.get_defaultValues().size() !== similarObjCasted.get_defaultValues().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__attributes().values());
              result.addAll(this.get__defaultValues().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              {
                var tmp$0 = this.get__attributes().keySet().iterator();
                while (tmp$0.hasNext()) {
                  var KMFLoopEntryKey = tmp$0.next();
                  var tmp$1;
                  var KMFLoopEntry = (tmp$1 = this.get__attributes().get(KMFLoopEntryKey)) != null ? tmp$1 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_attributes(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              {
                var tmp$2 = this.get__defaultValues().keySet().iterator();
                while (tmp$2.hasNext()) {
                  var KMFLoopEntryKey_0 = tmp$2.next();
                  var tmp$3;
                  var KMFLoopEntry_0 = (tmp$3 = this.get__defaultValues().get(KMFLoopEntryKey_0)) != null ? tmp$3 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_defaultValues(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.DictionaryType';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.DictionaryType) || Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryTypeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
              }
              return traces;
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getAttributes: function () {
              return this.get_attributes();
            },
            setAttributes: function (internal_p) {
              this.set_attributes(internal_p);
            },
            getDefaultValues: function () {
              return this.get_defaultValues();
            },
            setDefaultValues: function (internal_p) {
              this.set_defaultValues(internal_p);
            }
          }),
          DictionaryValueImpl: Kotlin.createClass([classes.c8, classes.cf], /** @lends _.org.kevoree.impl.DictionaryValueImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$value = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$attribute = null;
              this.$targetNode = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              this.set_attribute(null);
              this.set_targetNode(null);
            },
            get_value: function () {
              return this.$value;
            },
            set_value: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$value = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_value(), this.get_value()));
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get_attribute: function () {
              return this.$attribute;
            },
            set_attribute: function (attributeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$attribute, attributeP)) {
                this.$attribute = attributeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_attribute(), attributeP));
              }
            },
            get_targetNode: function () {
              return this.$targetNode;
            },
            set_targetNode: function (targetNodeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$targetNode, targetNodeP)) {
                this.$targetNode = targetNodeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_targetNode(), targetNodeP));
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createDictionaryValue();
              selfObjectClone.set_value(this.get_value());
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (this.get_attribute() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.get_attribute()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.set_attribute((tmp$2 = this.get_attribute()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.get_attribute());
                  if (interObj == null) {
                    throw new Error('Non contained attribute from DictionaryValue : ' + this.get_attribute());
                  }
                  clonedSelfObject.set_attribute(interObj != null ? interObj : Kotlin.throwNPE());
                }
              }
              if (this.get_targetNode() != null) {
                var tmp$3;
                if (mutableOnly && ((tmp$3 = this.get_targetNode()) != null ? tmp$3 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$4;
                  clonedSelfObject.set_targetNode((tmp$4 = this.get_targetNode()) != null ? tmp$4 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_targetNode());
                  if (interObj_0 == null) {
                    throw new Error('Non contained targetNode from DictionaryValue : ' + this.get_targetNode());
                  }
                  clonedSelfObject.set_targetNode(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_value()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_value(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_attribute()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_attribute(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_attribute(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_attribute(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_targetNode()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_targetNode(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_targetNode(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_targetNode(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.DictionaryValue) || !Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryValueImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_value(), similarObjCasted.get_value())) {
                return false;
              }
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_attribute() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_attribute()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              if (this.get_targetNode() != null) {
                var tmp$1;
                result.add((tmp$1 = this.get_targetNode()) != null ? tmp$1 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.DictionaryValue';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.DictionaryValue) || Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryValueImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_value();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_value() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_value(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_value(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$4, tmp$5, tmp$8, tmp$9;
                attVal = (tmp$4 = this.get_attribute()) != null ? tmp$4.path() : null;
                attVal2 = null;
                attVal2 = (tmp$5 = similarObjCasted != null ? similarObjCasted.get_attribute() : null) != null ? tmp$5.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_attribute(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_attribute(), attVal2String, null, null));
                  }
                }
                attVal = null;
                attVal = (tmp$8 = this.get_targetNode()) != null ? tmp$8.path() : null;
                attVal2 = null;
                attVal2 = (tmp$9 = similarObjCasted != null ? similarObjCasted.get_targetNode() : null) != null ? tmp$9.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_targetNode(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$11;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_targetNode(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getValue: function () {
              return this.get_value();
            },
            setValue: function (internal_p) {
              this.set_value(internal_p);
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getAttribute: function () {
              return this.get_attribute();
            },
            setAttribute: function (internal_p) {
              this.set_attribute(internal_p);
            },
            getTargetNode: function () {
              return this.get_targetNode();
            },
            setTargetNode: function (internal_p) {
              this.set_targetNode(internal_p);
            }
          }),
          ExtraFonctionalPropertyImpl: Kotlin.createClass([classes.c8, classes.cg], /** @lends _.org.kevoree.impl.ExtraFonctionalPropertyImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_portTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__portTypes()) != null ? tmp$0.clear() : null;
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get__portTypes: function () {
              return this.$_portTypes;
            },
            get_portTypes: function () {
              return _.kotlin.toList_2(this.get__portTypes().values());
            },
            set_portTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (portTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__portTypes().values(), portTypesP)) {
                this.get__portTypes().clear();
                {
                  var tmp$0 = portTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__portTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
              }
            },
            addPortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__portTypes().put(_key_, portTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
            },
            addAllPortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = portTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__portTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
            },
            removePortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey((portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__portTypes().remove((portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
              }
            },
            removeAllPortTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_portTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__portTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createExtraFonctionalProperty();
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_portTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addPortTypes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained portTypes from ExtraFonctionalProperty : ' + this.get_portTypes());
                    }
                    clonedSelfObject.addPortTypes(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addPortTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllPortTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removePortTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllPortTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey(value)) {
                    var obj = this.get__portTypes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__portTypes().put(objNewKey, obj);
                    this.get__portTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findPortTypesByID: function (key) {
              return this.get__portTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_portTypes();
              var optionalDetected = firstSepIndex !== 9;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, query.length);
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0 = query;
              var tmp$1;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = relationName.length;
              }
              var subquery = tmp$0.substring(tmp$1 + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                var objFound = this.findPortTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ExtraFonctionalProperty) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ExtraFonctionalPropertyImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__portTypes().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.ExtraFonctionalProperty';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ExtraFonctionalProperty) || Kotlin.isType(similarObj, _.org.kevoree.impl.ExtraFonctionalPropertyImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$2 = this.get__portTypes().values().iterator();
                  while (tmp$2.hasNext()) {
                    var elem = tmp$2.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$3 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_portTypes().iterator();
                    while (tmp$3.hasNext()) {
                      var elem_0 = tmp$3.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$4 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$4.hasNext()) {
                      var hashLoopRes = tmp$4.next();
                      var tmp$5, tmp$6;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), hashLoopRes, ((tmp$6 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$6 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getPortTypes: function () {
              return this.get_portTypes();
            },
            setPortTypes: function (internal_p) {
              this.set_portTypes(internal_p);
            }
          }),
          GroupImpl: Kotlin.createClass([classes.c8, classes.ch], /** @lends _.org.kevoree.impl.GroupImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$metaData = null;
              this.$typeDefinition = null;
              this.$dictionary = null;
              this.$_subNodes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1;
              (tmp$0 = this.get_dictionary()) != null ? tmp$0.delete() : null;
              this.set_typeDefinition(null);
              this.set_dictionary(null);
              (tmp$1 = this.get__subNodes()) != null ? tmp$1.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_metaData: function () {
              return this.$metaData;
            },
            set_metaData: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$metaData = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_metaData(), this.get_metaData()));
            },
            get_typeDefinition: function () {
              return this.$typeDefinition;
            },
            set_typeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$typeDefinition, typeDefinitionP)) {
                this.$typeDefinition = typeDefinitionP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), typeDefinitionP));
              }
            },
            get_dictionary: function () {
              return this.$dictionary;
            },
            set_dictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionary, dictionaryP)) {
                if (this.$dictionary != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionary) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionary', null), 'dictionary');
                }
                this.$dictionary = dictionaryP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionary(), dictionaryP));
              }
            },
            get__subNodes: function () {
              return this.$_subNodes;
            },
            get_subNodes: function () {
              return _.kotlin.toList_2(this.get__subNodes().values());
            },
            set_subNodes: function (subNodesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (subNodesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__subNodes().values(), subNodesP)) {
                this.get__subNodes().clear();
                {
                  var tmp$0 = subNodesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__subNodes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), subNodesP));
              }
            },
            addSubNodes: function (subNodesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (subNodesP != null ? subNodesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__subNodes().put(_key_, subNodesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), subNodesP));
            },
            addAllSubNodes: function (subNodesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = subNodesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__subNodes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), subNodesP));
            },
            removeSubNodes: function (subNodesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__subNodes().size() !== 0 && this.get__subNodes().containsKey((subNodesP != null ? subNodesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__subNodes().remove((subNodesP != null ? subNodesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), subNodesP));
              }
            },
            removeAllSubNodes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_subNodes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__subNodes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createGroup();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_metaData(this.get_metaData());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionary = this.get_dictionary();
              if (subsubsubsubdictionary != null) {
                (subsubsubsubdictionary != null ? subsubsubsubdictionary : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (this.get_typeDefinition() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.get_typeDefinition()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.set_typeDefinition((tmp$2 = this.get_typeDefinition()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.get_typeDefinition());
                  if (interObj == null) {
                    throw new Error('Non contained typeDefinition from Group : ' + this.get_typeDefinition());
                  }
                  clonedSelfObject.set_typeDefinition(interObj != null ? interObj : Kotlin.throwNPE());
                }
              }
              if (this.get_dictionary() != null) {
                var tmp$3;
                if (mutableOnly && ((tmp$3 = this.get_dictionary()) != null ? tmp$3 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$4;
                  clonedSelfObject.set_dictionary((tmp$4 = this.get_dictionary()) != null ? tmp$4 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionary());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionary from Group : ' + this.get_dictionary());
                  }
                  clonedSelfObject.set_dictionary(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$5 = this.get_subNodes().iterator();
                while (tmp$5.hasNext()) {
                  var sub = tmp$5.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addSubNodes(sub);
                  }
                   else {
                    var interObj_1 = addrs.get(sub);
                    if (interObj_1 == null) {
                      throw new Error('Non contained subNodes from Group : ' + this.get_subNodes());
                    }
                    clonedSelfObject.addSubNodes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionary = this.get_dictionary();
              if (subsubsubdictionary != null) {
                (subsubsubdictionary != null ? subsubsubdictionary : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_metaData(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_typeDefinition(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_typeDefinition(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_typeDefinition(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionary(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionary(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionary(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_subNodes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSubNodes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSubNodes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSubNodes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSubNodes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__subNodes().size() !== 0 && this.get__subNodes().containsKey(value)) {
                    var obj = this.get__subNodes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__subNodes().put(objNewKey, obj);
                    this.get__subNodes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findSubNodesByID: function (key) {
              return this.get__subNodes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_typeDefinition();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_typeDefinition();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.get_dictionary();
                  tmp$0 = obj_0 != null ? obj_0.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionary();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_subNodes()) {
                var objFound = this.findSubNodesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Group) || !Kotlin.isType(similarObj, _.org.kevoree.impl.GroupImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_metaData(), similarObjCasted.get_metaData())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionary(), similarObjCasted.get_dictionary())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionary() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionary()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_typeDefinition() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_typeDefinition()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__subNodes().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionary() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionary()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionary(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionary()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              if (!onlyContainedRef) {
                var tmp$2;
                visitor.visit((tmp$2 = this.get_typeDefinition()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$3;
                  ((tmp$3 = this.get_typeDefinition()) != null ? tmp$3 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
                {
                  var tmp$4 = this.get__subNodes().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey = tmp$4.next();
                    var tmp$5;
                    var KMFLoopEntry = (tmp$5 = this.get__subNodes().get(KMFLoopEntryKey)) != null ? tmp$5 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_subNodes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.Group';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Group) || Kotlin.isType(similarObj, _.org.kevoree.impl.GroupImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_metaData();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_metaData() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$4, tmp$5;
                attVal = (tmp$4 = this.get_typeDefinition()) != null ? tmp$4.path() : null;
                attVal2 = null;
                attVal2 = (tmp$5 = similarObjCasted != null ? similarObjCasted.get_typeDefinition() : null) != null ? tmp$5.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$8 = this.get__subNodes().values().iterator();
                  while (tmp$8.hasNext()) {
                    var elem = tmp$8.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$9 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_subNodes().iterator();
                    while (tmp$9.hasNext()) {
                      var elem_0 = tmp$9.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$10 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$10.hasNext()) {
                      var hashLoopRes = tmp$10.next();
                      var tmp$11, tmp$12;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), hashLoopRes, ((tmp$12 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$12 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getMetaData: function () {
              return this.get_metaData();
            },
            setMetaData: function (internal_p) {
              this.set_metaData(internal_p);
            },
            getTypeDefinition: function () {
              return this.get_typeDefinition();
            },
            setTypeDefinition: function (internal_p) {
              this.set_typeDefinition(internal_p);
            },
            getDictionary: function () {
              return this.get_dictionary();
            },
            setDictionary: function (internal_p) {
              this.set_dictionary(internal_p);
            },
            getSubNodes: function () {
              return this.get_subNodes();
            },
            setSubNodes: function (internal_p) {
              this.set_subNodes(internal_p);
            }
          }),
          GroupTypeImpl: Kotlin.createClass([classes.c8, classes.ci], /** @lends _.org.kevoree.impl.GroupTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$nature = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2;
              (tmp$0 = this.get_dictionaryType()) != null ? tmp$0.delete() : null;
              (tmp$1 = this.get__deployUnits()) != null ? tmp$1.clear() : null;
              this.set_dictionaryType(null);
              (tmp$2 = this.get__superTypes()) != null ? tmp$2.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$factoryBean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$bean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
            },
            get_nature: function () {
              return this.$nature;
            },
            set_nature: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$nature = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_nature(), this.get_nature()));
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$startMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$stopMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$updateMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.$dictionaryType = dictionaryTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList_2(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createGroupType();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_factoryBean(this.get_factoryBean());
              selfObjectClone.set_bean(this.get_bean());
              selfObjectClone.set_nature(this.get_nature());
              selfObjectClone.set_startMethod(this.get_startMethod());
              selfObjectClone.set_stopMethod(this.get_stopMethod());
              selfObjectClone.set_updateMethod(this.get_updateMethod());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubsubdictionaryType != null) {
                (subsubsubsubdictionaryType != null ? subsubsubsubdictionaryType : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_deployUnits().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained deployUnits from GroupType : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_dictionaryType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_dictionaryType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_dictionaryType((tmp$3 = this.get_dictionaryType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionaryType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionaryType from GroupType : ' + this.get_dictionaryType());
                  }
                  clonedSelfObject.set_dictionaryType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_superTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Error('Non contained superTypes from GroupType : ' + this.get_superTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubdictionaryType != null) {
                (subsubsubdictionaryType != null ? subsubsubdictionaryType : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_factoryBean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_bean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_nature()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_nature(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_startMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_stopMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_updateMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().put(objNewKey, obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionaryType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().put(objNewKey_0, obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_dictionaryType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.GroupType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.GroupTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_factoryBean(), similarObjCasted.get_factoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_bean(), similarObjCasted.get_bean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_nature(), similarObjCasted.get_nature())) {
                return false;
              }
              if (!Kotlin.equals(this.get_startMethod(), similarObjCasted.get_startMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_stopMethod(), similarObjCasted.get_stopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_updateMethod(), similarObjCasted.get_updateMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionaryType(), similarObjCasted.get_dictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__superTypes().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$2 = this.get__deployUnits().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey = tmp$2.next();
                    var tmp$3;
                    var KMFLoopEntry = (tmp$3 = this.get__deployUnits().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$4 = this.get__superTypes().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$4.next();
                    var tmp$5;
                    var KMFLoopEntry_0 = (tmp$5 = this.get__superTypes().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_superTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.GroupType';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.GroupType) || Kotlin.isType(similarObj, _.org.kevoree.impl.GroupTypeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_factoryBean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_factoryBean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_bean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_bean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_nature();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_nature() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_startMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_startMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_stopMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_stopMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$11;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_updateMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_updateMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$12;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$13;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$14 = this.get__deployUnits().values().iterator();
                  while (tmp$14.hasNext()) {
                    var elem = tmp$14.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$15 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_deployUnits().iterator();
                    while (tmp$15.hasNext()) {
                      var elem_0 = tmp$15.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$16 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$16.hasNext()) {
                      var hashLoopRes = tmp$16.next();
                      var tmp$17, tmp$18;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), hashLoopRes, ((tmp$18 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$18 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$19 = this.get__superTypes().values().iterator();
                  while (tmp$19.hasNext()) {
                    var elem_1 = tmp$19.next();
                    var elemPath_1 = elem_1.path();
                    if (elemPath_1 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_1, elem_1);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$20 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_superTypes().iterator();
                    while (tmp$20.hasNext()) {
                      var elem_2 = tmp$20.next();
                      var elemPath_2 = elem_2.path();
                      if (elemPath_2 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_2)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$21 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$21.hasNext()) {
                      var hashLoopRes_0 = tmp$21.next();
                      var tmp$22, tmp$23;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$22 = this.path()) != null ? tmp$22 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), hashLoopRes_0, ((tmp$23 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_0)) != null ? tmp$23 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getNature: function () {
              return this.get_nature();
            },
            setNature: function (internal_p) {
              this.set_nature(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            }
          }),
          InstanceImpl: Kotlin.createClass([classes.c8, classes.cj], /** @lends _.org.kevoree.impl.InstanceImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$metaData = null;
              this.$typeDefinition = null;
              this.$dictionary = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get_dictionary()) != null ? tmp$0.delete() : null;
              this.set_typeDefinition(null);
              this.set_dictionary(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_metaData: function () {
              return this.$metaData;
            },
            set_metaData: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$metaData = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_metaData(), this.get_metaData()));
            },
            get_typeDefinition: function () {
              return this.$typeDefinition;
            },
            set_typeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$typeDefinition, typeDefinitionP)) {
                this.$typeDefinition = typeDefinitionP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), typeDefinitionP));
              }
            },
            get_dictionary: function () {
              return this.$dictionary;
            },
            set_dictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionary, dictionaryP)) {
                if (this.$dictionary != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionary) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionary', null), 'dictionary');
                }
                this.$dictionary = dictionaryP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionary(), dictionaryP));
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createInstance();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_metaData(this.get_metaData());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionary = this.get_dictionary();
              if (subsubsubsubdictionary != null) {
                (subsubsubsubdictionary != null ? subsubsubsubdictionary : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (this.get_typeDefinition() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.get_typeDefinition()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.set_typeDefinition((tmp$2 = this.get_typeDefinition()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.get_typeDefinition());
                  if (interObj == null) {
                    throw new Error('Non contained typeDefinition from Instance : ' + this.get_typeDefinition());
                  }
                  clonedSelfObject.set_typeDefinition(interObj != null ? interObj : Kotlin.throwNPE());
                }
              }
              if (this.get_dictionary() != null) {
                var tmp$3;
                if (mutableOnly && ((tmp$3 = this.get_dictionary()) != null ? tmp$3 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$4;
                  clonedSelfObject.set_dictionary((tmp$4 = this.get_dictionary()) != null ? tmp$4 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionary());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionary from Instance : ' + this.get_dictionary());
                  }
                  clonedSelfObject.set_dictionary(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              var subsubsubdictionary = this.get_dictionary();
              if (subsubsubdictionary != null) {
                (subsubsubdictionary != null ? subsubsubdictionary : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_metaData(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_typeDefinition(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_typeDefinition(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_typeDefinition(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionary(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionary(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionary(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Instance) || !Kotlin.isType(similarObj, _.org.kevoree.impl.InstanceImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_metaData(), similarObjCasted.get_metaData())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionary(), similarObjCasted.get_dictionary())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionary() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionary()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_typeDefinition() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_typeDefinition()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionary() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionary()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionary(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionary()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              if (!onlyContainedRef) {
                var tmp$2;
                visitor.visit((tmp$2 = this.get_typeDefinition()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$3;
                  ((tmp$3 = this.get_typeDefinition()) != null ? tmp$3 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.Instance';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Instance) || Kotlin.isType(similarObj, _.org.kevoree.impl.InstanceImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_metaData();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_metaData() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$4, tmp$5;
                attVal = (tmp$4 = this.get_typeDefinition()) != null ? tmp$4.path() : null;
                attVal2 = null;
                attVal2 = (tmp$5 = similarObjCasted != null ? similarObjCasted.get_typeDefinition() : null) != null ? tmp$5.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getMetaData: function () {
              return this.get_metaData();
            },
            setMetaData: function (internal_p) {
              this.set_metaData(internal_p);
            },
            getTypeDefinition: function () {
              return this.get_typeDefinition();
            },
            setTypeDefinition: function (internal_p) {
              this.set_typeDefinition(internal_p);
            },
            getDictionary: function () {
              return this.get_dictionary();
            },
            setDictionary: function (internal_p) {
              this.set_dictionary(internal_p);
            }
          }),
          IntegrationPatternImpl: Kotlin.createClass([classes.c8, classes.ck], /** @lends _.org.kevoree.impl.IntegrationPatternImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$_extraFonctionalProperties = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllExtraFonctionalPropertiesCurrentlyProcessing = false;
              this.$_portTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              {
                var tmp$0 = this.get__extraFonctionalProperties().entrySet().iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1, tmp$2;
              (tmp$1 = this.get__extraFonctionalProperties()) != null ? tmp$1.clear() : null;
              (tmp$2 = this.get__portTypes()) != null ? tmp$2.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get__extraFonctionalProperties: function () {
              return this.$_extraFonctionalProperties;
            },
            get_extraFonctionalProperties: function () {
              return _.kotlin.toList_2(this.get__extraFonctionalProperties().values());
            },
            set_extraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (extraFonctionalPropertiesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__extraFonctionalProperties().values(), extraFonctionalPropertiesP)) {
                this.get__extraFonctionalProperties().clear();
                {
                  var tmp$0 = extraFonctionalPropertiesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__extraFonctionalProperties().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = extraFonctionalPropertiesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'extraFonctionalProperties', elem), 'extraFonctionalProperties');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
              }
            },
            addExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'extraFonctionalProperties', extraFonctionalPropertiesP), 'extraFonctionalProperties');
              var _key_ = (extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__extraFonctionalProperties().put(_key_, extraFonctionalPropertiesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
            },
            addAllExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = extraFonctionalPropertiesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__extraFonctionalProperties().put(_key_, el);
                }
              }
              {
                var tmp$1 = extraFonctionalPropertiesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'extraFonctionalProperties', el_0), 'extraFonctionalProperties');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
            },
            get_removeAllExtraFonctionalPropertiesCurrentlyProcessing: function () {
              return this.$removeAllExtraFonctionalPropertiesCurrentlyProcessing;
            },
            set_removeAllExtraFonctionalPropertiesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllExtraFonctionalPropertiesCurrentlyProcessing = tmp$0;
            },
            removeExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__extraFonctionalProperties().size() !== 0 && this.get__extraFonctionalProperties().containsKey((extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__extraFonctionalProperties().remove((extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).internalGetKey());
                ((extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()) != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllExtraFonctionalPropertiesCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
                }
              }
            },
            removeAllExtraFonctionalProperties: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllExtraFonctionalPropertiesCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_extraFonctionalProperties()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__extraFonctionalProperties().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), temp_els));
              this.set_removeAllExtraFonctionalPropertiesCurrentlyProcessing(false);
            },
            get__portTypes: function () {
              return this.$_portTypes;
            },
            get_portTypes: function () {
              return _.kotlin.toList_2(this.get__portTypes().values());
            },
            set_portTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (portTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__portTypes().values(), portTypesP)) {
                this.get__portTypes().clear();
                {
                  var tmp$0 = portTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__portTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
              }
            },
            addPortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__portTypes().put(_key_, portTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
            },
            addAllPortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = portTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__portTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
            },
            removePortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey((portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__portTypes().remove((portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
              }
            },
            removeAllPortTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_portTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__portTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createIntegrationPattern();
              selfObjectClone.set_name(this.get_name());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.get_extraFonctionalProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_extraFonctionalProperties().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addExtraFonctionalProperties(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained extraFonctionalProperties from IntegrationPattern : ' + this.get_extraFonctionalProperties());
                    }
                    clonedSelfObject.addExtraFonctionalProperties(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$2 = this.get_portTypes().iterator();
                while (tmp$2.hasNext()) {
                  var sub_0 = tmp$2.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addPortTypes(sub_0);
                  }
                   else {
                    var interObj_0 = addrs.get(sub_0);
                    if (interObj_0 == null) {
                      throw new Error('Non contained portTypes from IntegrationPattern : ' + this.get_portTypes());
                    }
                    clonedSelfObject.addPortTypes(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$3 = this.get_extraFonctionalProperties().iterator();
                while (tmp$3.hasNext()) {
                  var sub_1 = tmp$3.next();
                  (sub_1 != null ? sub_1 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addExtraFonctionalProperties(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllExtraFonctionalProperties(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeExtraFonctionalProperties(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllExtraFonctionalProperties();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__extraFonctionalProperties().size() !== 0 && this.get__extraFonctionalProperties().containsKey(value)) {
                    var obj = this.get__extraFonctionalProperties().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__extraFonctionalProperties().put(objNewKey, obj);
                    this.get__extraFonctionalProperties().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addPortTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllPortTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removePortTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllPortTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey(value)) {
                    var obj_0 = this.get__portTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__portTypes().put(objNewKey_0, obj_0);
                    this.get__portTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findExtraFonctionalPropertiesByID: function (key) {
              return this.get__extraFonctionalProperties().get(key);
            },
            findPortTypesByID: function (key) {
              return this.get__portTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                var objFound = this.findExtraFonctionalPropertiesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                var objFound_0 = this.findPortTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__extraFonctionalProperties().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findExtraFonctionalPropertiesByID(subElement.get_generated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.IntegrationPattern) || !Kotlin.isType(similarObj, _.org.kevoree.impl.IntegrationPatternImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (this.get_extraFonctionalProperties().size() !== similarObjCasted.get_extraFonctionalProperties().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__extraFonctionalProperties().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__portTypes().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              {
                var tmp$0 = this.get__extraFonctionalProperties().keySet().iterator();
                while (tmp$0.hasNext()) {
                  var KMFLoopEntryKey = tmp$0.next();
                  var tmp$1;
                  var KMFLoopEntry = (tmp$1 = this.get__extraFonctionalProperties().get(KMFLoopEntryKey)) != null ? tmp$1 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$2 = this.get__portTypes().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$2.next();
                    var tmp$3;
                    var KMFLoopEntry_0 = (tmp$3 = this.get__portTypes().get(KMFLoopEntryKey_0)) != null ? tmp$3 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_portTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.IntegrationPattern';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.IntegrationPattern) || Kotlin.isType(similarObj, _.org.kevoree.impl.IntegrationPatternImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$2 = this.get__portTypes().values().iterator();
                  while (tmp$2.hasNext()) {
                    var elem = tmp$2.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$3 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_portTypes().iterator();
                    while (tmp$3.hasNext()) {
                      var elem_0 = tmp$3.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$4 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$4.hasNext()) {
                      var hashLoopRes = tmp$4.next();
                      var tmp$5, tmp$6;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), hashLoopRes, ((tmp$6 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$6 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getExtraFonctionalProperties: function () {
              return this.get_extraFonctionalProperties();
            },
            setExtraFonctionalProperties: function (internal_p) {
              this.set_extraFonctionalProperties(internal_p);
            },
            getPortTypes: function () {
              return this.get_portTypes();
            },
            setPortTypes: function (internal_p) {
              this.set_portTypes(internal_p);
            }
          }),
          LifeCycleTypeDefinitionImpl: Kotlin.createClass([classes.c8, classes.cm], /** @lends _.org.kevoree.impl.LifeCycleTypeDefinitionImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$nature = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2;
              (tmp$0 = this.get_dictionaryType()) != null ? tmp$0.delete() : null;
              (tmp$1 = this.get__deployUnits()) != null ? tmp$1.clear() : null;
              this.set_dictionaryType(null);
              (tmp$2 = this.get__superTypes()) != null ? tmp$2.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$factoryBean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$bean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
            },
            get_nature: function () {
              return this.$nature;
            },
            set_nature: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$nature = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_nature(), this.get_nature()));
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$startMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$stopMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$updateMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.$dictionaryType = dictionaryTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList_2(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createLifeCycleTypeDefinition();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_factoryBean(this.get_factoryBean());
              selfObjectClone.set_bean(this.get_bean());
              selfObjectClone.set_nature(this.get_nature());
              selfObjectClone.set_startMethod(this.get_startMethod());
              selfObjectClone.set_stopMethod(this.get_stopMethod());
              selfObjectClone.set_updateMethod(this.get_updateMethod());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubsubdictionaryType != null) {
                (subsubsubsubdictionaryType != null ? subsubsubsubdictionaryType : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_deployUnits().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained deployUnits from LifeCycleTypeDefinition : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_dictionaryType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_dictionaryType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_dictionaryType((tmp$3 = this.get_dictionaryType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionaryType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionaryType from LifeCycleTypeDefinition : ' + this.get_dictionaryType());
                  }
                  clonedSelfObject.set_dictionaryType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_superTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Error('Non contained superTypes from LifeCycleTypeDefinition : ' + this.get_superTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubdictionaryType != null) {
                (subsubsubdictionaryType != null ? subsubsubdictionaryType : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_factoryBean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_bean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_nature()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_nature(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_startMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_stopMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_updateMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().put(objNewKey, obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionaryType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().put(objNewKey_0, obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_dictionaryType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.LifeCycleTypeDefinition) || !Kotlin.isType(similarObj, _.org.kevoree.impl.LifeCycleTypeDefinitionImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_factoryBean(), similarObjCasted.get_factoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_bean(), similarObjCasted.get_bean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_nature(), similarObjCasted.get_nature())) {
                return false;
              }
              if (!Kotlin.equals(this.get_startMethod(), similarObjCasted.get_startMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_stopMethod(), similarObjCasted.get_stopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_updateMethod(), similarObjCasted.get_updateMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionaryType(), similarObjCasted.get_dictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__superTypes().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$2 = this.get__deployUnits().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey = tmp$2.next();
                    var tmp$3;
                    var KMFLoopEntry = (tmp$3 = this.get__deployUnits().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$4 = this.get__superTypes().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$4.next();
                    var tmp$5;
                    var KMFLoopEntry_0 = (tmp$5 = this.get__superTypes().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_superTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.LifeCycleTypeDefinition';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.LifeCycleTypeDefinition) || Kotlin.isType(similarObj, _.org.kevoree.impl.LifeCycleTypeDefinitionImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_factoryBean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_factoryBean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_bean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_bean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_nature();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_nature() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_startMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_startMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_stopMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_stopMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$11;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_updateMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_updateMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$12;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$13;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$14 = this.get__deployUnits().values().iterator();
                  while (tmp$14.hasNext()) {
                    var elem = tmp$14.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$15 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_deployUnits().iterator();
                    while (tmp$15.hasNext()) {
                      var elem_0 = tmp$15.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$16 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$16.hasNext()) {
                      var hashLoopRes = tmp$16.next();
                      var tmp$17, tmp$18;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), hashLoopRes, ((tmp$18 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$18 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$19 = this.get__superTypes().values().iterator();
                  while (tmp$19.hasNext()) {
                    var elem_1 = tmp$19.next();
                    var elemPath_1 = elem_1.path();
                    if (elemPath_1 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_1, elem_1);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$20 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_superTypes().iterator();
                    while (tmp$20.hasNext()) {
                      var elem_2 = tmp$20.next();
                      var elemPath_2 = elem_2.path();
                      if (elemPath_2 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_2)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$21 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$21.hasNext()) {
                      var hashLoopRes_0 = tmp$21.next();
                      var tmp$22, tmp$23;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$22 = this.path()) != null ? tmp$22 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), hashLoopRes_0, ((tmp$23 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_0)) != null ? tmp$23 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getNature: function () {
              return this.get_nature();
            },
            setNature: function (internal_p) {
              this.set_nature(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            }
          }),
          MBindingImpl: Kotlin.createClass([classes.c8, classes.co], /** @lends _.org.kevoree.impl.MBindingImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$port = null;
              this.$hub = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              this.set_port(null);
              this.set_hub(null);
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get_port: function () {
              return this.$port;
            },
            set_port: function (portP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$port, portP)) {
                if (this.$port != null) {
                  var tmp$0;
                  (((tmp$0 = this.$port) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).noOpposite_removeBindings(this);
                }
                if (portP != null) {
                  (portP != null ? portP : Kotlin.throwNPE()).noOpposite_addBindings(this);
                }
                this.$port = portP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_port(), portP));
              }
            },
            noOpposite_port: function (portP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$port, portP)) {
                this.$port = portP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_port(), portP));
              }
               else {
                if (this.get_port() != null) {
                  var tmp$0;
                  (((tmp$0 = this.get_port()) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).noOpposite_removeBindings(this);
                }
              }
            },
            get_hub: function () {
              return this.$hub;
            },
            set_hub: function (hubP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$hub, hubP)) {
                if (this.$hub != null) {
                  var tmp$0;
                  (((tmp$0 = this.$hub) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).noOpposite_removeBindings(this);
                }
                if (hubP != null) {
                  (hubP != null ? hubP : Kotlin.throwNPE()).noOpposite_addBindings(this);
                }
                this.$hub = hubP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hub(), hubP));
              }
            },
            noOpposite_hub: function (hubP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$hub, hubP)) {
                this.$hub = hubP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hub(), hubP));
              }
               else {
                if (this.get_hub() != null) {
                  var tmp$0;
                  (((tmp$0 = this.get_hub()) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).noOpposite_removeBindings(this);
                }
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createMBinding();
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (this.get_port() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.get_port()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.noOpposite_port((tmp$2 = this.get_port()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.get_port());
                  if (interObj == null) {
                    throw new Error('Non contained port from MBinding : ' + this.get_port());
                  }
                  clonedSelfObject.noOpposite_port(interObj != null ? interObj : Kotlin.throwNPE());
                }
              }
              if (this.get_hub() != null) {
                var tmp$3;
                if (mutableOnly && ((tmp$3 = this.get_hub()) != null ? tmp$3 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$4;
                  clonedSelfObject.noOpposite_hub((tmp$4 = this.get_hub()) != null ? tmp$4 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_hub());
                  if (interObj_0 == null) {
                    throw new Error('Non contained hub from MBinding : ' + this.get_hub());
                  }
                  clonedSelfObject.noOpposite_hub(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_port()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_port(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_port(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_port(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_hub()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_hub(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_hub(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_hub(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.MBinding) || !Kotlin.isType(similarObj, _.org.kevoree.impl.MBindingImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_port() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_port()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              if (this.get_hub() != null) {
                var tmp$1;
                result.add((tmp$1 = this.get_hub()) != null ? tmp$1 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.MBinding';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.MBinding) || Kotlin.isType(similarObj, _.org.kevoree.impl.MBindingImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$2, tmp$3, tmp$6, tmp$7;
                attVal = (tmp$2 = this.get_port()) != null ? tmp$2.path() : null;
                attVal2 = null;
                attVal2 = (tmp$3 = similarObjCasted != null ? similarObjCasted.get_port() : null) != null ? tmp$3.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_port(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_port(), attVal2String, null, null));
                  }
                }
                attVal = null;
                attVal = (tmp$6 = this.get_hub()) != null ? tmp$6.path() : null;
                attVal2 = null;
                attVal2 = (tmp$7 = similarObjCasted != null ? similarObjCasted.get_hub() : null) != null ? tmp$7.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_hub(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_hub(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getPort: function () {
              return this.get_port();
            },
            setPort: function (internal_p) {
              this.set_port(internal_p);
            },
            getHub: function () {
              return this.get_hub();
            },
            setHub: function (internal_p) {
              this.set_hub(internal_p);
            }
          }),
          MessagePortTypeImpl: Kotlin.createClass([classes.c8, classes.cp], /** @lends _.org.kevoree.impl.MessagePortTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$nature = null;
              this.$synchrone = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_filters = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2, tmp$3;
              (tmp$0 = this.get_dictionaryType()) != null ? tmp$0.delete() : null;
              (tmp$1 = this.get__deployUnits()) != null ? tmp$1.clear() : null;
              this.set_dictionaryType(null);
              (tmp$2 = this.get__superTypes()) != null ? tmp$2.clear() : null;
              (tmp$3 = this.get__filters()) != null ? tmp$3.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$factoryBean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$bean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
            },
            get_nature: function () {
              return this.$nature;
            },
            set_nature: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$nature = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_nature(), this.get_nature()));
            },
            get_synchrone: function () {
              return this.$synchrone;
            },
            set_synchrone: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$synchrone = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_synchrone(), this.get_synchrone()));
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.$dictionaryType = dictionaryTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList_2(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
            },
            get__filters: function () {
              return this.$_filters;
            },
            get_filters: function () {
              return _.kotlin.toList_2(this.get__filters().values());
            },
            set_filters: function (filtersP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (filtersP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__filters().values(), filtersP)) {
                this.get__filters().clear();
                {
                  var tmp$0 = filtersP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__filters().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_filters(), filtersP));
              }
            },
            addFilters: function (filtersP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (filtersP != null ? filtersP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__filters().put(_key_, filtersP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_filters(), filtersP));
            },
            addAllFilters: function (filtersP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = filtersP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__filters().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_filters(), filtersP));
            },
            removeFilters: function (filtersP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__filters().size() !== 0 && this.get__filters().containsKey((filtersP != null ? filtersP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__filters().remove((filtersP != null ? filtersP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_filters(), filtersP));
              }
            },
            removeAllFilters: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_filters()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__filters().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_filters(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createMessagePortType();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_factoryBean(this.get_factoryBean());
              selfObjectClone.set_bean(this.get_bean());
              selfObjectClone.set_nature(this.get_nature());
              selfObjectClone.set_synchrone(this.get_synchrone());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubsubdictionaryType != null) {
                (subsubsubsubdictionaryType != null ? subsubsubsubdictionaryType : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_deployUnits().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained deployUnits from MessagePortType : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_dictionaryType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_dictionaryType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_dictionaryType((tmp$3 = this.get_dictionaryType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionaryType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionaryType from MessagePortType : ' + this.get_dictionaryType());
                  }
                  clonedSelfObject.set_dictionaryType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_superTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Error('Non contained superTypes from MessagePortType : ' + this.get_superTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$5 = this.get_filters().iterator();
                while (tmp$5.hasNext()) {
                  var sub_1 = tmp$5.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addFilters(sub_1);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_1);
                    if (interObj_2 == null) {
                      throw new Error('Non contained filters from MessagePortType : ' + this.get_filters());
                    }
                    clonedSelfObject.addFilters(interObj_2 != null ? interObj_2 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubdictionaryType != null) {
                (subsubsubdictionaryType != null ? subsubsubdictionaryType : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_factoryBean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_bean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_nature()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_nature(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_synchrone()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_synchrone(Kotlin.equals('true', value) || Kotlin.equals(true, value));
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().put(objNewKey, obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionaryType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().put(objNewKey_0, obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_filters()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addFilters(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllFilters(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeFilters(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllFilters();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__filters().size() !== 0 && this.get__filters().containsKey(value)) {
                    var obj_1 = this.get__filters().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__filters().put(objNewKey_1, obj_1);
                    this.get__filters().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findFiltersByID: function (key) {
              return this.get__filters().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_dictionaryType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_filters()) {
                var objFound_1 = this.findFiltersByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.MessagePortType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.MessagePortTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_factoryBean(), similarObjCasted.get_factoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_bean(), similarObjCasted.get_bean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_nature(), similarObjCasted.get_nature())) {
                return false;
              }
              if (!Kotlin.equals(this.get_synchrone(), similarObjCasted.get_synchrone())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionaryType(), similarObjCasted.get_dictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__superTypes().values());
              result.addAll(this.get__filters().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$2 = this.get__deployUnits().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey = tmp$2.next();
                    var tmp$3;
                    var KMFLoopEntry = (tmp$3 = this.get__deployUnits().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$4 = this.get__superTypes().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$4.next();
                    var tmp$5;
                    var KMFLoopEntry_0 = (tmp$5 = this.get__superTypes().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_superTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$6 = this.get__filters().keySet().iterator();
                  while (tmp$6.hasNext()) {
                    var KMFLoopEntryKey_1 = tmp$6.next();
                    var tmp$7;
                    var KMFLoopEntry_1 = (tmp$7 = this.get__filters().get(KMFLoopEntryKey_1)) != null ? tmp$7 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_1, _.org.kevoree.util.Constants.get_Ref_filters(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_1.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.MessagePortType';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.MessagePortType) || Kotlin.isType(similarObj, _.org.kevoree.impl.MessagePortTypeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_factoryBean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_factoryBean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_bean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_bean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_nature();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_nature() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_synchrone();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_synchrone() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$10 = this.get__deployUnits().values().iterator();
                  while (tmp$10.hasNext()) {
                    var elem = tmp$10.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$11 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_deployUnits().iterator();
                    while (tmp$11.hasNext()) {
                      var elem_0 = tmp$11.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$12 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$12.hasNext()) {
                      var hashLoopRes = tmp$12.next();
                      var tmp$13, tmp$14;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), hashLoopRes, ((tmp$14 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$14 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$15 = this.get__superTypes().values().iterator();
                  while (tmp$15.hasNext()) {
                    var elem_1 = tmp$15.next();
                    var elemPath_1 = elem_1.path();
                    if (elemPath_1 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_1, elem_1);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$16 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_superTypes().iterator();
                    while (tmp$16.hasNext()) {
                      var elem_2 = tmp$16.next();
                      var elemPath_2 = elem_2.path();
                      if (elemPath_2 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_2)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$17 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$17.hasNext()) {
                      var hashLoopRes_0 = tmp$17.next();
                      var tmp$18, tmp$19;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$18 = this.path()) != null ? tmp$18 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), hashLoopRes_0, ((tmp$19 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_0)) != null ? tmp$19 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$20 = this.get__filters().values().iterator();
                  while (tmp$20.hasNext()) {
                    var elem_3 = tmp$20.next();
                    var elemPath_3 = elem_3.path();
                    if (elemPath_3 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_3, elem_3);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$21 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_filters().iterator();
                    while (tmp$21.hasNext()) {
                      var elem_4 = tmp$21.next();
                      var elemPath_4 = elem_4.path();
                      if (elemPath_4 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_4)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_4, elem_4);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_4, elem_4);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$22 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$22.hasNext()) {
                      var hashLoopRes_1 = tmp$22.next();
                      var tmp$23, tmp$24;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$23 = this.path()) != null ? tmp$23 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_filters(), hashLoopRes_1, ((tmp$24 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_1)) != null ? tmp$24 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getNature: function () {
              return this.get_nature();
            },
            setNature: function (internal_p) {
              this.set_nature(internal_p);
            },
            getSynchrone: function () {
              return this.get_synchrone();
            },
            setSynchrone: function (internal_p) {
              this.set_synchrone(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            },
            getFilters: function () {
              return this.get_filters();
            },
            setFilters: function (internal_p) {
              this.set_filters(internal_p);
            }
          }),
          NamedElementImpl: Kotlin.createClass([classes.c8, classes.c12], /** @lends _.org.kevoree.impl.NamedElementImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNamedElement();
              selfObjectClone.set_name(this.get_name());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.NamedElement) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NamedElementImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.NamedElement';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.NamedElement) || Kotlin.isType(similarObj, _.org.kevoree.impl.NamedElementImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            }
          }),
          NamespaceImpl: Kotlin.createClass([classes.c8, classes.c13], /** @lends _.org.kevoree.impl.NamespaceImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$_childs = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllChildsCurrentlyProcessing = false;
              this.$parent = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              {
                var tmp$0 = this.get__childs().entrySet().iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1;
              (tmp$1 = this.get__childs()) != null ? tmp$1.clear() : null;
              this.set_parent(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get__childs: function () {
              return this.$_childs;
            },
            get_childs: function () {
              return _.kotlin.toList_2(this.get__childs().values());
            },
            set_childs: function (childsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (childsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__childs().values(), childsP)) {
                this.get__childs().clear();
                {
                  var tmp$0 = childsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__childs().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = childsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'childs', elem), 'childs');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
              }
            },
            addChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (childsP != null ? childsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'childs', childsP), 'childs');
              var _key_ = (childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__childs().put(_key_, childsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
            },
            addAllChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = childsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__childs().put(_key_, el);
                }
              }
              {
                var tmp$1 = childsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'childs', el_0), 'childs');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
            },
            get_removeAllChildsCurrentlyProcessing: function () {
              return this.$removeAllChildsCurrentlyProcessing;
            },
            set_removeAllChildsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllChildsCurrentlyProcessing = tmp$0;
            },
            removeChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__childs().size() !== 0 && this.get__childs().containsKey((childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__childs().remove((childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey());
                ((childsP != null ? childsP : Kotlin.throwNPE()) != null ? childsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllChildsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
                }
              }
            },
            removeAllChilds: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllChildsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_childs()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__childs().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_childs(), temp_els));
              this.set_removeAllChildsCurrentlyProcessing(false);
            },
            get_parent: function () {
              return this.$parent;
            },
            set_parent: function (parentP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$parent, parentP)) {
                this.$parent = parentP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_parent(), parentP));
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNamespace();
              selfObjectClone.set_name(this.get_name());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.get_childs().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_childs().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addChilds(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained childs from Namespace : ' + this.get_childs());
                    }
                    clonedSelfObject.addChilds(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_parent() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_parent()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_parent((tmp$3 = this.get_parent()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_parent());
                  if (interObj_0 == null) {
                    throw new Error('Non contained parent from Namespace : ' + this.get_parent());
                  }
                  clonedSelfObject.set_parent(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_childs().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addChilds(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllChilds(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeChilds(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllChilds();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__childs().size() !== 0 && this.get__childs().containsKey(value)) {
                    var obj = this.get__childs().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__childs().put(objNewKey, obj);
                    this.get__childs().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_parent()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_parent(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_parent(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_parent(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findChildsByID: function (key) {
              return this.get__childs().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                var objFound = this.findChildsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_parent()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_parent();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_parent();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__childs().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findChildsByID(subElement.get_name());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Namespace) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NamespaceImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (this.get_childs().size() !== similarObjCasted.get_childs().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__childs().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_parent() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_parent()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              {
                var tmp$0 = this.get__childs().keySet().iterator();
                while (tmp$0.hasNext()) {
                  var KMFLoopEntryKey = tmp$0.next();
                  var tmp$1;
                  var KMFLoopEntry = (tmp$1 = this.get__childs().get(KMFLoopEntryKey)) != null ? tmp$1 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_childs(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                var tmp$2;
                visitor.visit((tmp$2 = this.get_parent()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_parent(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$3;
                  ((tmp$3 = this.get_parent()) != null ? tmp$3 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.Namespace';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Namespace) || Kotlin.isType(similarObj, _.org.kevoree.impl.NamespaceImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$2, tmp$3;
                attVal = (tmp$2 = this.get_parent()) != null ? tmp$2.path() : null;
                attVal2 = null;
                attVal2 = (tmp$3 = similarObjCasted != null ? similarObjCasted.get_parent() : null) != null ? tmp$3.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_parent(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_parent(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getChilds: function () {
              return this.get_childs();
            },
            setChilds: function (internal_p) {
              this.set_childs(internal_p);
            },
            getParent: function () {
              return this.get_parent();
            },
            setParent: function (internal_p) {
              this.set_parent(internal_p);
            }
          }),
          NetworkPropertyImpl: Kotlin.createClass([classes.c8, classes.c14], /** @lends _.org.kevoree.impl.NetworkPropertyImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$value = null;
              this.$lastCheck = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_value: function () {
              return this.$value;
            },
            set_value: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$value = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_value(), this.get_value()));
            },
            get_lastCheck: function () {
              return this.$lastCheck;
            },
            set_lastCheck: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$lastCheck = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), this.get_lastCheck()));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNetworkProperty();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_value(this.get_value());
              selfObjectClone.set_lastCheck(this.get_lastCheck());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_value()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_value(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lastCheck()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_lastCheck(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.NetworkProperty) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NetworkPropertyImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_value(), similarObjCasted.get_value())) {
                return false;
              }
              if (!Kotlin.equals(this.get_lastCheck(), similarObjCasted.get_lastCheck())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.NetworkProperty';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.NetworkProperty) || Kotlin.isType(similarObj, _.org.kevoree.impl.NetworkPropertyImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_value();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_value() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_value(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_value(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_lastCheck();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_lastCheck() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getValue: function () {
              return this.get_value();
            },
            setValue: function (internal_p) {
              this.set_value(internal_p);
            },
            getLastCheck: function () {
              return this.get_lastCheck();
            },
            setLastCheck: function (internal_p) {
              this.set_lastCheck(internal_p);
            }
          }),
          NodeLinkImpl: Kotlin.createClass([classes.c8, classes.c15], /** @lends _.org.kevoree.impl.NodeLinkImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$networkType = null;
              this.$estimatedRate = null;
              this.$lastCheck = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_networkProperties = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllNetworkPropertiesCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              {
                var tmp$0 = this.get__networkProperties().entrySet().iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1;
              (tmp$1 = this.get__networkProperties()) != null ? tmp$1.clear() : null;
            },
            get_networkType: function () {
              return this.$networkType;
            },
            set_networkType: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$networkType = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_networkType(), this.get_networkType()));
            },
            get_estimatedRate: function () {
              return this.$estimatedRate;
            },
            set_estimatedRate: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$estimatedRate = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_estimatedRate(), this.get_estimatedRate()));
            },
            get_lastCheck: function () {
              return this.$lastCheck;
            },
            set_lastCheck: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$lastCheck = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), this.get_lastCheck()));
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get__networkProperties: function () {
              return this.$_networkProperties;
            },
            get_networkProperties: function () {
              return _.kotlin.toList_2(this.get__networkProperties().values());
            },
            set_networkProperties: function (networkPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (networkPropertiesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__networkProperties().values(), networkPropertiesP)) {
                this.get__networkProperties().clear();
                {
                  var tmp$0 = networkPropertiesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__networkProperties().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = networkPropertiesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'networkProperties', elem), 'networkProperties');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), networkPropertiesP));
              }
            },
            addNetworkProperties: function (networkPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'networkProperties', networkPropertiesP), 'networkProperties');
              var _key_ = (networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__networkProperties().put(_key_, networkPropertiesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), networkPropertiesP));
            },
            addAllNetworkProperties: function (networkPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = networkPropertiesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__networkProperties().put(_key_, el);
                }
              }
              {
                var tmp$1 = networkPropertiesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'networkProperties', el_0), 'networkProperties');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), networkPropertiesP));
            },
            get_removeAllNetworkPropertiesCurrentlyProcessing: function () {
              return this.$removeAllNetworkPropertiesCurrentlyProcessing;
            },
            set_removeAllNetworkPropertiesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllNetworkPropertiesCurrentlyProcessing = tmp$0;
            },
            removeNetworkProperties: function (networkPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__networkProperties().size() !== 0 && this.get__networkProperties().containsKey((networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__networkProperties().remove((networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).internalGetKey());
                ((networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()) != null ? networkPropertiesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllNetworkPropertiesCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), networkPropertiesP));
                }
              }
            },
            removeAllNetworkProperties: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllNetworkPropertiesCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_networkProperties()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__networkProperties().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), temp_els));
              this.set_removeAllNetworkPropertiesCurrentlyProcessing(false);
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNodeLink();
              selfObjectClone.set_networkType(this.get_networkType());
              selfObjectClone.set_estimatedRate(this.get_estimatedRate());
              selfObjectClone.set_lastCheck(this.get_lastCheck());
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.get_networkProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_networkProperties().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addNetworkProperties(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained networkProperties from NodeLink : ' + this.get_networkProperties());
                    }
                    clonedSelfObject.addNetworkProperties(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$2 = this.get_networkProperties().iterator();
                while (tmp$2.hasNext()) {
                  var sub_0 = tmp$2.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_networkType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_networkType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_estimatedRate()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_estimatedRate(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lastCheck()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_lastCheck(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_networkProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addNetworkProperties(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllNetworkProperties(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeNetworkProperties(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllNetworkProperties();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__networkProperties().size() !== 0 && this.get__networkProperties().containsKey(value)) {
                    var obj = this.get__networkProperties().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__networkProperties().put(objNewKey, obj);
                    this.get__networkProperties().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findNetworkPropertiesByID: function (key) {
              return this.get__networkProperties().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_networkProperties();
              var optionalDetected = firstSepIndex !== 17;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, query.length);
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0 = query;
              var tmp$1;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = relationName.length;
              }
              var subquery = tmp$0.substring(tmp$1 + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_networkProperties()) {
                var objFound = this.findNetworkPropertiesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__networkProperties().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findNetworkPropertiesByID(subElement.get_name());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.NodeLink) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NodeLinkImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_networkType(), similarObjCasted.get_networkType())) {
                return false;
              }
              if (this.get_estimatedRate() !== similarObjCasted.get_estimatedRate()) {
                return false;
              }
              if (!Kotlin.equals(this.get_lastCheck(), similarObjCasted.get_lastCheck())) {
                return false;
              }
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              if (this.get_networkProperties().size() !== similarObjCasted.get_networkProperties().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__networkProperties().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              {
                var tmp$0 = this.get__networkProperties().keySet().iterator();
                while (tmp$0.hasNext()) {
                  var KMFLoopEntryKey = tmp$0.next();
                  var tmp$1;
                  var KMFLoopEntry = (tmp$1 = this.get__networkProperties().get(KMFLoopEntryKey)) != null ? tmp$1 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_networkProperties(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.NodeLink';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.NodeLink) || Kotlin.isType(similarObj, _.org.kevoree.impl.NodeLinkImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_networkType();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_networkType() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_networkType(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_networkType(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_estimatedRate();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_estimatedRate() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_estimatedRate(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_estimatedRate(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_lastCheck();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_lastCheck() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
              }
              return traces;
            },
            getNetworkType: function () {
              return this.get_networkType();
            },
            setNetworkType: function (internal_p) {
              this.set_networkType(internal_p);
            },
            getEstimatedRate: function () {
              return this.get_estimatedRate();
            },
            setEstimatedRate: function (internal_p) {
              this.set_estimatedRate(internal_p);
            },
            getLastCheck: function () {
              return this.get_lastCheck();
            },
            setLastCheck: function (internal_p) {
              this.set_lastCheck(internal_p);
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getNetworkProperties: function () {
              return this.get_networkProperties();
            },
            setNetworkProperties: function (internal_p) {
              this.set_networkProperties(internal_p);
            }
          }),
          NodeNetworkImpl: Kotlin.createClass([classes.c8, classes.c16], /** @lends _.org.kevoree.impl.NodeNetworkImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_link = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllLinkCurrentlyProcessing = false;
              this.$initBy = null;
              this.$target = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              {
                var tmp$0 = this.get__link().entrySet().iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1;
              (tmp$1 = this.get__link()) != null ? tmp$1.clear() : null;
              this.set_initBy(null);
              this.set_target(null);
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get__link: function () {
              return this.$_link;
            },
            get_link: function () {
              return _.kotlin.toList_2(this.get__link().values());
            },
            set_link: function (linkP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (linkP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__link().values(), linkP)) {
                this.get__link().clear();
                {
                  var tmp$0 = linkP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__link().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = linkP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'link', elem), 'link');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_link(), linkP));
              }
            },
            addLink: function (linkP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (linkP != null ? linkP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'link', linkP), 'link');
              var _key_ = (linkP != null ? linkP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__link().put(_key_, linkP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_link(), linkP));
            },
            addAllLink: function (linkP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = linkP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__link().put(_key_, el);
                }
              }
              {
                var tmp$1 = linkP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'link', el_0), 'link');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_link(), linkP));
            },
            get_removeAllLinkCurrentlyProcessing: function () {
              return this.$removeAllLinkCurrentlyProcessing;
            },
            set_removeAllLinkCurrentlyProcessing: function (tmp$0) {
              this.$removeAllLinkCurrentlyProcessing = tmp$0;
            },
            removeLink: function (linkP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__link().size() !== 0 && this.get__link().containsKey((linkP != null ? linkP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__link().remove((linkP != null ? linkP : Kotlin.throwNPE()).internalGetKey());
                ((linkP != null ? linkP : Kotlin.throwNPE()) != null ? linkP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllLinkCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_link(), linkP));
                }
              }
            },
            removeAllLink: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllLinkCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_link()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__link().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_link(), temp_els));
              this.set_removeAllLinkCurrentlyProcessing(false);
            },
            get_initBy: function () {
              return this.$initBy;
            },
            set_initBy: function (initByP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$initBy, initByP)) {
                this.$initBy = initByP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_initBy(), initByP));
              }
            },
            get_target: function () {
              return this.$target;
            },
            set_target: function (targetP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$target, targetP)) {
                this.$target = targetP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_target(), targetP));
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNodeNetwork();
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.get_link().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_link().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addLink(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained link from NodeNetwork : ' + this.get_link());
                    }
                    clonedSelfObject.addLink(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_initBy() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_initBy()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_initBy((tmp$3 = this.get_initBy()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_initBy());
                  if (interObj_0 == null) {
                    throw new Error('Non contained initBy from NodeNetwork : ' + this.get_initBy());
                  }
                  clonedSelfObject.set_initBy(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              if (this.get_target() != null) {
                var tmp$4;
                if (mutableOnly && ((tmp$4 = this.get_target()) != null ? tmp$4 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$5;
                  clonedSelfObject.set_target((tmp$5 = this.get_target()) != null ? tmp$5 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_1 = addrs.get(this.get_target());
                  if (interObj_1 == null) {
                    throw new Error('Non contained target from NodeNetwork : ' + this.get_target());
                  }
                  clonedSelfObject.set_target(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$6 = this.get_link().iterator();
                while (tmp$6.hasNext()) {
                  var sub_0 = tmp$6.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_link()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addLink(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllLink(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeLink(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllLink();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__link().size() !== 0 && this.get__link().containsKey(value)) {
                    var obj = this.get__link().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__link().put(objNewKey, obj);
                    this.get__link().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_initBy()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_initBy(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_initBy(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_initBy(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_target()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_target(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_target(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_target(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findLinkByID: function (key) {
              return this.get__link().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_link()) {
                var objFound = this.findLinkByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_initBy()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_initBy();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_initBy();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_target()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.get_target();
                  tmp$0 = obj_0 != null ? obj_0.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_target();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__link().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findLinkByID(subElement.get_generated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.NodeNetwork) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NodeNetworkImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              if (this.get_link().size() !== similarObjCasted.get_link().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__link().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_initBy() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_initBy()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              if (this.get_target() != null) {
                var tmp$1;
                result.add((tmp$1 = this.get_target()) != null ? tmp$1 : Kotlin.throwNPE());
              }
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              {
                var tmp$0 = this.get__link().keySet().iterator();
                while (tmp$0.hasNext()) {
                  var KMFLoopEntryKey = tmp$0.next();
                  var tmp$1;
                  var KMFLoopEntry = (tmp$1 = this.get__link().get(KMFLoopEntryKey)) != null ? tmp$1 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_link(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                var tmp$2, tmp$4;
                visitor.visit((tmp$2 = this.get_initBy()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_initBy(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$3;
                  ((tmp$3 = this.get_initBy()) != null ? tmp$3 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
                visitor.visit((tmp$4 = this.get_target()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_target(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$5;
                  ((tmp$5 = this.get_target()) != null ? tmp$5 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.NodeNetwork';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.NodeNetwork) || Kotlin.isType(similarObj, _.org.kevoree.impl.NodeNetworkImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$2, tmp$3, tmp$6, tmp$7;
                attVal = (tmp$2 = this.get_initBy()) != null ? tmp$2.path() : null;
                attVal2 = null;
                attVal2 = (tmp$3 = similarObjCasted != null ? similarObjCasted.get_initBy() : null) != null ? tmp$3.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_initBy(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_initBy(), attVal2String, null, null));
                  }
                }
                attVal = null;
                attVal = (tmp$6 = this.get_target()) != null ? tmp$6.path() : null;
                attVal2 = null;
                attVal2 = (tmp$7 = similarObjCasted != null ? similarObjCasted.get_target() : null) != null ? tmp$7.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_target(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_target(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getLink: function () {
              return this.get_link();
            },
            setLink: function (internal_p) {
              this.set_link(internal_p);
            },
            getInitBy: function () {
              return this.get_initBy();
            },
            setInitBy: function (internal_p) {
              this.set_initBy(internal_p);
            },
            getTarget: function () {
              return this.get_target();
            },
            setTarget: function (internal_p) {
              this.set_target(internal_p);
            }
          }),
          NodeTypeImpl: Kotlin.createClass([classes.c8, classes.c17], /** @lends _.org.kevoree.impl.NodeTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$nature = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_managedPrimitiveTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_managedPrimitiveTypeRefs = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllManagedPrimitiveTypeRefsCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$2, tmp$3, tmp$4, tmp$5;
              (tmp$0 = this.get_dictionaryType()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = this.get__managedPrimitiveTypeRefs().entrySet().iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              (tmp$2 = this.get__deployUnits()) != null ? tmp$2.clear() : null;
              this.set_dictionaryType(null);
              (tmp$3 = this.get__superTypes()) != null ? tmp$3.clear() : null;
              (tmp$4 = this.get__managedPrimitiveTypes()) != null ? tmp$4.clear() : null;
              (tmp$5 = this.get__managedPrimitiveTypeRefs()) != null ? tmp$5.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$factoryBean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$bean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
            },
            get_nature: function () {
              return this.$nature;
            },
            set_nature: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$nature = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_nature(), this.get_nature()));
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$startMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$stopMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$updateMethod = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.$dictionaryType = dictionaryTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList_2(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
            },
            get__managedPrimitiveTypes: function () {
              return this.$_managedPrimitiveTypes;
            },
            get_managedPrimitiveTypes: function () {
              return _.kotlin.toList_2(this.get__managedPrimitiveTypes().values());
            },
            set_managedPrimitiveTypes: function (managedPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (managedPrimitiveTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__managedPrimitiveTypes().values(), managedPrimitiveTypesP)) {
                this.get__managedPrimitiveTypes().clear();
                {
                  var tmp$0 = managedPrimitiveTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__managedPrimitiveTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), managedPrimitiveTypesP));
              }
            },
            addManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (managedPrimitiveTypesP != null ? managedPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__managedPrimitiveTypes().put(_key_, managedPrimitiveTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), managedPrimitiveTypesP));
            },
            addAllManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = managedPrimitiveTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__managedPrimitiveTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), managedPrimitiveTypesP));
            },
            removeManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__managedPrimitiveTypes().size() !== 0 && this.get__managedPrimitiveTypes().containsKey((managedPrimitiveTypesP != null ? managedPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__managedPrimitiveTypes().remove((managedPrimitiveTypesP != null ? managedPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), managedPrimitiveTypesP));
              }
            },
            removeAllManagedPrimitiveTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_managedPrimitiveTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__managedPrimitiveTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), temp_els));
            },
            get__managedPrimitiveTypeRefs: function () {
              return this.$_managedPrimitiveTypeRefs;
            },
            get_managedPrimitiveTypeRefs: function () {
              return _.kotlin.toList_2(this.get__managedPrimitiveTypeRefs().values());
            },
            set_managedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (managedPrimitiveTypeRefsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__managedPrimitiveTypeRefs().values(), managedPrimitiveTypeRefsP)) {
                this.get__managedPrimitiveTypeRefs().clear();
                {
                  var tmp$0 = managedPrimitiveTypeRefsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__managedPrimitiveTypeRefs().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = managedPrimitiveTypeRefsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'managedPrimitiveTypeRefs', elem), 'managedPrimitiveTypeRefs');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), managedPrimitiveTypeRefsP));
              }
            },
            addManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (managedPrimitiveTypeRefsP != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'managedPrimitiveTypeRefs', managedPrimitiveTypeRefsP), 'managedPrimitiveTypeRefs');
              var _key_ = (managedPrimitiveTypeRefsP != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__managedPrimitiveTypeRefs().put(_key_, managedPrimitiveTypeRefsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), managedPrimitiveTypeRefsP));
            },
            addAllManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = managedPrimitiveTypeRefsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__managedPrimitiveTypeRefs().put(_key_, el);
                }
              }
              {
                var tmp$1 = managedPrimitiveTypeRefsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'managedPrimitiveTypeRefs', el_0), 'managedPrimitiveTypeRefs');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), managedPrimitiveTypeRefsP));
            },
            get_removeAllManagedPrimitiveTypeRefsCurrentlyProcessing: function () {
              return this.$removeAllManagedPrimitiveTypeRefsCurrentlyProcessing;
            },
            set_removeAllManagedPrimitiveTypeRefsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllManagedPrimitiveTypeRefsCurrentlyProcessing = tmp$0;
            },
            removeManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__managedPrimitiveTypeRefs().size() !== 0 && this.get__managedPrimitiveTypeRefs().containsKey((managedPrimitiveTypeRefsP != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__managedPrimitiveTypeRefs().remove((managedPrimitiveTypeRefsP != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()).internalGetKey());
                ((managedPrimitiveTypeRefsP != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()) != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllManagedPrimitiveTypeRefsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), managedPrimitiveTypeRefsP));
                }
              }
            },
            removeAllManagedPrimitiveTypeRefs: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllManagedPrimitiveTypeRefsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_managedPrimitiveTypeRefs()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__managedPrimitiveTypeRefs().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), temp_els));
              this.set_removeAllManagedPrimitiveTypeRefsCurrentlyProcessing(false);
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNodeType();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_factoryBean(this.get_factoryBean());
              selfObjectClone.set_bean(this.get_bean());
              selfObjectClone.set_nature(this.get_nature());
              selfObjectClone.set_startMethod(this.get_startMethod());
              selfObjectClone.set_stopMethod(this.get_stopMethod());
              selfObjectClone.set_updateMethod(this.get_updateMethod());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubsubdictionaryType != null) {
                (subsubsubsubdictionaryType != null ? subsubsubsubdictionaryType : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.get_managedPrimitiveTypeRefs().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_deployUnits().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained deployUnits from NodeType : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_dictionaryType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_dictionaryType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_dictionaryType((tmp$3 = this.get_dictionaryType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionaryType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionaryType from NodeType : ' + this.get_dictionaryType());
                  }
                  clonedSelfObject.set_dictionaryType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_superTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Error('Non contained superTypes from NodeType : ' + this.get_superTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$5 = this.get_managedPrimitiveTypes().iterator();
                while (tmp$5.hasNext()) {
                  var sub_1 = tmp$5.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addManagedPrimitiveTypes(sub_1);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_1);
                    if (interObj_2 == null) {
                      throw new Error('Non contained managedPrimitiveTypes from NodeType : ' + this.get_managedPrimitiveTypes());
                    }
                    clonedSelfObject.addManagedPrimitiveTypes(interObj_2 != null ? interObj_2 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$6 = this.get_managedPrimitiveTypeRefs().iterator();
                while (tmp$6.hasNext()) {
                  var sub_2 = tmp$6.next();
                  if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                    clonedSelfObject.addManagedPrimitiveTypeRefs(sub_2);
                  }
                   else {
                    var interObj_3 = addrs.get(sub_2);
                    if (interObj_3 == null) {
                      throw new Error('Non contained managedPrimitiveTypeRefs from NodeType : ' + this.get_managedPrimitiveTypeRefs());
                    }
                    clonedSelfObject.addManagedPrimitiveTypeRefs(interObj_3 != null ? interObj_3 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubdictionaryType != null) {
                (subsubsubdictionaryType != null ? subsubsubdictionaryType : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$7 = this.get_managedPrimitiveTypeRefs().iterator();
                while (tmp$7.hasNext()) {
                  var sub_3 = tmp$7.next();
                  (sub_3 != null ? sub_3 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_factoryBean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_bean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_nature()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_nature(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_startMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_stopMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_updateMethod(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().put(objNewKey, obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionaryType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().put(objNewKey_0, obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addManagedPrimitiveTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllManagedPrimitiveTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeManagedPrimitiveTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllManagedPrimitiveTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__managedPrimitiveTypes().size() !== 0 && this.get__managedPrimitiveTypes().containsKey(value)) {
                    var obj_1 = this.get__managedPrimitiveTypes().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__managedPrimitiveTypes().put(objNewKey_1, obj_1);
                    this.get__managedPrimitiveTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addManagedPrimitiveTypeRefs(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllManagedPrimitiveTypeRefs(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeManagedPrimitiveTypeRefs(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllManagedPrimitiveTypeRefs();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__managedPrimitiveTypeRefs().size() !== 0 && this.get__managedPrimitiveTypeRefs().containsKey(value)) {
                    var obj_2 = this.get__managedPrimitiveTypeRefs().get(value);
                    var objNewKey_2 = (obj_2 != null ? obj_2 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_2 == null) {
                      throw new Error('Key newed to null ' + obj_2);
                    }
                    this.get__managedPrimitiveTypeRefs().put(objNewKey_2, obj_2);
                    this.get__managedPrimitiveTypeRefs().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findManagedPrimitiveTypesByID: function (key) {
              return this.get__managedPrimitiveTypes().get(key);
            },
            findManagedPrimitiveTypeRefsByID: function (key) {
              return this.get__managedPrimitiveTypeRefs().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_dictionaryType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes()) {
                var objFound_1 = this.findManagedPrimitiveTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs()) {
                var objFound_2 = this.findManagedPrimitiveTypeRefsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_2 != null) {
                  tmp$0 = objFound_2.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_2;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__managedPrimitiveTypeRefs().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findManagedPrimitiveTypeRefsByID(subElement.get_generated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.NodeType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NodeTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_factoryBean(), similarObjCasted.get_factoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_bean(), similarObjCasted.get_bean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_nature(), similarObjCasted.get_nature())) {
                return false;
              }
              if (!Kotlin.equals(this.get_startMethod(), similarObjCasted.get_startMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_stopMethod(), similarObjCasted.get_stopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_updateMethod(), similarObjCasted.get_updateMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionaryType(), similarObjCasted.get_dictionaryType())) {
                return false;
              }
              if (this.get_managedPrimitiveTypeRefs().size() !== similarObjCasted.get_managedPrimitiveTypeRefs().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__managedPrimitiveTypeRefs().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__superTypes().values());
              result.addAll(this.get__managedPrimitiveTypes().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              {
                var tmp$2 = this.get__managedPrimitiveTypeRefs().keySet().iterator();
                while (tmp$2.hasNext()) {
                  var KMFLoopEntryKey = tmp$2.next();
                  var tmp$3;
                  var KMFLoopEntry = (tmp$3 = this.get__managedPrimitiveTypeRefs().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$4 = this.get__deployUnits().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$4.next();
                    var tmp$5;
                    var KMFLoopEntry_0 = (tmp$5 = this.get__deployUnits().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$6 = this.get__superTypes().keySet().iterator();
                  while (tmp$6.hasNext()) {
                    var KMFLoopEntryKey_1 = tmp$6.next();
                    var tmp$7;
                    var KMFLoopEntry_1 = (tmp$7 = this.get__superTypes().get(KMFLoopEntryKey_1)) != null ? tmp$7 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_1, _.org.kevoree.util.Constants.get_Ref_superTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_1.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$8 = this.get__managedPrimitiveTypes().keySet().iterator();
                  while (tmp$8.hasNext()) {
                    var KMFLoopEntryKey_2 = tmp$8.next();
                    var tmp$9;
                    var KMFLoopEntry_2 = (tmp$9 = this.get__managedPrimitiveTypes().get(KMFLoopEntryKey_2)) != null ? tmp$9 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_2, _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_2.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.NodeType';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.NodeType) || Kotlin.isType(similarObj, _.org.kevoree.impl.NodeTypeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_factoryBean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_factoryBean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_bean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_bean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_nature();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_nature() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_startMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_startMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_stopMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_stopMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$11;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_updateMethod();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_updateMethod() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$12;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$13;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$14 = this.get__deployUnits().values().iterator();
                  while (tmp$14.hasNext()) {
                    var elem = tmp$14.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$15 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_deployUnits().iterator();
                    while (tmp$15.hasNext()) {
                      var elem_0 = tmp$15.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$16 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$16.hasNext()) {
                      var hashLoopRes = tmp$16.next();
                      var tmp$17, tmp$18;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), hashLoopRes, ((tmp$18 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$18 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$19 = this.get__superTypes().values().iterator();
                  while (tmp$19.hasNext()) {
                    var elem_1 = tmp$19.next();
                    var elemPath_1 = elem_1.path();
                    if (elemPath_1 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_1, elem_1);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$20 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_superTypes().iterator();
                    while (tmp$20.hasNext()) {
                      var elem_2 = tmp$20.next();
                      var elemPath_2 = elem_2.path();
                      if (elemPath_2 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_2)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$21 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$21.hasNext()) {
                      var hashLoopRes_0 = tmp$21.next();
                      var tmp$22, tmp$23;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$22 = this.path()) != null ? tmp$22 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), hashLoopRes_0, ((tmp$23 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_0)) != null ? tmp$23 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$24 = this.get__managedPrimitiveTypes().values().iterator();
                  while (tmp$24.hasNext()) {
                    var elem_3 = tmp$24.next();
                    var elemPath_3 = elem_3.path();
                    if (elemPath_3 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_3, elem_3);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$25 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_managedPrimitiveTypes().iterator();
                    while (tmp$25.hasNext()) {
                      var elem_4 = tmp$25.next();
                      var elemPath_4 = elem_4.path();
                      if (elemPath_4 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_4)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_4, elem_4);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_4, elem_4);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$26 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$26.hasNext()) {
                      var hashLoopRes_1 = tmp$26.next();
                      var tmp$27, tmp$28;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$27 = this.path()) != null ? tmp$27 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), hashLoopRes_1, ((tmp$28 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_1)) != null ? tmp$28 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getNature: function () {
              return this.get_nature();
            },
            setNature: function (internal_p) {
              this.set_nature(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            },
            getManagedPrimitiveTypes: function () {
              return this.get_managedPrimitiveTypes();
            },
            setManagedPrimitiveTypes: function (internal_p) {
              this.set_managedPrimitiveTypes(internal_p);
            },
            getManagedPrimitiveTypeRefs: function () {
              return this.get_managedPrimitiveTypeRefs();
            },
            setManagedPrimitiveTypeRefs: function (internal_p) {
              this.set_managedPrimitiveTypeRefs(internal_p);
            }
          }),
          OperationImpl: Kotlin.createClass([classes.c8, classes.c18], /** @lends _.org.kevoree.impl.OperationImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$_parameters = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllParametersCurrentlyProcessing = false;
              this.$returnType = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              {
                var tmp$0 = this.get__parameters().entrySet().iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1;
              (tmp$1 = this.get__parameters()) != null ? tmp$1.clear() : null;
              this.set_returnType(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get__parameters: function () {
              return this.$_parameters;
            },
            get_parameters: function () {
              return _.kotlin.toList_2(this.get__parameters().values());
            },
            set_parameters: function (parametersP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (parametersP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__parameters().values(), parametersP)) {
                this.get__parameters().clear();
                {
                  var tmp$0 = parametersP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__parameters().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = parametersP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'parameters', elem), 'parameters');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_parameters(), parametersP));
              }
            },
            addParameters: function (parametersP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (parametersP != null ? parametersP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'parameters', parametersP), 'parameters');
              var _key_ = (parametersP != null ? parametersP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__parameters().put(_key_, parametersP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_parameters(), parametersP));
            },
            addAllParameters: function (parametersP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = parametersP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__parameters().put(_key_, el);
                }
              }
              {
                var tmp$1 = parametersP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'parameters', el_0), 'parameters');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_parameters(), parametersP));
            },
            get_removeAllParametersCurrentlyProcessing: function () {
              return this.$removeAllParametersCurrentlyProcessing;
            },
            set_removeAllParametersCurrentlyProcessing: function (tmp$0) {
              this.$removeAllParametersCurrentlyProcessing = tmp$0;
            },
            removeParameters: function (parametersP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__parameters().size() !== 0 && this.get__parameters().containsKey((parametersP != null ? parametersP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__parameters().remove((parametersP != null ? parametersP : Kotlin.throwNPE()).internalGetKey());
                ((parametersP != null ? parametersP : Kotlin.throwNPE()) != null ? parametersP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllParametersCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_parameters(), parametersP));
                }
              }
            },
            removeAllParameters: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllParametersCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_parameters()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__parameters().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_parameters(), temp_els));
              this.set_removeAllParametersCurrentlyProcessing(false);
            },
            get_returnType: function () {
              return this.$returnType;
            },
            set_returnType: function (returnTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$returnType, returnTypeP)) {
                this.$returnType = returnTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_returnType(), returnTypeP));
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createOperation();
              selfObjectClone.set_name(this.get_name());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.get_parameters().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_parameters().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addParameters(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained parameters from Operation : ' + this.get_parameters());
                    }
                    clonedSelfObject.addParameters(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_returnType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_returnType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_returnType((tmp$3 = this.get_returnType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_returnType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained returnType from Operation : ' + this.get_returnType());
                  }
                  clonedSelfObject.set_returnType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_parameters().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_parameters()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addParameters(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllParameters(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeParameters(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllParameters();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__parameters().size() !== 0 && this.get__parameters().containsKey(value)) {
                    var obj = this.get__parameters().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__parameters().put(objNewKey, obj);
                    this.get__parameters().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_returnType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_returnType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_returnType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_returnType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findParametersByID: function (key) {
              return this.get__parameters().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_parameters()) {
                var objFound = this.findParametersByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_returnType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_returnType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_returnType();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__parameters().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findParametersByID(subElement.get_name());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Operation) || !Kotlin.isType(similarObj, _.org.kevoree.impl.OperationImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (this.get_parameters().size() !== similarObjCasted.get_parameters().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__parameters().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_returnType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_returnType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              {
                var tmp$0 = this.get__parameters().keySet().iterator();
                while (tmp$0.hasNext()) {
                  var KMFLoopEntryKey = tmp$0.next();
                  var tmp$1;
                  var KMFLoopEntry = (tmp$1 = this.get__parameters().get(KMFLoopEntryKey)) != null ? tmp$1 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_parameters(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                var tmp$2;
                visitor.visit((tmp$2 = this.get_returnType()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_returnType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$3;
                  ((tmp$3 = this.get_returnType()) != null ? tmp$3 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.Operation';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Operation) || Kotlin.isType(similarObj, _.org.kevoree.impl.OperationImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$2, tmp$3;
                attVal = (tmp$2 = this.get_returnType()) != null ? tmp$2.path() : null;
                attVal2 = null;
                attVal2 = (tmp$3 = similarObjCasted != null ? similarObjCasted.get_returnType() : null) != null ? tmp$3.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_returnType(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_returnType(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getParameters: function () {
              return this.get_parameters();
            },
            setParameters: function (internal_p) {
              this.set_parameters(internal_p);
            },
            getReturnType: function () {
              return this.get_returnType();
            },
            setReturnType: function (internal_p) {
              this.set_returnType(internal_p);
            }
          }),
          ParameterImpl: Kotlin.createClass([classes.c8, classes.c19], /** @lends _.org.kevoree.impl.ParameterImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$order = null;
              this.$type = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              this.set_type(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_order: function () {
              return this.$order;
            },
            set_order: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$order = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_order(), this.get_order()));
            },
            get_type: function () {
              return this.$type;
            },
            set_type: function (typeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$type, typeP)) {
                this.$type = typeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_type(), typeP));
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createParameter();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_order(this.get_order());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (this.get_type() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.get_type()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.set_type((tmp$2 = this.get_type()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.get_type());
                  if (interObj == null) {
                    throw new Error('Non contained type from Parameter : ' + this.get_type());
                  }
                  clonedSelfObject.set_type(interObj != null ? interObj : Kotlin.throwNPE());
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_order()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_order(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_type()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_type(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_type(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_type(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Parameter) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ParameterImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (this.get_order() !== similarObjCasted.get_order()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_type() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_type()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Parameter';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Parameter) || Kotlin.isType(similarObj, _.org.kevoree.impl.ParameterImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_order();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_order() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_order(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_order(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$4, tmp$5;
                attVal = (tmp$4 = this.get_type()) != null ? tmp$4.path() : null;
                attVal2 = null;
                attVal2 = (tmp$5 = similarObjCasted != null ? similarObjCasted.get_type() : null) != null ? tmp$5.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_type(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_type(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getOrder: function () {
              return this.get_order();
            },
            setOrder: function (internal_p) {
              this.set_order(internal_p);
            },
            getType: function () {
              return this.get_type();
            },
            setType: function (internal_p) {
              this.set_type(internal_p);
            }
          }),
          PortImpl: Kotlin.createClass([classes.c8, classes.c1a], /** @lends _.org.kevoree.impl.PortImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_bindings = new Kotlin.PrimitiveHashMap(0);
              this.$portTypeRef = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__bindings()) != null ? tmp$0.clear() : null;
              this.set_portTypeRef(null);
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get__bindings: function () {
              return this.$_bindings;
            },
            get_bindings: function () {
              return _.kotlin.toList_2(this.get__bindings().values());
            },
            set_bindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (bindingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__bindings().values(), bindingsP)) {
                this.get__bindings().clear();
                {
                  var tmp$0 = bindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__bindings().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = bindingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).noOpposite_port(this);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
              }
            },
            addBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__bindings().put(_key_, bindingsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
              (bindingsP != null ? bindingsP : Kotlin.throwNPE()).noOpposite_port(this);
            },
            addAllBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = bindingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__bindings().put(_key_, el);
                }
              }
              {
                var tmp$1 = bindingsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).noOpposite_port(this);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
            },
            noOpposite_addBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__bindings().put(_key_, bindingsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
            },
            noOpposite_addAllBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = bindingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__bindings().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
            },
            removeBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__bindings().remove((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
                (bindingsP != null ? bindingsP : Kotlin.throwNPE()).noOpposite_port(null);
              }
            },
            removeAllBindings: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_bindings()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).noOpposite_port(null);
                }
              }
              this.get__bindings().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), temp_els));
            },
            noOpposite_removeBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__bindings().remove((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
              }
            },
            noOpposite_removeAllBindings: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_bindings()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__bindings().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), temp_els));
            },
            get_portTypeRef: function () {
              return this.$portTypeRef;
            },
            set_portTypeRef: function (portTypeRefP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$portTypeRef, portTypeRefP)) {
                this.$portTypeRef = portTypeRefP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypeRef(), portTypeRefP));
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createPort();
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_bindings().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.noOpposite_addBindings(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained bindings from Port : ' + this.get_bindings());
                    }
                    clonedSelfObject.noOpposite_addBindings(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_portTypeRef() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_portTypeRef()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_portTypeRef((tmp$3 = this.get_portTypeRef()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_portTypeRef());
                  if (interObj_0 == null) {
                    throw new Error('Non contained portTypeRef from Port : ' + this.get_portTypeRef());
                  }
                  clonedSelfObject.set_portTypeRef(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addBindings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllBindings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeBindings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllBindings();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey(value)) {
                    var obj = this.get__bindings().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__bindings().put(objNewKey, obj);
                    this.get__bindings().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_portTypeRef()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_portTypeRef(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_portTypeRef(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_portTypeRef(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findBindingsByID: function (key) {
              return this.get__bindings().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                var objFound = this.findBindingsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_portTypeRef()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_portTypeRef();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_portTypeRef();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Port) || !Kotlin.isType(similarObj, _.org.kevoree.impl.PortImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__bindings().values());
              if (this.get_portTypeRef() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_portTypeRef()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Port';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Port) || Kotlin.isType(similarObj, _.org.kevoree.impl.PortImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$2 = this.get__bindings().values().iterator();
                  while (tmp$2.hasNext()) {
                    var elem = tmp$2.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$3 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_bindings().iterator();
                    while (tmp$3.hasNext()) {
                      var elem_0 = tmp$3.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$4 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$4.hasNext()) {
                      var hashLoopRes = tmp$4.next();
                      var tmp$5, tmp$6;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_bindings(), hashLoopRes, ((tmp$6 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$6 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                attVal = null;
                var tmp$7, tmp$8;
                attVal = (tmp$7 = this.get_portTypeRef()) != null ? tmp$7.path() : null;
                attVal2 = null;
                attVal2 = (tmp$8 = similarObjCasted != null ? similarObjCasted.get_portTypeRef() : null) != null ? tmp$8.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_portTypeRef(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_portTypeRef(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getBindings: function () {
              return this.get_bindings();
            },
            setBindings: function (internal_p) {
              this.set_bindings(internal_p);
            },
            getPortTypeRef: function () {
              return this.get_portTypeRef();
            },
            setPortTypeRef: function (internal_p) {
              this.set_portTypeRef(internal_p);
            }
          }),
          PortTypeImpl: Kotlin.createClass([classes.c8, classes.c1b], /** @lends _.org.kevoree.impl.PortTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$nature = null;
              this.$synchrone = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2;
              (tmp$0 = this.get_dictionaryType()) != null ? tmp$0.delete() : null;
              (tmp$1 = this.get__deployUnits()) != null ? tmp$1.clear() : null;
              this.set_dictionaryType(null);
              (tmp$2 = this.get__superTypes()) != null ? tmp$2.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$factoryBean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$bean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
            },
            get_nature: function () {
              return this.$nature;
            },
            set_nature: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$nature = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_nature(), this.get_nature()));
            },
            get_synchrone: function () {
              return this.$synchrone;
            },
            set_synchrone: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$synchrone = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_synchrone(), this.get_synchrone()));
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.$dictionaryType = dictionaryTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList_2(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createPortType();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_factoryBean(this.get_factoryBean());
              selfObjectClone.set_bean(this.get_bean());
              selfObjectClone.set_nature(this.get_nature());
              selfObjectClone.set_synchrone(this.get_synchrone());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubsubdictionaryType != null) {
                (subsubsubsubdictionaryType != null ? subsubsubsubdictionaryType : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_deployUnits().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained deployUnits from PortType : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_dictionaryType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_dictionaryType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_dictionaryType((tmp$3 = this.get_dictionaryType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionaryType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionaryType from PortType : ' + this.get_dictionaryType());
                  }
                  clonedSelfObject.set_dictionaryType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_superTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Error('Non contained superTypes from PortType : ' + this.get_superTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubdictionaryType != null) {
                (subsubsubdictionaryType != null ? subsubsubdictionaryType : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_factoryBean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_bean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_nature()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_nature(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_synchrone()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_synchrone(Kotlin.equals('true', value) || Kotlin.equals(true, value));
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().put(objNewKey, obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionaryType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().put(objNewKey_0, obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_dictionaryType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.PortType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_factoryBean(), similarObjCasted.get_factoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_bean(), similarObjCasted.get_bean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_nature(), similarObjCasted.get_nature())) {
                return false;
              }
              if (!Kotlin.equals(this.get_synchrone(), similarObjCasted.get_synchrone())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionaryType(), similarObjCasted.get_dictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__superTypes().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$2 = this.get__deployUnits().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey = tmp$2.next();
                    var tmp$3;
                    var KMFLoopEntry = (tmp$3 = this.get__deployUnits().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$4 = this.get__superTypes().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$4.next();
                    var tmp$5;
                    var KMFLoopEntry_0 = (tmp$5 = this.get__superTypes().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_superTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.PortType';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.PortType) || Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_factoryBean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_factoryBean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_bean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_bean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_nature();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_nature() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_synchrone();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_synchrone() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$10 = this.get__deployUnits().values().iterator();
                  while (tmp$10.hasNext()) {
                    var elem = tmp$10.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$11 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_deployUnits().iterator();
                    while (tmp$11.hasNext()) {
                      var elem_0 = tmp$11.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$12 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$12.hasNext()) {
                      var hashLoopRes = tmp$12.next();
                      var tmp$13, tmp$14;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), hashLoopRes, ((tmp$14 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$14 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$15 = this.get__superTypes().values().iterator();
                  while (tmp$15.hasNext()) {
                    var elem_1 = tmp$15.next();
                    var elemPath_1 = elem_1.path();
                    if (elemPath_1 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_1, elem_1);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$16 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_superTypes().iterator();
                    while (tmp$16.hasNext()) {
                      var elem_2 = tmp$16.next();
                      var elemPath_2 = elem_2.path();
                      if (elemPath_2 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_2)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$17 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$17.hasNext()) {
                      var hashLoopRes_0 = tmp$17.next();
                      var tmp$18, tmp$19;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$18 = this.path()) != null ? tmp$18 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), hashLoopRes_0, ((tmp$19 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_0)) != null ? tmp$19 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getNature: function () {
              return this.get_nature();
            },
            setNature: function (internal_p) {
              this.set_nature(internal_p);
            },
            getSynchrone: function () {
              return this.get_synchrone();
            },
            setSynchrone: function (internal_p) {
              this.set_synchrone(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            }
          }),
          PortTypeMappingImpl: Kotlin.createClass([classes.c8, classes.c1c], /** @lends _.org.kevoree.impl.PortTypeMappingImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$beanMethodName = null;
              this.$serviceMethodName = null;
              this.$paramTypes = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
            },
            get_beanMethodName: function () {
              return this.$beanMethodName;
            },
            set_beanMethodName: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$beanMethodName = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_beanMethodName(), this.get_beanMethodName()));
            },
            get_serviceMethodName: function () {
              return this.$serviceMethodName;
            },
            set_serviceMethodName: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$serviceMethodName = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_serviceMethodName(), this.get_serviceMethodName()));
            },
            get_paramTypes: function () {
              return this.$paramTypes;
            },
            set_paramTypes: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$paramTypes = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_paramTypes(), this.get_paramTypes()));
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createPortTypeMapping();
              selfObjectClone.set_beanMethodName(this.get_beanMethodName());
              selfObjectClone.set_serviceMethodName(this.get_serviceMethodName());
              selfObjectClone.set_paramTypes(this.get_paramTypes());
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_beanMethodName()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_beanMethodName(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_serviceMethodName()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_serviceMethodName(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_paramTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_paramTypes(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.PortTypeMapping) || !Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeMappingImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_beanMethodName(), similarObjCasted.get_beanMethodName())) {
                return false;
              }
              if (!Kotlin.equals(this.get_serviceMethodName(), similarObjCasted.get_serviceMethodName())) {
                return false;
              }
              if (!Kotlin.equals(this.get_paramTypes(), similarObjCasted.get_paramTypes())) {
                return false;
              }
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.PortTypeMapping';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.PortTypeMapping) || Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeMappingImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_beanMethodName();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_beanMethodName() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_beanMethodName(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_beanMethodName(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_serviceMethodName();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_serviceMethodName() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_serviceMethodName(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_serviceMethodName(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_paramTypes();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_paramTypes() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_paramTypes(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_paramTypes(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
              }
              return traces;
            },
            getBeanMethodName: function () {
              return this.get_beanMethodName();
            },
            setBeanMethodName: function (internal_p) {
              this.set_beanMethodName(internal_p);
            },
            getServiceMethodName: function () {
              return this.get_serviceMethodName();
            },
            setServiceMethodName: function (internal_p) {
              this.set_serviceMethodName(internal_p);
            },
            getParamTypes: function () {
              return this.get_paramTypes();
            },
            setParamTypes: function (internal_p) {
              this.set_paramTypes(internal_p);
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            }
          }),
          PortTypeRefImpl: Kotlin.createClass([classes.c8, classes.c1d], /** @lends _.org.kevoree.impl.PortTypeRefImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$optional = null;
              this.$noDependency = null;
              this.$ref = null;
              this.$_mappings = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllMappingsCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              {
                var tmp$0 = this.get__mappings().entrySet().iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              this.set_ref(null);
              var tmp$1;
              (tmp$1 = this.get__mappings()) != null ? tmp$1.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_optional: function () {
              return this.$optional;
            },
            set_optional: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$optional = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_optional(), this.get_optional()));
            },
            get_noDependency: function () {
              return this.$noDependency;
            },
            set_noDependency: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$noDependency = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_noDependency(), this.get_noDependency()));
            },
            get_ref: function () {
              return this.$ref;
            },
            set_ref: function (refP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$ref, refP)) {
                this.$ref = refP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ref(), refP));
              }
            },
            get__mappings: function () {
              return this.$_mappings;
            },
            get_mappings: function () {
              return _.kotlin.toList_2(this.get__mappings().values());
            },
            set_mappings: function (mappingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (mappingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__mappings().values(), mappingsP)) {
                this.get__mappings().clear();
                {
                  var tmp$0 = mappingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__mappings().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = mappingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mappings', elem), 'mappings');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mappings(), mappingsP));
              }
            },
            addMappings: function (mappingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (mappingsP != null ? mappingsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mappings', mappingsP), 'mappings');
              var _key_ = (mappingsP != null ? mappingsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__mappings().put(_key_, mappingsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mappings(), mappingsP));
            },
            addAllMappings: function (mappingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = mappingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__mappings().put(_key_, el);
                }
              }
              {
                var tmp$1 = mappingsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mappings', el_0), 'mappings');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mappings(), mappingsP));
            },
            get_removeAllMappingsCurrentlyProcessing: function () {
              return this.$removeAllMappingsCurrentlyProcessing;
            },
            set_removeAllMappingsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllMappingsCurrentlyProcessing = tmp$0;
            },
            removeMappings: function (mappingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__mappings().size() !== 0 && this.get__mappings().containsKey((mappingsP != null ? mappingsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__mappings().remove((mappingsP != null ? mappingsP : Kotlin.throwNPE()).internalGetKey());
                ((mappingsP != null ? mappingsP : Kotlin.throwNPE()) != null ? mappingsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllMappingsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mappings(), mappingsP));
                }
              }
            },
            removeAllMappings: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllMappingsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_mappings()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__mappings().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mappings(), temp_els));
              this.set_removeAllMappingsCurrentlyProcessing(false);
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createPortTypeRef();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_optional(this.get_optional());
              selfObjectClone.set_noDependency(this.get_noDependency());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.get_mappings().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              if (this.get_ref() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.get_ref()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.set_ref((tmp$2 = this.get_ref()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.get_ref());
                  if (interObj == null) {
                    throw new Error('Non contained ref from PortTypeRef : ' + this.get_ref());
                  }
                  clonedSelfObject.set_ref(interObj != null ? interObj : Kotlin.throwNPE());
                }
              }
              {
                var tmp$3 = this.get_mappings().iterator();
                while (tmp$3.hasNext()) {
                  var sub = tmp$3.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addMappings(sub);
                  }
                   else {
                    var interObj_0 = addrs.get(sub);
                    if (interObj_0 == null) {
                      throw new Error('Non contained mappings from PortTypeRef : ' + this.get_mappings());
                    }
                    clonedSelfObject.addMappings(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$4 = this.get_mappings().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  (sub_0 != null ? sub_0 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_optional()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_optional(Kotlin.equals('true', value) || Kotlin.equals(true, value));
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_noDependency()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_noDependency(Kotlin.equals('true', value) || Kotlin.equals(true, value));
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_ref()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_ref(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_ref(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_ref(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_mappings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addMappings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllMappings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeMappings(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllMappings();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__mappings().size() !== 0 && this.get__mappings().containsKey(value)) {
                    var obj = this.get__mappings().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__mappings().put(objNewKey, obj);
                    this.get__mappings().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findMappingsByID: function (key) {
              return this.get__mappings().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_ref()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_ref();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_ref();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_mappings()) {
                var objFound = this.findMappingsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__mappings().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findMappingsByID(subElement.get_generated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.PortTypeRef) || !Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeRefImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_optional(), similarObjCasted.get_optional())) {
                return false;
              }
              if (!Kotlin.equals(this.get_noDependency(), similarObjCasted.get_noDependency())) {
                return false;
              }
              if (this.get_mappings().size() !== similarObjCasted.get_mappings().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__mappings().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_ref() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_ref()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              {
                var tmp$0 = this.get__mappings().keySet().iterator();
                while (tmp$0.hasNext()) {
                  var KMFLoopEntryKey = tmp$0.next();
                  var tmp$1;
                  var KMFLoopEntry = (tmp$1 = this.get__mappings().get(KMFLoopEntryKey)) != null ? tmp$1 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_mappings(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                var tmp$2;
                visitor.visit((tmp$2 = this.get_ref()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ref(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$3;
                  ((tmp$3 = this.get_ref()) != null ? tmp$3 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.PortTypeRef';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.PortTypeRef) || Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeRefImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_optional();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_optional() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_optional(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_optional(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_noDependency();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_noDependency() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_noDependency(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_noDependency(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                attVal = null;
                var tmp$6, tmp$7;
                attVal = (tmp$6 = this.get_ref()) != null ? tmp$6.path() : null;
                attVal2 = null;
                attVal2 = (tmp$7 = similarObjCasted != null ? similarObjCasted.get_ref() : null) != null ? tmp$7.path() : null;
                if (attVal2 != null) {
                  attVal2String = Kotlin.toString(attVal2);
                }
                 else {
                  attVal2String = null;
                }
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ref(), attVal2String, null, null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ref(), attVal2String, null, null));
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getOptional: function () {
              return this.get_optional();
            },
            setOptional: function (internal_p) {
              this.set_optional(internal_p);
            },
            getNoDependency: function () {
              return this.get_noDependency();
            },
            setNoDependency: function (internal_p) {
              this.set_noDependency(internal_p);
            },
            getRef: function () {
              return this.get_ref();
            },
            setRef: function (internal_p) {
              this.set_ref(internal_p);
            },
            getMappings: function () {
              return this.get_mappings();
            },
            setMappings: function (internal_p) {
              this.set_mappings(internal_p);
            }
          }),
          RepositoryImpl: Kotlin.createClass([classes.c8, classes.c1e], /** @lends _.org.kevoree.impl.RepositoryImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$url = null;
              this.$_units = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__units()) != null ? tmp$0.clear() : null;
            },
            get_url: function () {
              return this.$url;
            },
            set_url: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$url = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_url(), this.get_url()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_url(), this.path()));
            },
            get__units: function () {
              return this.$_units;
            },
            get_units: function () {
              return _.kotlin.toList_2(this.get__units().values());
            },
            set_units: function (unitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (unitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__units().values(), unitsP)) {
                this.get__units().clear();
                {
                  var tmp$0 = unitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__units().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_units(), unitsP));
              }
            },
            addUnits: function (unitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (unitsP != null ? unitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__units().put(_key_, unitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_units(), unitsP));
            },
            addAllUnits: function (unitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = unitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__units().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_units(), unitsP));
            },
            removeUnits: function (unitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__units().size() !== 0 && this.get__units().containsKey((unitsP != null ? unitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__units().remove((unitsP != null ? unitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_units(), unitsP));
              }
            },
            removeAllUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_units()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__units().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_units(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createRepository();
              selfObjectClone.set_url(this.get_url());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_units().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained units from Repository : ' + this.get_units());
                    }
                    clonedSelfObject.addUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_url()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_url(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_units()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__units().size() !== 0 && this.get__units().containsKey(value)) {
                    var obj = this.get__units().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__units().put(objNewKey, obj);
                    this.get__units().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_url();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findUnitsByID: function (key) {
              return this.get__units().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_units();
              var optionalDetected = firstSepIndex !== 5;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, query.length);
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0 = query;
              var tmp$1;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = relationName.length;
              }
              var subquery = tmp$0.substring(tmp$1 + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_units()) {
                var objFound = this.findUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Repository) || !Kotlin.isType(similarObj, _.org.kevoree.impl.RepositoryImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_url(), similarObjCasted.get_url())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__units().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Repository';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Repository) || Kotlin.isType(similarObj, _.org.kevoree.impl.RepositoryImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_url();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_url() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_url(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_url(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$2 = this.get__units().values().iterator();
                  while (tmp$2.hasNext()) {
                    var elem = tmp$2.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$3 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_units().iterator();
                    while (tmp$3.hasNext()) {
                      var elem_0 = tmp$3.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$4 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$4.hasNext()) {
                      var hashLoopRes = tmp$4.next();
                      var tmp$5, tmp$6;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_units(), hashLoopRes, ((tmp$6 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$6 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getUrl: function () {
              return this.get_url();
            },
            setUrl: function (internal_p) {
              this.set_url(internal_p);
            },
            getUnits: function () {
              return this.get_units();
            },
            setUnits: function (internal_p) {
              this.set_units(internal_p);
            }
          }),
          ServicePortTypeImpl: Kotlin.createClass([classes.c8, classes.c1f], /** @lends _.org.kevoree.impl.ServicePortTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$nature = null;
              this.$synchrone = null;
              this.$interfaceService = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_operations = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllOperationsCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$2, tmp$3, tmp$4;
              (tmp$0 = this.get_dictionaryType()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = this.get__operations().entrySet().iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              (tmp$2 = this.get__deployUnits()) != null ? tmp$2.clear() : null;
              this.set_dictionaryType(null);
              (tmp$3 = this.get__superTypes()) != null ? tmp$3.clear() : null;
              (tmp$4 = this.get__operations()) != null ? tmp$4.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$factoryBean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$bean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
            },
            get_nature: function () {
              return this.$nature;
            },
            set_nature: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$nature = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_nature(), this.get_nature()));
            },
            get_synchrone: function () {
              return this.$synchrone;
            },
            set_synchrone: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$synchrone = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_synchrone(), this.get_synchrone()));
            },
            get_interfaceService: function () {
              return this.$interfaceService;
            },
            set_interfaceService: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$interfaceService = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_interfaceService(), this.get_interfaceService()));
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.$dictionaryType = dictionaryTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList_2(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
            },
            get__operations: function () {
              return this.$_operations;
            },
            get_operations: function () {
              return _.kotlin.toList_2(this.get__operations().values());
            },
            set_operations: function (operationsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (operationsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__operations().values(), operationsP)) {
                this.get__operations().clear();
                {
                  var tmp$0 = operationsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__operations().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                {
                  var tmp$1 = operationsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    (elem != null ? elem : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'operations', elem), 'operations');
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_operations(), operationsP));
              }
            },
            addOperations: function (operationsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              (operationsP != null ? operationsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'operations', operationsP), 'operations');
              var _key_ = (operationsP != null ? operationsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__operations().put(_key_, operationsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_operations(), operationsP));
            },
            addAllOperations: function (operationsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = operationsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__operations().put(_key_, el);
                }
              }
              {
                var tmp$1 = operationsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  (el_0 != null ? el_0 : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'operations', el_0), 'operations');
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_operations(), operationsP));
            },
            get_removeAllOperationsCurrentlyProcessing: function () {
              return this.$removeAllOperationsCurrentlyProcessing;
            },
            set_removeAllOperationsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllOperationsCurrentlyProcessing = tmp$0;
            },
            removeOperations: function (operationsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__operations().size() !== 0 && this.get__operations().containsKey((operationsP != null ? operationsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__operations().remove((operationsP != null ? operationsP : Kotlin.throwNPE()).internalGetKey());
                ((operationsP != null ? operationsP : Kotlin.throwNPE()) != null ? operationsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllOperationsCurrentlyProcessing()) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_operations(), operationsP));
                }
              }
            },
            removeAllOperations: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set_removeAllOperationsCurrentlyProcessing(true);
              var tmp$0;
              var temp_els = (tmp$0 = this.get_operations()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  (el != null ? el : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
              }
              this.get__operations().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_operations(), temp_els));
              this.set_removeAllOperationsCurrentlyProcessing(false);
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createServicePortType();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_factoryBean(this.get_factoryBean());
              selfObjectClone.set_bean(this.get_bean());
              selfObjectClone.set_nature(this.get_nature());
              selfObjectClone.set_synchrone(this.get_synchrone());
              selfObjectClone.set_interfaceService(this.get_interfaceService());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubsubdictionaryType != null) {
                (subsubsubsubdictionaryType != null ? subsubsubsubdictionaryType : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.get_operations().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  (sub != null ? sub : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_deployUnits().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained deployUnits from ServicePortType : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_dictionaryType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_dictionaryType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_dictionaryType((tmp$3 = this.get_dictionaryType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionaryType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionaryType from ServicePortType : ' + this.get_dictionaryType());
                  }
                  clonedSelfObject.set_dictionaryType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_superTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Error('Non contained superTypes from ServicePortType : ' + this.get_superTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              {
                var tmp$5 = this.get_operations().iterator();
                while (tmp$5.hasNext()) {
                  var sub_1 = tmp$5.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addOperations(sub_1);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_1);
                    if (interObj_2 == null) {
                      throw new Error('Non contained operations from ServicePortType : ' + this.get_operations());
                    }
                    clonedSelfObject.addOperations(interObj_2 != null ? interObj_2 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubdictionaryType != null) {
                (subsubsubdictionaryType != null ? subsubsubdictionaryType : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$6 = this.get_operations().iterator();
                while (tmp$6.hasNext()) {
                  var sub_2 = tmp$6.next();
                  (sub_2 != null ? sub_2 : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_factoryBean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_bean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_nature()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_nature(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_synchrone()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_synchrone(Kotlin.equals('true', value) || Kotlin.equals(true, value));
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_interfaceService()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_interfaceService(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().put(objNewKey, obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionaryType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().put(objNewKey_0, obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_operations()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addOperations(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllOperations(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeOperations(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllOperations();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__operations().size() !== 0 && this.get__operations().containsKey(value)) {
                    var obj_1 = this.get__operations().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__operations().put(objNewKey_1, obj_1);
                    this.get__operations().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findOperationsByID: function (key) {
              return this.get__operations().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_dictionaryType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_operations()) {
                var objFound_1 = this.findOperationsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              {
                var tmp$0 = this.get__operations().values().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findOperationsByID(subElement.get_name());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ServicePortType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ServicePortTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_factoryBean(), similarObjCasted.get_factoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_bean(), similarObjCasted.get_bean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_nature(), similarObjCasted.get_nature())) {
                return false;
              }
              if (!Kotlin.equals(this.get_synchrone(), similarObjCasted.get_synchrone())) {
                return false;
              }
              if (!Kotlin.equals(this.get_interfaceService(), similarObjCasted.get_interfaceService())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionaryType(), similarObjCasted.get_dictionaryType())) {
                return false;
              }
              if (this.get_operations().size() !== similarObjCasted.get_operations().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__operations().values());
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__superTypes().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              {
                var tmp$2 = this.get__operations().keySet().iterator();
                while (tmp$2.hasNext()) {
                  var KMFLoopEntryKey = tmp$2.next();
                  var tmp$3;
                  var KMFLoopEntry = (tmp$3 = this.get__operations().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                  visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_operations(), this);
                  if (visitor.get_visitStopped()) {
                    return;
                  }
                  if (recursive) {
                    KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                  }
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$4 = this.get__deployUnits().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$4.next();
                    var tmp$5;
                    var KMFLoopEntry_0 = (tmp$5 = this.get__deployUnits().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$6 = this.get__superTypes().keySet().iterator();
                  while (tmp$6.hasNext()) {
                    var KMFLoopEntryKey_1 = tmp$6.next();
                    var tmp$7;
                    var KMFLoopEntry_1 = (tmp$7 = this.get__superTypes().get(KMFLoopEntryKey_1)) != null ? tmp$7 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_1, _.org.kevoree.util.Constants.get_Ref_superTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_1.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.ServicePortType';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ServicePortType) || Kotlin.isType(similarObj, _.org.kevoree.impl.ServicePortTypeImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_factoryBean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_factoryBean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_bean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_bean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_nature();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_nature() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_synchrone();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_synchrone() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$8;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$9;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_interfaceService();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_interfaceService() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$10;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_interfaceService(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$11;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_interfaceService(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$12 = this.get__deployUnits().values().iterator();
                  while (tmp$12.hasNext()) {
                    var elem = tmp$12.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$13 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_deployUnits().iterator();
                    while (tmp$13.hasNext()) {
                      var elem_0 = tmp$13.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$14 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$14.hasNext()) {
                      var hashLoopRes = tmp$14.next();
                      var tmp$15, tmp$16;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$15 = this.path()) != null ? tmp$15 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), hashLoopRes, ((tmp$16 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$16 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$17 = this.get__superTypes().values().iterator();
                  while (tmp$17.hasNext()) {
                    var elem_1 = tmp$17.next();
                    var elemPath_1 = elem_1.path();
                    if (elemPath_1 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_1, elem_1);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$18 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_superTypes().iterator();
                    while (tmp$18.hasNext()) {
                      var elem_2 = tmp$18.next();
                      var elemPath_2 = elem_2.path();
                      if (elemPath_2 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_2)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$19 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$19.hasNext()) {
                      var hashLoopRes_0 = tmp$19.next();
                      var tmp$20, tmp$21;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$20 = this.path()) != null ? tmp$20 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), hashLoopRes_0, ((tmp$21 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_0)) != null ? tmp$21 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getNature: function () {
              return this.get_nature();
            },
            setNature: function (internal_p) {
              this.set_nature(internal_p);
            },
            getSynchrone: function () {
              return this.get_synchrone();
            },
            setSynchrone: function (internal_p) {
              this.set_synchrone(internal_p);
            },
            getInterfaceService: function () {
              return this.get_interfaceService();
            },
            setInterfaceService: function (internal_p) {
              this.set_interfaceService(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            },
            getOperations: function () {
              return this.get_operations();
            },
            setOperations: function (internal_p) {
              this.set_operations(internal_p);
            }
          }),
          TypeDefinitionImpl: Kotlin.createClass([classes.c8, classes.c1g], /** @lends _.org.kevoree.impl.TypeDefinitionImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$nature = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2;
              (tmp$0 = this.get_dictionaryType()) != null ? tmp$0.delete() : null;
              (tmp$1 = this.get__deployUnits()) != null ? tmp$1.clear() : null;
              this.set_dictionaryType(null);
              (tmp$2 = this.get__superTypes()) != null ? tmp$2.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$factoryBean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$bean = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
            },
            get_nature: function () {
              return this.$nature;
            },
            set_nature: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.$nature = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_nature(), this.get_nature()));
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList_2(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.$dictionaryType = dictionaryTypeP;
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList_2(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createTypeDefinition();
              selfObjectClone.set_name(this.get_name());
              selfObjectClone.set_factoryBean(this.get_factoryBean());
              selfObjectClone.set_bean(this.get_bean());
              selfObjectClone.set_nature(this.get_nature());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubsubdictionaryType != null) {
                (subsubsubsubdictionaryType != null ? subsubsubsubdictionaryType : Kotlin.throwNPE()).getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_deployUnits().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained deployUnits from TypeDefinition : ' + this.get_deployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (this.get_dictionaryType() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.get_dictionaryType()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.set_dictionaryType((tmp$3 = this.get_dictionaryType()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.get_dictionaryType());
                  if (interObj_0 == null) {
                    throw new Error('Non contained dictionaryType from TypeDefinition : ' + this.get_dictionaryType());
                  }
                  clonedSelfObject.set_dictionaryType(interObj_0 != null ? interObj_0 : Kotlin.throwNPE());
                }
              }
              {
                var tmp$4 = this.get_superTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_0 = tmp$4.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Error('Non contained superTypes from TypeDefinition : ' + this.get_superTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1 != null ? interObj_1 : Kotlin.throwNPE());
                  }
                }
              }
              var subsubsubdictionaryType = this.get_dictionaryType();
              if (subsubsubdictionaryType != null) {
                (subsubsubdictionaryType != null ? subsubsubdictionaryType : Kotlin.throwNPE()).resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_factoryBean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_bean(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_nature()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_nature(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().put(objNewKey, obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_dictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.set_dictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.set_dictionaryType(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().put(objNewKey_0, obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.get_dictionaryType();
                  tmp$0 = obj != null ? obj.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.get_dictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.TypeDefinition) || !Kotlin.isType(similarObj, _.org.kevoree.impl.TypeDefinitionImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              if (!Kotlin.equals(this.get_factoryBean(), similarObjCasted.get_factoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_bean(), similarObjCasted.get_bean())) {
                return false;
              }
              if (!Kotlin.equals(this.get_nature(), similarObjCasted.get_nature())) {
                return false;
              }
              if (!Kotlin.equals(this.get_dictionaryType(), similarObjCasted.get_dictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__superTypes().values());
              return result;
            },
            visit: function (visitor, recursive, onlyContainedRef) {
              if (this.get_dictionaryType() != null) {
                var tmp$0;
                visitor.visit((tmp$0 = this.get_dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), this);
                if (visitor.get_visitStopped()) {
                  return;
                }
                if (recursive) {
                  var tmp$1;
                  ((tmp$1 = this.get_dictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).visit(visitor, recursive, onlyContainedRef);
                }
              }
              if (!onlyContainedRef) {
                {
                  var tmp$2 = this.get__deployUnits().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey = tmp$2.next();
                    var tmp$3;
                    var KMFLoopEntry = (tmp$3 = this.get__deployUnits().get(KMFLoopEntryKey)) != null ? tmp$3 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry, _.org.kevoree.util.Constants.get_Ref_deployUnits(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
                {
                  var tmp$4 = this.get__superTypes().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$4.next();
                    var tmp$5;
                    var KMFLoopEntry_0 = (tmp$5 = this.get__superTypes().get(KMFLoopEntryKey_0)) != null ? tmp$5 : Kotlin.throwNPE();
                    visitor.visit(KMFLoopEntry_0, _.org.kevoree.util.Constants.get_Ref_superTypes(), this);
                    if (visitor.get_visitStopped()) {
                      return;
                    }
                    if (recursive) {
                      KMFLoopEntry_0.visit(visitor, recursive, onlyContainedRef);
                    }
                  }
                }
              }
            },
            metaClassName: function () {
              return 'org.kevoree.TypeDefinition';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.TypeDefinition) || Kotlin.isType(similarObj, _.org.kevoree.impl.TypeDefinitionImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_factoryBean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_factoryBean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$2;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$3;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_bean();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_bean() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$4;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$5;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, Kotlin.toString(attVal2), null));
                  }
                }
                attVal = this.get_nature();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_nature() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$6;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$7;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_nature(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$8 = this.get__deployUnits().values().iterator();
                  while (tmp$8.hasNext()) {
                    var elem = tmp$8.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$9 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_deployUnits().iterator();
                    while (tmp$9.hasNext()) {
                      var elem_0 = tmp$9.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$10 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$10.hasNext()) {
                      var hashLoopRes = tmp$10.next();
                      var tmp$11, tmp$12;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), hashLoopRes, ((tmp$12 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$12 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$13 = this.get__superTypes().values().iterator();
                  while (tmp$13.hasNext()) {
                    var elem_1 = tmp$13.next();
                    var elemPath_1 = elem_1.path();
                    if (elemPath_1 != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath_1, elem_1);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$14 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_superTypes().iterator();
                    while (tmp$14.hasNext()) {
                      var elem_2 = tmp$14.next();
                      var elemPath_2 = elem_2.path();
                      if (elemPath_2 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_2)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_2, elem_2);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$15 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$15.hasNext()) {
                      var hashLoopRes_0 = tmp$15.next();
                      var tmp$16, tmp$17;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), hashLoopRes_0, ((tmp$17 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes_0)) != null ? tmp$17 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getNature: function () {
              return this.get_nature();
            },
            setNature: function (internal_p) {
              this.set_nature(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            }
          }),
          TypedElementImpl: Kotlin.createClass([classes.c8, classes.c1h], /** @lends _.org.kevoree.impl.TypedElementImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$_genericTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__genericTypes()) != null ? tmp$0.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get__genericTypes: function () {
              return this.$_genericTypes;
            },
            get_genericTypes: function () {
              return _.kotlin.toList_2(this.get__genericTypes().values());
            },
            set_genericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (genericTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__genericTypes().values(), genericTypesP)) {
                this.get__genericTypes().clear();
                {
                  var tmp$0 = genericTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__genericTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
              }
            },
            addGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__genericTypes().put(_key_, genericTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
            },
            addAllGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = genericTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__genericTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
            },
            removeGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__genericTypes().remove((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
              }
            },
            removeAllGenericTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_genericTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__genericTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createTypedElement();
              selfObjectClone.set_name(this.get_name());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_genericTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addGenericTypes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained genericTypes from TypedElement : ' + this.get_genericTypes());
                    }
                    clonedSelfObject.addGenericTypes(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addGenericTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllGenericTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeGenericTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllGenericTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey(value)) {
                    var obj = this.get__genericTypes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__genericTypes().put(objNewKey, obj);
                    this.get__genericTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findGenericTypesByID: function (key) {
              return this.get__genericTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_genericTypes();
              var optionalDetected = firstSepIndex !== 12;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, query.length);
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0 = query;
              var tmp$1;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = relationName.length;
              }
              var subquery = tmp$0.substring(tmp$1 + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                var objFound = this.findGenericTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.TypedElement) || !Kotlin.isType(similarObj, _.org.kevoree.impl.TypedElementImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__genericTypes().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.TypedElement';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.TypedElement) || Kotlin.isType(similarObj, _.org.kevoree.impl.TypedElementImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$2 = this.get__genericTypes().values().iterator();
                  while (tmp$2.hasNext()) {
                    var elem = tmp$2.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$3 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_genericTypes().iterator();
                    while (tmp$3.hasNext()) {
                      var elem_0 = tmp$3.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$4 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$4.hasNext()) {
                      var hashLoopRes = tmp$4.next();
                      var tmp$5, tmp$6;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), hashLoopRes, ((tmp$6 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$6 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getGenericTypes: function () {
              return this.get_genericTypes();
            },
            setGenericTypes: function (internal_p) {
              this.set_genericTypes(internal_p);
            }
          }),
          TypeLibraryImpl: Kotlin.createClass([classes.c8, classes.c1i], /** @lends _.org.kevoree.impl.TypeLibraryImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$name = null;
              this.$_subTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__subTypes()) != null ? tmp$0.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$name = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
            },
            get__subTypes: function () {
              return this.$_subTypes;
            },
            get_subTypes: function () {
              return _.kotlin.toList_2(this.get__subTypes().values());
            },
            set_subTypes: function (subTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (subTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__subTypes().values(), subTypesP)) {
                this.get__subTypes().clear();
                {
                  var tmp$0 = subTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__subTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), subTypesP));
              }
            },
            addSubTypes: function (subTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (subTypesP != null ? subTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__subTypes().put(_key_, subTypesP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), subTypesP));
            },
            addAllSubTypes: function (subTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = subTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__subTypes().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), subTypesP));
            },
            removeSubTypes: function (subTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__subTypes().size() !== 0 && this.get__subTypes().containsKey((subTypesP != null ? subTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__subTypes().remove((subTypesP != null ? subTypesP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), subTypesP));
              }
            },
            removeAllSubTypes: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_subTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__subTypes().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createTypeLibrary();
              selfObjectClone.set_name(this.get_name());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_subTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addSubTypes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained subTypes from TypeLibrary : ' + this.get_subTypes());
                    }
                    clonedSelfObject.addSubTypes(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_name(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_subTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSubTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSubTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSubTypes(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSubTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__subTypes().size() !== 0 && this.get__subTypes().containsKey(value)) {
                    var obj = this.get__subTypes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__subTypes().put(objNewKey, obj);
                    this.get__subTypes().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findSubTypesByID: function (key) {
              return this.get__subTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_subTypes();
              var optionalDetected = firstSepIndex !== 8;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, query.length);
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0 = query;
              var tmp$1;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = relationName.length;
              }
              var subquery = tmp$0.substring(tmp$1 + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_subTypes()) {
                var objFound = this.findSubTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.TypeLibrary) || !Kotlin.isType(similarObj, _.org.kevoree.impl.TypeLibraryImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_name(), similarObjCasted.get_name())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__subTypes().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.TypeLibrary';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.TypeLibrary) || Kotlin.isType(similarObj, _.org.kevoree.impl.TypeLibraryImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_name();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_name() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$2 = this.get__subTypes().values().iterator();
                  while (tmp$2.hasNext()) {
                    var elem = tmp$2.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$3 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_subTypes().iterator();
                    while (tmp$3.hasNext()) {
                      var elem_0 = tmp$3.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$4 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$4.hasNext()) {
                      var hashLoopRes = tmp$4.next();
                      var tmp$5, tmp$6;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), hashLoopRes, ((tmp$6 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$6 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getSubTypes: function () {
              return this.get_subTypes();
            },
            setSubTypes: function (internal_p) {
              this.set_subTypes(internal_p);
            }
          }),
          WireImpl: Kotlin.createClass([classes.c8, classes.c1j], /** @lends _.org.kevoree.impl.WireImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_ports = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__ports()) != null ? tmp$0.clear() : null;
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.$generated_KMF_ID = iP;
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
              if (previousParent != null) {
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId);
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
            },
            get__ports: function () {
              return this.$_ports;
            },
            get_ports: function () {
              return _.kotlin.toList_2(this.get__ports().values());
            },
            set_ports: function (portsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (portsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__ports().values(), portsP)) {
                this.get__ports().clear();
                {
                  var tmp$0 = portsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error("Can't set collection, because one element has no key!");
                    }
                    this.get__ports().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ports(), portsP));
              }
            },
            addPorts: function (portsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var _key_ = (portsP != null ? portsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error('Key empty : set the attribute key before adding the object');
              }
              this.get__ports().put(_key_, portsP);
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ports(), portsP));
            },
            addAllPorts: function (portsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              {
                var tmp$0 = portsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Error('Key empty : set the attribute key before adding the object');
                  }
                  this.get__ports().put(_key_, el);
                }
              }
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ports(), portsP));
            },
            removePorts: function (portsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__ports().size() !== 0 && this.get__ports().containsKey((portsP != null ? portsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__ports().remove((portsP != null ? portsP : Kotlin.throwNPE()).internalGetKey());
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ports(), portsP));
              }
            },
            removeAllPorts: function () {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_ports()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__ports().clear();
              this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ports(), temp_els));
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createWire();
              selfObjectClone.set_generated_KMF_ID(this.get_generated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var tmp$0;
              var clonedSelfObject = (tmp$0 = addrs.get(this)) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$1 = this.get_ports().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addPorts(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Error('Non contained ports from Wire : ' + this.get_ports());
                    }
                    clonedSelfObject.addPorts(interObj != null ? interObj : Kotlin.throwNPE());
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.set_generated_KMF_ID(value);
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_ports()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addPorts(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllPorts(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removePorts(value != null ? value : Kotlin.throwNPE());
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllPorts();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__ports().size() !== 0 && this.get__ports().containsKey(value)) {
                    var obj = this.get__ports().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__ports().put(objNewKey, obj);
                    this.get__ports().remove(value);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findPortsByID: function (key) {
              return this.get__ports().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_ports();
              var optionalDetected = firstSepIndex !== 5;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, query.length);
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0 = query;
              var tmp$1;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = relationName.length;
              }
              var subquery = tmp$0.substring(tmp$1 + queryID.length + extraReadChar, query.length);
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_ports()) {
                var objFound = this.findPortsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Wire) || !Kotlin.isType(similarObj, _.org.kevoree.impl.WireImpl)) {
                return false;
              }
              var similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              if (!Kotlin.equals(this.get_generated_KMF_ID(), similarObjCasted.get_generated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            referencedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              result.addAll(this.get__ports().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Wire';
            },
            generateDiffTraces: function (similarObj, kmf_internal_inter, kmf_internal_ref) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Wire) || Kotlin.isType(similarObj, _.org.kevoree.impl.WireImpl))) {
                similarObjCasted = similarObj != null ? similarObj : Kotlin.throwNPE();
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              if (!kmf_internal_ref) {
                attVal = this.get_generated_KMF_ID();
                attVal2 = similarObjCasted != null ? similarObjCasted.get_generated_KMF_ID() : null;
                if (!Kotlin.equals(attVal, attVal2)) {
                  if (!kmf_internal_inter) {
                    var tmp$0;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this.path()) != null ? tmp$0 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
                 else {
                  if (kmf_internal_inter) {
                    var tmp$1;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, Kotlin.toString(attVal2), null));
                  }
                }
              }
               else {
                hashLoop = new Kotlin.PrimitiveHashMap(0);
                hashResult = new Kotlin.PrimitiveHashMap(0);
                {
                  var tmp$2 = this.get__ports().values().iterator();
                  while (tmp$2.hasNext()) {
                    var elem = tmp$2.next();
                    var elemPath = elem.path();
                    if (elemPath != null) {
                      (hashLoop != null ? hashLoop : Kotlin.throwNPE()).put(elemPath, elem);
                    }
                  }
                }
                if (similarObjCasted != null) {
                  {
                    var tmp$3 = (similarObjCasted != null ? similarObjCasted : Kotlin.throwNPE()).get_ports().iterator();
                    while (tmp$3.hasNext()) {
                      var elem_0 = tmp$3.next();
                      var elemPath_0 = elem_0.path();
                      if (elemPath_0 != null) {
                        if ((hashLoop != null ? hashLoop : Kotlin.throwNPE()).containsKey(elemPath_0)) {
                          if (kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                         else {
                          if (!kmf_internal_inter) {
                            (hashResult != null ? hashResult : Kotlin.throwNPE()).put(elemPath_0, elem_0);
                          }
                        }
                      }
                    }
                  }
                }
                if (_.kotlin.get_size_0(hashResult != null ? hashResult : Kotlin.throwNPE()) !== 0) {
                  {
                    var tmp$4 = (hashResult != null ? hashResult : Kotlin.throwNPE()).keySet().iterator();
                    while (tmp$4.hasNext()) {
                      var hashLoopRes = tmp$4.next();
                      var tmp$5, tmp$6;
                      traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ports(), hashLoopRes, ((tmp$6 = (hashResult != null ? hashResult : Kotlin.throwNPE()).get(hashLoopRes)) != null ? tmp$6 : Kotlin.throwNPE()).metaClassName()));
                    }
                  }
                }
              }
              return traces;
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getPorts: function () {
              return this.get_ports();
            },
            setPorts: function (internal_p) {
              this.set_ports(internal_p);
            }
          })
        }),
        loader: Kotlin.definePackage({
          JSONModelLoader: Kotlin.createClass(classes.cw, /** @lends _.org.kevoree.loader.JSONModelLoader.prototype */ {
            initialize: function () {
              this.$mainFactory = new _.org.kevoree.factory.MainFactory();
            },
            get_mainFactory: function () {
              return this.$mainFactory;
            },
            loadModelFromString: function (str) {
              var bytes = Kotlin.numberArrayOfSize(str.length);
              var i = 0;
              while (i < str.length) {
                var tmp$0;
                bytes[i] = (tmp$0 = str.charAt(i)) != null ? tmp$0 : Kotlin.throwNPE();
                i = i + 1;
              }
              return this.deserialize(new _.java.io.ByteArrayInputStream(bytes));
            },
            loadModelFromStream: function (inputStream) {
              return this.deserialize(inputStream);
            },
            deserialize: function (instream) {
              var reader = new _.org.kevoree.loader.JsonReader(instream);
              var context = new _.org.kevoree.loader.LoadingContext();
              while (reader.hasNext() && reader.peek() !== _.org.kevoree.loader.JsonToken.get_END_DOCUMENT()) {
                reader.beginObject();
                var nextKey = reader.nextName();
                if (Kotlin.equals(nextKey, 'eClass')) {
                  var eclassValue = reader.nextString();
                  if (Kotlin.equals(eclassValue, 'org.kevoree:ComponentInstance')) {
                    context.get_loadedRoots().add(this.loadComponentInstance(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ComponentType')) {
                    context.get_loadedRoots().add(this.loadComponentType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ContainerNode')) {
                    context.get_loadedRoots().add(this.loadContainerNode(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ContainerRoot')) {
                    context.get_loadedRoots().add(this.loadContainerRoot(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:PortType')) {
                    context.get_loadedRoots().add(this.loadPortType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Port')) {
                    context.get_loadedRoots().add(this.loadPort(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Namespace')) {
                    context.get_loadedRoots().add(this.loadNamespace(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Dictionary')) {
                    context.get_loadedRoots().add(this.loadDictionary(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DictionaryType')) {
                    context.get_loadedRoots().add(this.loadDictionaryType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DictionaryAttribute')) {
                    context.get_loadedRoots().add(this.loadDictionaryAttribute(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DictionaryValue')) {
                    context.get_loadedRoots().add(this.loadDictionaryValue(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:CompositeType')) {
                    context.get_loadedRoots().add(this.loadCompositeType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:PortTypeRef')) {
                    context.get_loadedRoots().add(this.loadPortTypeRef(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Wire')) {
                    context.get_loadedRoots().add(this.loadWire(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ServicePortType')) {
                    context.get_loadedRoots().add(this.loadServicePortType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Operation')) {
                    context.get_loadedRoots().add(this.loadOperation(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Parameter')) {
                    context.get_loadedRoots().add(this.loadParameter(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:TypedElement')) {
                    context.get_loadedRoots().add(this.loadTypedElement(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:MessagePortType')) {
                    context.get_loadedRoots().add(this.loadMessagePortType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Repository')) {
                    context.get_loadedRoots().add(this.loadRepository(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DeployUnit')) {
                    context.get_loadedRoots().add(this.loadDeployUnit(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:TypeLibrary')) {
                    context.get_loadedRoots().add(this.loadTypeLibrary(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NamedElement')) {
                    context.get_loadedRoots().add(this.loadNamedElement(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:IntegrationPattern')) {
                    context.get_loadedRoots().add(this.loadIntegrationPattern(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ExtraFonctionalProperty')) {
                    context.get_loadedRoots().add(this.loadExtraFonctionalProperty(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:PortTypeMapping')) {
                    context.get_loadedRoots().add(this.loadPortTypeMapping(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Channel')) {
                    context.get_loadedRoots().add(this.loadChannel(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:MBinding')) {
                    context.get_loadedRoots().add(this.loadMBinding(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NodeNetwork')) {
                    context.get_loadedRoots().add(this.loadNodeNetwork(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NodeLink')) {
                    context.get_loadedRoots().add(this.loadNodeLink(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NetworkProperty')) {
                    context.get_loadedRoots().add(this.loadNetworkProperty(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ChannelType')) {
                    context.get_loadedRoots().add(this.loadChannelType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:TypeDefinition')) {
                    context.get_loadedRoots().add(this.loadTypeDefinition(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Instance')) {
                    context.get_loadedRoots().add(this.loadInstance(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:LifeCycleTypeDefinition')) {
                    context.get_loadedRoots().add(this.loadLifeCycleTypeDefinition(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Group')) {
                    context.get_loadedRoots().add(this.loadGroup(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:GroupType')) {
                    context.get_loadedRoots().add(this.loadGroupType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NodeType')) {
                    context.get_loadedRoots().add(this.loadNodeType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:AdaptationPrimitiveType')) {
                    context.get_loadedRoots().add(this.loadAdaptationPrimitiveType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:AdaptationPrimitiveTypeRef')) {
                    context.get_loadedRoots().add(this.loadAdaptationPrimitiveTypeRef(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ComponentInstance')) {
                    context.get_loadedRoots().add(this.loadComponentInstance(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ComponentType')) {
                    context.get_loadedRoots().add(this.loadComponentType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ContainerNode')) {
                    context.get_loadedRoots().add(this.loadContainerNode(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ContainerRoot')) {
                    context.get_loadedRoots().add(this.loadContainerRoot(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:PortType')) {
                    context.get_loadedRoots().add(this.loadPortType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Port')) {
                    context.get_loadedRoots().add(this.loadPort(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Namespace')) {
                    context.get_loadedRoots().add(this.loadNamespace(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Dictionary')) {
                    context.get_loadedRoots().add(this.loadDictionary(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DictionaryType')) {
                    context.get_loadedRoots().add(this.loadDictionaryType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DictionaryAttribute')) {
                    context.get_loadedRoots().add(this.loadDictionaryAttribute(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DictionaryValue')) {
                    context.get_loadedRoots().add(this.loadDictionaryValue(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:CompositeType')) {
                    context.get_loadedRoots().add(this.loadCompositeType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:PortTypeRef')) {
                    context.get_loadedRoots().add(this.loadPortTypeRef(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Wire')) {
                    context.get_loadedRoots().add(this.loadWire(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ServicePortType')) {
                    context.get_loadedRoots().add(this.loadServicePortType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Operation')) {
                    context.get_loadedRoots().add(this.loadOperation(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Parameter')) {
                    context.get_loadedRoots().add(this.loadParameter(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:TypedElement')) {
                    context.get_loadedRoots().add(this.loadTypedElement(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:MessagePortType')) {
                    context.get_loadedRoots().add(this.loadMessagePortType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Repository')) {
                    context.get_loadedRoots().add(this.loadRepository(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DeployUnit')) {
                    context.get_loadedRoots().add(this.loadDeployUnit(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:TypeLibrary')) {
                    context.get_loadedRoots().add(this.loadTypeLibrary(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NamedElement')) {
                    context.get_loadedRoots().add(this.loadNamedElement(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:IntegrationPattern')) {
                    context.get_loadedRoots().add(this.loadIntegrationPattern(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ExtraFonctionalProperty')) {
                    context.get_loadedRoots().add(this.loadExtraFonctionalProperty(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:PortTypeMapping')) {
                    context.get_loadedRoots().add(this.loadPortTypeMapping(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Channel')) {
                    context.get_loadedRoots().add(this.loadChannel(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:MBinding')) {
                    context.get_loadedRoots().add(this.loadMBinding(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NodeNetwork')) {
                    context.get_loadedRoots().add(this.loadNodeNetwork(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NodeLink')) {
                    context.get_loadedRoots().add(this.loadNodeLink(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NetworkProperty')) {
                    context.get_loadedRoots().add(this.loadNetworkProperty(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ChannelType')) {
                    context.get_loadedRoots().add(this.loadChannelType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:TypeDefinition')) {
                    context.get_loadedRoots().add(this.loadTypeDefinition(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Instance')) {
                    context.get_loadedRoots().add(this.loadInstance(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:LifeCycleTypeDefinition')) {
                    context.get_loadedRoots().add(this.loadLifeCycleTypeDefinition(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Group')) {
                    context.get_loadedRoots().add(this.loadGroup(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:GroupType')) {
                    context.get_loadedRoots().add(this.loadGroupType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NodeType')) {
                    context.get_loadedRoots().add(this.loadNodeType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:AdaptationPrimitiveType')) {
                    context.get_loadedRoots().add(this.loadAdaptationPrimitiveType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:AdaptationPrimitiveTypeRef')) {
                    context.get_loadedRoots().add(this.loadAdaptationPrimitiveTypeRef(reader, context));
                  }
                   else {
                    Kotlin.println("Unknown root type '" + eclassValue + "'. Loading of this element aborted.");
                  }
                }
                 else {
                  Kotlin.println("Ignored key '" + nextKey + "' while looking for the root element 'eClass'");
                }
                reader.endObject();
              }
              {
                var tmp$0 = context.get_resolvers().iterator();
                while (tmp$0.hasNext()) {
                  var res = tmp$0.next();
                  res.run();
                }
              }
              return context.get_loadedRoots();
            },
            unescapeJSON: function (src) {
              var builder = null;
              var i = 0;
              while (i < src.length) {
                var c = src.charAt(i);
                if (c === '&') {
                  if (builder == null) {
                    builder = src.substring(0, i);
                  }
                  if (src.charAt(i + 1) === 'a') {
                    builder = (builder != null ? builder : Kotlin.throwNPE()) + "'";
                    i = i + 6;
                  }
                   else if (src.charAt(i + 1) === 'q') {
                    builder = (builder != null ? builder : Kotlin.throwNPE()) + '"';
                    i = i + 6;
                  }
                   else {
                    Kotlin.println('Could not unescaped chain:' + src.charAt(i) + src.charAt(i + 1));
                  }
                }
                 else {
                  if (builder != null) {
                    builder = (builder != null ? builder : Kotlin.throwNPE()) + c;
                  }
                  i++;
                }
              }
              if (builder != null) {
                return builder != null ? builder : Kotlin.throwNPE();
              }
               else {
                return src;
              }
            },
            loadLifeCycleTypeDefinition: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createLifeCycleTypeDefinition();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.set_factoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.set_bean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nature') {
                  var tmp$3;
                  modelElem.set_nature(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'startMethod') {
                  var tmp$4;
                  modelElem.set_startMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$5;
                  modelElem.set_stopMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$6;
                  modelElem.set_updateMethod(this.unescapeJSON((tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.set_dictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$8;
                    var xmiRef_0 = (tmp$8 = reader.nextString()) != null ? tmp$8 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in LifeCycleTypeDefinition');
                }
              }
              return modelElem;
            },
            loadInstance: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createInstance();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'metaData') {
                  var tmp$1;
                  modelElem.set_metaData(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'typeDefinition') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'typeDefinition', xmiRef));
                }
                 else if (nextName === 'dictionary') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionary(reader, context);
                  modelElem.set_dictionary(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Instance');
                }
              }
              return modelElem;
            },
            loadPort: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createPort();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bindings') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'bindings', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'portTypeRef') {
                  var tmp$2;
                  var xmiRef_0 = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'portTypeRef', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Port');
                }
              }
              return modelElem;
            },
            loadNodeNetwork: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNodeNetwork();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'link') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadNodeLink(reader, context);
                    modelElem.addLink(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'initBy') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'initBy', xmiRef));
                }
                 else if (nextName === 'target') {
                  var tmp$2;
                  var xmiRef_0 = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'target', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in NodeNetwork');
                }
              }
              return modelElem;
            },
            loadTypedElement: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createTypedElement();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'genericTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'genericTypes', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in TypedElement');
                }
              }
              return modelElem;
            },
            loadPortTypeMapping: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createPortTypeMapping();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'beanMethodName') {
                  var tmp$0;
                  modelElem.set_beanMethodName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'serviceMethodName') {
                  var tmp$1;
                  modelElem.set_serviceMethodName(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'paramTypes') {
                  var tmp$2;
                  modelElem.set_paramTypes(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'generated_KMF_ID') {
                  var tmp$3;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in PortTypeMapping');
                }
              }
              return modelElem;
            },
            loadAdaptationPrimitiveType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createAdaptationPrimitiveType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in AdaptationPrimitiveType');
                }
              }
              return modelElem;
            },
            loadComponentInstance: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createComponentInstance();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'metaData') {
                  var tmp$1;
                  modelElem.set_metaData(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'typeDefinition') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'typeDefinition', xmiRef));
                }
                 else if (nextName === 'dictionary') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionary(reader, context);
                  modelElem.set_dictionary(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'provided') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadPort(reader, context);
                    modelElem.addProvided(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'required') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_1 = this.loadPort(reader, context);
                    modelElem.addRequired(loadedElem_1);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'namespace') {
                  var tmp$3;
                  var xmiRef_0 = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'namespace', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ComponentInstance');
                }
              }
              return modelElem;
            },
            loadIntegrationPattern: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createIntegrationPattern();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'extraFonctionalProperties') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadExtraFonctionalProperty(reader, context);
                    modelElem.addExtraFonctionalProperties(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'portTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'portTypes', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in IntegrationPattern');
                }
              }
              return modelElem;
            },
            loadContainerNode: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createContainerNode();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'metaData') {
                  var tmp$1;
                  modelElem.set_metaData(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'typeDefinition') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'typeDefinition', xmiRef));
                }
                 else if (nextName === 'dictionary') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionary(reader, context);
                  modelElem.set_dictionary(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'components') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadComponentInstance(reader, context);
                    modelElem.addComponents(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'hosts') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$3;
                    var xmiRef_0 = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'hosts', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'host') {
                  var tmp$4;
                  var xmiRef_1 = (tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'host', xmiRef_1));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ContainerNode');
                }
              }
              return modelElem;
            },
            loadAdaptationPrimitiveTypeRef: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createAdaptationPrimitiveTypeRef();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'maxTime') {
                  var tmp$0;
                  modelElem.set_maxTime(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'generated_KMF_ID') {
                  var tmp$1;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'ref') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'ref', xmiRef));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in AdaptationPrimitiveTypeRef');
                }
              }
              return modelElem;
            },
            loadDictionaryAttribute: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createDictionaryAttribute();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'optional') {
                  modelElem.set_optional(reader.nextBoolean());
                }
                 else if (nextName === 'state') {
                  modelElem.set_state(reader.nextBoolean());
                }
                 else if (nextName === 'datatype') {
                  var tmp$1;
                  modelElem.set_datatype(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'fragmentDependant') {
                  modelElem.set_fragmentDependant(reader.nextBoolean());
                }
                 else if (nextName === 'genericTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$2;
                    var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'genericTypes', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in DictionaryAttribute');
                }
              }
              return modelElem;
            },
            loadNamespace: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNamespace();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'childs') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadNamespace(reader, context);
                    modelElem.addChilds(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'parent') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'parent', xmiRef));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Namespace');
                }
              }
              return modelElem;
            },
            loadNodeType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNodeType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.set_factoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.set_bean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nature') {
                  var tmp$3;
                  modelElem.set_nature(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'startMethod') {
                  var tmp$4;
                  modelElem.set_startMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$5;
                  modelElem.set_stopMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$6;
                  modelElem.set_updateMethod(this.unescapeJSON((tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.set_dictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$8;
                    var xmiRef_0 = (tmp$8 = reader.nextString()) != null ? tmp$8 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'managedPrimitiveTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$9;
                    var xmiRef_1 = (tmp$9 = reader.nextString()) != null ? tmp$9 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'managedPrimitiveTypes', xmiRef_1));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'managedPrimitiveTypeRefs') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadAdaptationPrimitiveTypeRef(reader, context);
                    modelElem.addManagedPrimitiveTypeRefs(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in NodeType');
                }
              }
              return modelElem;
            },
            loadChannel: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createChannel();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'metaData') {
                  var tmp$1;
                  modelElem.set_metaData(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'typeDefinition') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'typeDefinition', xmiRef));
                }
                 else if (nextName === 'dictionary') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionary(reader, context);
                  modelElem.set_dictionary(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'bindings') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$3;
                    var xmiRef_0 = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'bindings', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Channel');
                }
              }
              return modelElem;
            },
            loadDictionaryValue: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createDictionaryValue();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'value') {
                  var tmp$0;
                  modelElem.set_value(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'generated_KMF_ID') {
                  var tmp$1;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'attribute') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'attribute', xmiRef));
                }
                 else if (nextName === 'targetNode') {
                  var tmp$3;
                  var xmiRef_0 = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'targetNode', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in DictionaryValue');
                }
              }
              return modelElem;
            },
            loadNodeLink: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNodeLink();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'networkType') {
                  var tmp$0;
                  modelElem.set_networkType(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'estimatedRate') {
                  modelElem.set_estimatedRate(reader.nextInt());
                }
                 else if (nextName === 'lastCheck') {
                  var tmp$1;
                  modelElem.set_lastCheck(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'generated_KMF_ID') {
                  var tmp$2;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'networkProperties') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadNetworkProperty(reader, context);
                    modelElem.addNetworkProperties(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in NodeLink');
                }
              }
              return modelElem;
            },
            loadParameter: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createParameter();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'order') {
                  modelElem.set_order(reader.nextInt());
                }
                 else if (nextName === 'type') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'type', xmiRef));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Parameter');
                }
              }
              return modelElem;
            },
            loadContainerRoot: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createContainerRoot();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nodes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadContainerNode(reader, context);
                    modelElem.addNodes(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'typeDefinitions') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var nextKey = reader.nextName();
                    if (Kotlin.equals(nextKey, 'eClass')) {
                      var eclassValue = reader.nextString();
                      if (eclassValue === 'org.kevoree:NodeType') {
                        var loadedElem_0 = this.loadNodeType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_0);
                      }
                       else if (eclassValue === 'org.kevoree:GroupType') {
                        var loadedElem_1 = this.loadGroupType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_1);
                      }
                       else if (eclassValue === 'org.kevoree:ChannelType') {
                        var loadedElem_2 = this.loadChannelType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_2);
                      }
                       else if (eclassValue === 'org.kevoree:MessagePortType') {
                        var loadedElem_3 = this.loadMessagePortType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_3);
                      }
                       else if (eclassValue === 'org.kevoree:ServicePortType') {
                        var loadedElem_4 = this.loadServicePortType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_4);
                      }
                       else if (eclassValue === 'org.kevoree:ComponentType') {
                        var loadedElem_5 = this.loadComponentType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_5);
                      }
                       else if (eclassValue === 'org.kevoree:CompositeType') {
                        var loadedElem_6 = this.loadCompositeType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_6);
                      }
                       else {
                        Kotlin.println("Unknown root type '" + eclassValue + "'. Loading aborted.");
                      }
                    }
                     else {
                      Kotlin.println("Ignored key '" + nextKey + "' while looking for the root element 'eClass'");
                    }
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'repositories') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_7 = this.loadRepository(reader, context);
                    modelElem.addRepositories(loadedElem_7);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dataTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var nextKey_0 = reader.nextName();
                    if (Kotlin.equals(nextKey_0, 'eClass')) {
                      var eclassValue_0 = reader.nextString();
                      if (eclassValue_0 === 'org.kevoree:TypedElement') {
                        var loadedElem_8 = this.loadTypedElement(reader, context);
                        modelElem.addDataTypes(loadedElem_8);
                      }
                       else if (eclassValue_0 === 'org.kevoree:DictionaryAttribute') {
                        var loadedElem_9 = this.loadDictionaryAttribute(reader, context);
                        modelElem.addDataTypes(loadedElem_9);
                      }
                       else {
                        Kotlin.println("Unknown root type '" + eclassValue_0 + "'. Loading aborted.");
                      }
                    }
                     else {
                      Kotlin.println("Ignored key '" + nextKey_0 + "' while looking for the root element 'eClass'");
                    }
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'libraries') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_10 = this.loadTypeLibrary(reader, context);
                    modelElem.addLibraries(loadedElem_10);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'hubs') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_11 = this.loadChannel(reader, context);
                    modelElem.addHubs(loadedElem_11);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'mBindings') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_12 = this.loadMBinding(reader, context);
                    modelElem.addMBindings(loadedElem_12);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_13 = this.loadDeployUnit(reader, context);
                    modelElem.addDeployUnits(loadedElem_13);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'nodeNetworks') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_14 = this.loadNodeNetwork(reader, context);
                    modelElem.addNodeNetworks(loadedElem_14);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'groups') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_15 = this.loadGroup(reader, context);
                    modelElem.addGroups(loadedElem_15);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'adaptationPrimitiveTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_16 = this.loadAdaptationPrimitiveType(reader, context);
                    modelElem.addAdaptationPrimitiveTypes(loadedElem_16);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ContainerRoot');
                }
              }
              return modelElem;
            },
            loadWire: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createWire();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'ports') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'ports', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Wire');
                }
              }
              return modelElem;
            },
            loadDictionary: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createDictionary();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'values') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadDictionaryValue(reader, context);
                    modelElem.addValues(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Dictionary');
                }
              }
              return modelElem;
            },
            loadRepository: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createRepository();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'url') {
                  var tmp$0;
                  modelElem.set_url(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'units') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'units', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Repository');
                }
              }
              return modelElem;
            },
            loadServicePortType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createServicePortType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.set_factoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.set_bean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nature') {
                  var tmp$3;
                  modelElem.set_nature(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'synchrone') {
                  modelElem.set_synchrone(reader.nextBoolean());
                }
                 else if (nextName === 'interfaceService') {
                  var tmp$4;
                  modelElem.set_interfaceService(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$5;
                    var xmiRef = (tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.set_dictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$6;
                    var xmiRef_0 = (tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'operations') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadOperation(reader, context);
                    modelElem.addOperations(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ServicePortType');
                }
              }
              return modelElem;
            },
            loadPortType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createPortType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.set_factoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.set_bean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nature') {
                  var tmp$3;
                  modelElem.set_nature(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'synchrone') {
                  modelElem.set_synchrone(reader.nextBoolean());
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$4;
                    var xmiRef = (tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.set_dictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$5;
                    var xmiRef_0 = (tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in PortType');
                }
              }
              return modelElem;
            },
            loadMBinding: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createMBinding();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'port') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'port', xmiRef));
                }
                 else if (nextName === 'hub') {
                  var tmp$2;
                  var xmiRef_0 = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'hub', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in MBinding');
                }
              }
              return modelElem;
            },
            loadExtraFonctionalProperty: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createExtraFonctionalProperty();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'portTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'portTypes', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ExtraFonctionalProperty');
                }
              }
              return modelElem;
            },
            loadGroup: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createGroup();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'metaData') {
                  var tmp$1;
                  modelElem.set_metaData(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'typeDefinition') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'typeDefinition', xmiRef));
                }
                 else if (nextName === 'dictionary') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionary(reader, context);
                  modelElem.set_dictionary(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'subNodes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$3;
                    var xmiRef_0 = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'subNodes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Group');
                }
              }
              return modelElem;
            },
            loadCompositeType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createCompositeType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.set_factoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.set_bean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nature') {
                  var tmp$3;
                  modelElem.set_nature(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'startMethod') {
                  var tmp$4;
                  modelElem.set_startMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$5;
                  modelElem.set_stopMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$6;
                  modelElem.set_updateMethod(this.unescapeJSON((tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.set_dictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$8;
                    var xmiRef_0 = (tmp$8 = reader.nextString()) != null ? tmp$8 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'required') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadPortTypeRef(reader, context);
                    modelElem.addRequired(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'integrationPatterns') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_1 = this.loadIntegrationPattern(reader, context);
                    modelElem.addIntegrationPatterns(loadedElem_1);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'extraFonctionalProperties') {
                  reader.beginObject();
                  var loadedElem_2 = this.loadExtraFonctionalProperty(reader, context);
                  modelElem.set_extraFonctionalProperties(loadedElem_2);
                  reader.endObject();
                }
                 else if (nextName === 'provided') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_3 = this.loadPortTypeRef(reader, context);
                    modelElem.addProvided(loadedElem_3);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'childs') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$9;
                    var xmiRef_1 = (tmp$9 = reader.nextString()) != null ? tmp$9 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'childs', xmiRef_1));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'wires') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_4 = this.loadWire(reader, context);
                    modelElem.addWires(loadedElem_4);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in CompositeType');
                }
              }
              return modelElem;
            },
            loadNamedElement: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNamedElement();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in NamedElement');
                }
              }
              return modelElem;
            },
            loadComponentType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createComponentType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.set_factoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.set_bean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nature') {
                  var tmp$3;
                  modelElem.set_nature(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'startMethod') {
                  var tmp$4;
                  modelElem.set_startMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$5;
                  modelElem.set_stopMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$6;
                  modelElem.set_updateMethod(this.unescapeJSON((tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.set_dictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$8;
                    var xmiRef_0 = (tmp$8 = reader.nextString()) != null ? tmp$8 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'required') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadPortTypeRef(reader, context);
                    modelElem.addRequired(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'integrationPatterns') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_1 = this.loadIntegrationPattern(reader, context);
                    modelElem.addIntegrationPatterns(loadedElem_1);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'extraFonctionalProperties') {
                  reader.beginObject();
                  var loadedElem_2 = this.loadExtraFonctionalProperty(reader, context);
                  modelElem.set_extraFonctionalProperties(loadedElem_2);
                  reader.endObject();
                }
                 else if (nextName === 'provided') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_3 = this.loadPortTypeRef(reader, context);
                    modelElem.addProvided(loadedElem_3);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ComponentType');
                }
              }
              return modelElem;
            },
            loadGroupType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createGroupType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.set_factoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.set_bean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nature') {
                  var tmp$3;
                  modelElem.set_nature(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'startMethod') {
                  var tmp$4;
                  modelElem.set_startMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$5;
                  modelElem.set_stopMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$6;
                  modelElem.set_updateMethod(this.unescapeJSON((tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.set_dictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$8;
                    var xmiRef_0 = (tmp$8 = reader.nextString()) != null ? tmp$8 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in GroupType');
                }
              }
              return modelElem;
            },
            loadOperation: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createOperation();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'parameters') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadParameter(reader, context);
                    modelElem.addParameters(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'returnType') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'returnType', xmiRef));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Operation');
                }
              }
              return modelElem;
            },
            loadDeployUnit: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createDeployUnit();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'groupName') {
                  var tmp$1;
                  modelElem.set_groupName(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'unitName') {
                  var tmp$2;
                  modelElem.set_unitName(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'version') {
                  var tmp$3;
                  modelElem.set_version(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'url') {
                  var tmp$4;
                  modelElem.set_url(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'hashcode') {
                  var tmp$5;
                  modelElem.set_hashcode(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'type') {
                  var tmp$6;
                  modelElem.set_type(this.unescapeJSON((tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'generated_KMF_ID') {
                  var tmp$7;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'requiredLibs') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$8;
                    var xmiRef = (tmp$8 = reader.nextString()) != null ? tmp$8 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'requiredLibs', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'targetNodeType') {
                  var tmp$9;
                  var xmiRef_0 = (tmp$9 = reader.nextString()) != null ? tmp$9 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'targetNodeType', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in DeployUnit');
                }
              }
              return modelElem;
            },
            loadChannelType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createChannelType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.set_factoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.set_bean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nature') {
                  var tmp$3;
                  modelElem.set_nature(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'startMethod') {
                  var tmp$4;
                  modelElem.set_startMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$5;
                  modelElem.set_stopMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$6;
                  modelElem.set_updateMethod(this.unescapeJSON((tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'lowerBindings') {
                  modelElem.set_lowerBindings(reader.nextInt());
                }
                 else if (nextName === 'upperBindings') {
                  modelElem.set_upperBindings(reader.nextInt());
                }
                 else if (nextName === 'lowerFragments') {
                  modelElem.set_lowerFragments(reader.nextInt());
                }
                 else if (nextName === 'upperFragments') {
                  modelElem.set_upperFragments(reader.nextInt());
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.set_dictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$8;
                    var xmiRef_0 = (tmp$8 = reader.nextString()) != null ? tmp$8 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ChannelType');
                }
              }
              return modelElem;
            },
            loadPortTypeRef: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createPortTypeRef();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'optional') {
                  modelElem.set_optional(reader.nextBoolean());
                }
                 else if (nextName === 'noDependency') {
                  modelElem.set_noDependency(reader.nextBoolean());
                }
                 else if (nextName === 'ref') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'ref', xmiRef));
                }
                 else if (nextName === 'mappings') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadPortTypeMapping(reader, context);
                    modelElem.addMappings(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in PortTypeRef');
                }
              }
              return modelElem;
            },
            loadDictionaryType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createDictionaryType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.set_generated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'attributes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadDictionaryAttribute(reader, context);
                    modelElem.addAttributes(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'defaultValues') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadDictionaryValue(reader, context);
                    modelElem.addDefaultValues(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in DictionaryType');
                }
              }
              return modelElem;
            },
            loadMessagePortType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createMessagePortType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.set_factoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.set_bean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nature') {
                  var tmp$3;
                  modelElem.set_nature(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'synchrone') {
                  modelElem.set_synchrone(reader.nextBoolean());
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$4;
                    var xmiRef = (tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.set_dictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$5;
                    var xmiRef_0 = (tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'filters') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$6;
                    var xmiRef_1 = (tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'filters', xmiRef_1));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in MessagePortType');
                }
              }
              return modelElem;
            },
            loadTypeDefinition: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createTypeDefinition();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.set_factoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.set_bean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nature') {
                  var tmp$3;
                  modelElem.set_nature(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$4;
                    var xmiRef = (tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.set_dictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$5;
                    var xmiRef_0 = (tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in TypeDefinition');
                }
              }
              return modelElem;
            },
            loadTypeLibrary: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createTypeLibrary();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'subTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'subTypes', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in TypeLibrary');
                }
              }
              return modelElem;
            },
            loadNetworkProperty: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNetworkProperty();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.set_name(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'value') {
                  var tmp$1;
                  modelElem.set_value(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'lastCheck') {
                  var tmp$2;
                  modelElem.set_lastCheck(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in NetworkProperty');
                }
              }
              return modelElem;
            }
          }),
          JsonReader: Kotlin.createClass(null, /** @lends _.org.kevoree.loader.JsonReader.prototype */ {
            initialize: function (ins) {
              this.$PEEKED_NONE = 0;
              this.$PEEKED_BEGIN_OBJECT = 1;
              this.$PEEKED_END_OBJECT = 2;
              this.$PEEKED_BEGIN_ARRAY = 3;
              this.$PEEKED_END_ARRAY = 4;
              this.$PEEKED_TRUE = 5;
              this.$PEEKED_FALSE = 6;
              this.$PEEKED_NULL = 7;
              this.$PEEKED_SINGLE_QUOTED = 8;
              this.$PEEKED_DOUBLE_QUOTED = 9;
              this.$PEEKED_UNQUOTED = 10;
              this.$PEEKED_BUFFERED = 11;
              this.$PEEKED_SINGLE_QUOTED_NAME = 12;
              this.$PEEKED_DOUBLE_QUOTED_NAME = 13;
              this.$PEEKED_UNQUOTED_NAME = 14;
              this.$PEEKED_LONG = 15;
              this.$PEEKED_NUMBER = 16;
              this.$PEEKED_EOF = 17;
              this.$lexer = new _.org.kevoree.loader.Lexer(ins);
              this.$token = null;
            },
            get_PEEKED_NONE: function () {
              return this.$PEEKED_NONE;
            },
            get_PEEKED_BEGIN_OBJECT: function () {
              return this.$PEEKED_BEGIN_OBJECT;
            },
            get_PEEKED_END_OBJECT: function () {
              return this.$PEEKED_END_OBJECT;
            },
            get_PEEKED_BEGIN_ARRAY: function () {
              return this.$PEEKED_BEGIN_ARRAY;
            },
            get_PEEKED_END_ARRAY: function () {
              return this.$PEEKED_END_ARRAY;
            },
            get_PEEKED_TRUE: function () {
              return this.$PEEKED_TRUE;
            },
            get_PEEKED_FALSE: function () {
              return this.$PEEKED_FALSE;
            },
            get_PEEKED_NULL: function () {
              return this.$PEEKED_NULL;
            },
            get_PEEKED_SINGLE_QUOTED: function () {
              return this.$PEEKED_SINGLE_QUOTED;
            },
            get_PEEKED_DOUBLE_QUOTED: function () {
              return this.$PEEKED_DOUBLE_QUOTED;
            },
            get_PEEKED_UNQUOTED: function () {
              return this.$PEEKED_UNQUOTED;
            },
            get_PEEKED_BUFFERED: function () {
              return this.$PEEKED_BUFFERED;
            },
            get_PEEKED_SINGLE_QUOTED_NAME: function () {
              return this.$PEEKED_SINGLE_QUOTED_NAME;
            },
            get_PEEKED_DOUBLE_QUOTED_NAME: function () {
              return this.$PEEKED_DOUBLE_QUOTED_NAME;
            },
            get_PEEKED_UNQUOTED_NAME: function () {
              return this.$PEEKED_UNQUOTED_NAME;
            },
            get_PEEKED_LONG: function () {
              return this.$PEEKED_LONG;
            },
            get_PEEKED_NUMBER: function () {
              return this.$PEEKED_NUMBER;
            },
            get_PEEKED_EOF: function () {
              return this.$PEEKED_EOF;
            },
            get_lexer: function () {
              return this.$lexer;
            },
            set_lexer: function (tmp$0) {
              this.$lexer = tmp$0;
            },
            get_token: function () {
              return this.$token;
            },
            set_token: function (tmp$0) {
              this.$token = tmp$0;
            },
            hasNext: function () {
              if (this.get_token() == null) {
                this.doPeek();
              }
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              return t.get_tokenType() !== _.org.kevoree.loader.Type.get_RIGHT_BRACE() && t.get_tokenType() !== _.org.kevoree.loader.Type.get_RIGHT_BRACKET();
            },
            doPeek: function () {
              this.set_token(this.get_lexer().nextToken());
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_COLON() || t.get_tokenType() === _.org.kevoree.loader.Type.get_COMMA())
                this.doPeek();
              return this.get_token();
            },
            peek: function () {
              if (this.get_token() == null)
                this.doPeek();
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              var tmp$1 = t.get_tokenType();
              if (tmp$1 === _.org.kevoree.loader.Type.get_LEFT_BRACE())
                return _.org.kevoree.loader.JsonToken.get_BEGIN_OBJECT();
              else if (tmp$1 === _.org.kevoree.loader.Type.get_RIGHT_BRACE())
                return _.org.kevoree.loader.JsonToken.get_END_OBJECT();
              else if (tmp$1 === _.org.kevoree.loader.Type.get_LEFT_BRACKET())
                return _.org.kevoree.loader.JsonToken.get_BEGIN_ARRAY();
              else if (tmp$1 === _.org.kevoree.loader.Type.get_RIGHT_BRACKET())
                return _.org.kevoree.loader.JsonToken.get_END_ARRAY();
              else if (tmp$1 === _.org.kevoree.loader.Type.get_VALUE())
                return _.org.kevoree.loader.JsonToken.get_NAME();
              else if (tmp$1 === _.org.kevoree.loader.Type.get_EOF())
                return _.org.kevoree.loader.JsonToken.get_END_DOCUMENT();
              else
                return _.org.kevoree.loader.JsonToken.get_NULL();
            },
            beginObject: function () {
              if (this.get_token() == null) {
                this.doPeek();
              }
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_LEFT_BRACE()) {
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected LEFT_BRACE but was ' + this.peek());
              }
            },
            endObject: function () {
              if (this.get_token() == null)
                this.doPeek();
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_RIGHT_BRACE()) {
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected RIGHT_BRACE but was ' + this.peek());
              }
            },
            beginArray: function () {
              if (this.get_token() == null)
                this.doPeek();
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_LEFT_BRACKET()) {
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected LEFT_BRACKET but was ' + this.peek());
              }
            },
            endArray: function () {
              if (this.get_token() == null)
                this.doPeek();
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_RIGHT_BRACKET()) {
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected RIGHT_BRACKET but was ' + this.peek());
              }
            },
            nextBoolean: function () {
              if (this.get_token() == null)
                this.doPeek();
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              var ret = false;
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_VALUE()) {
                var tmp$1 = t.get_value();
                if (tmp$1 === true || tmp$1 === 'true')
                  ret = true;
                else if (tmp$1 === false || tmp$1 === 'false')
                  ret = false;
                else
                  ret = false;
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected VALUE(Boolean) but was ' + this.peek());
              }
              return ret;
            },
            nextString: function () {
              if (this.get_token() == null) {
                this.doPeek();
              }
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              var ret = '';
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_VALUE()) {
                var tmp$1;
                ret = (tmp$1 = t.get_value()) != null ? tmp$1 : Kotlin.throwNPE();
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected VALUE(String) but was ' + this.peek());
              }
              return ret;
            },
            nextInt: function () {
              if (this.get_token() == null)
                this.doPeek();
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              var ret = 42;
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_VALUE()) {
                var tmp$1;
                var tret = _.java.lang.IntegerParser.parseInt((tmp$1 = t.get_value()) != null ? tmp$1 : Kotlin.throwNPE());
                if (tret != null) {
                  ret = tret;
                }
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected VALUE(Int) but was ' + this.peek());
              }
              return ret;
            },
            nextLong: function () {
              if (this.get_token() == null)
                this.doPeek();
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              var ret = 0.0;
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_VALUE()) {
                var tmp$1;
                var tret = _.java.lang.LongParser.parseLong((tmp$1 = t.get_value()) != null ? tmp$1 : Kotlin.throwNPE());
                if (tret != null) {
                  ret = tret;
                }
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected VALUE(Long) but was ' + this.peek());
              }
              return ret;
            },
            nextName: function () {
              if (this.get_token() == null) {
                this.doPeek();
              }
              var tmp$0;
              var t = (tmp$0 = this.get_token()) != null ? tmp$0 : Kotlin.throwNPE();
              var ret = '';
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_VALUE()) {
                var tmp$1;
                ret = (tmp$1 = t.get_value()) != null ? tmp$1 : Kotlin.throwNPE();
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected VALUE(Name) but was ' + this.peek());
              }
              return ret;
            }
          }),
          JSONResolveCommand: Kotlin.createClass(classes.cn, /** @lends _.org.kevoree.loader.JSONResolveCommand.prototype */ {
            initialize: function (context, target, mutatorType, refName, ref) {
              this.$context = context;
              this.$target = target;
              this.$mutatorType = mutatorType;
              this.$refName = refName;
              this.$ref = ref;
            },
            get_context: function () {
              return this.$context;
            },
            get_target: function () {
              return this.$target;
            },
            get_mutatorType: function () {
              return this.$mutatorType;
            },
            get_refName: function () {
              return this.$refName;
            },
            get_ref: function () {
              return this.$ref;
            },
            run: function () {
              var referencedElement = null;
              var i = 0;
              while (referencedElement == null && i < this.get_context().get_loadedRoots().size()) {
                var tmp$0;
                referencedElement = (tmp$0 = this.get_context().get_loadedRoots().get(i++)) != null ? tmp$0.findByPath(this.get_ref()) : null;
              }
              if (referencedElement != null) {
                this.get_target().reflexiveMutator(this.get_mutatorType(), this.get_refName(), referencedElement);
                return;
              }
              throw new Error('KMF Load error : reference ' + this.get_ref() + ' not found in map when trying to ' + this.get_mutatorType() + ' ' + this.get_refName() + ' on ' + Kotlin.toString(this.get_target()));
            }
          }),
          Token: Kotlin.createClass(null, /** @lends _.org.kevoree.loader.Token.prototype */ {
            initialize: function (tokenType, value) {
              this.$tokenType = tokenType;
              this.$value = value;
            },
            get_tokenType: function () {
              return this.$tokenType;
            },
            get_value: function () {
              return this.$value;
            },
            toString: function () {
              var tmp$0;
              if (this.get_value() != null) {
                tmp$0 = ' (' + this.get_value() + ')';
              }
               else {
                tmp$0 = '';
              }
              var v = tmp$0;
              var result = Kotlin.toString(this.get_tokenType()) + v;
              return result;
            }
          }),
          Lexer: Kotlin.createClass(null, /** @lends _.org.kevoree.loader.Lexer.prototype */ {
            initialize: function (inputStream) {
              this.$inputStream = inputStream;
              this.$bytes = this.get_inputStream().readBytes();
              this.$EOF = new _.org.kevoree.loader.Token(_.org.kevoree.loader.Type.get_EOF(), null);
              this.$index = 0;
              this.$BOOLEAN_LETTERS = null;
              this.$DIGIT = null;
            },
            get_inputStream: function () {
              return this.$inputStream;
            },
            get_bytes: function () {
              return this.$bytes;
            },
            get_EOF: function () {
              return this.$EOF;
            },
            get_index: function () {
              return this.$index;
            },
            set_index: function (tmp$0) {
              this.$index = tmp$0;
            },
            isSpace: function (c) {
              return c === ' ' || c === '\r' || c === '\n' || c === '\t';
            },
            nextChar: function () {
              var tmp$0, tmp$1, tmp$2;
              return (tmp$2 = this.get_bytes()[tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1]) != null ? tmp$2 : Kotlin.throwNPE();
            },
            peekChar: function () {
              var tmp$0;
              return (tmp$0 = this.get_bytes()[this.get_index()]) != null ? tmp$0 : Kotlin.throwNPE();
            },
            isDone: function () {
              return this.get_index() >= this.get_bytes().length;
            },
            get_BOOLEAN_LETTERS: function () {
              return this.$BOOLEAN_LETTERS;
            },
            set_BOOLEAN_LETTERS: function (tmp$0) {
              this.$BOOLEAN_LETTERS = tmp$0;
            },
            isBooleanLetter: function (c) {
              if (this.get_BOOLEAN_LETTERS() == null) {
                this.set_BOOLEAN_LETTERS(new Kotlin.PrimitiveHashSet());
                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7;
                ((tmp$0 = this.get_BOOLEAN_LETTERS()) != null ? tmp$0 : Kotlin.throwNPE()).add('f');
                ((tmp$1 = this.get_BOOLEAN_LETTERS()) != null ? tmp$1 : Kotlin.throwNPE()).add('a');
                ((tmp$2 = this.get_BOOLEAN_LETTERS()) != null ? tmp$2 : Kotlin.throwNPE()).add('l');
                ((tmp$3 = this.get_BOOLEAN_LETTERS()) != null ? tmp$3 : Kotlin.throwNPE()).add('s');
                ((tmp$4 = this.get_BOOLEAN_LETTERS()) != null ? tmp$4 : Kotlin.throwNPE()).add('e');
                ((tmp$5 = this.get_BOOLEAN_LETTERS()) != null ? tmp$5 : Kotlin.throwNPE()).add('t');
                ((tmp$6 = this.get_BOOLEAN_LETTERS()) != null ? tmp$6 : Kotlin.throwNPE()).add('r');
                ((tmp$7 = this.get_BOOLEAN_LETTERS()) != null ? tmp$7 : Kotlin.throwNPE()).add('u');
              }
              var tmp$8;
              return ((tmp$8 = this.get_BOOLEAN_LETTERS()) != null ? tmp$8 : Kotlin.throwNPE()).contains(c);
            },
            get_DIGIT: function () {
              return this.$DIGIT;
            },
            set_DIGIT: function (tmp$0) {
              this.$DIGIT = tmp$0;
            },
            isDigit: function (c) {
              if (this.get_DIGIT() == null) {
                this.set_DIGIT(new Kotlin.PrimitiveHashSet());
                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7, tmp$8, tmp$9;
                ((tmp$0 = this.get_DIGIT()) != null ? tmp$0 : Kotlin.throwNPE()).add('0');
                ((tmp$1 = this.get_DIGIT()) != null ? tmp$1 : Kotlin.throwNPE()).add('1');
                ((tmp$2 = this.get_DIGIT()) != null ? tmp$2 : Kotlin.throwNPE()).add('2');
                ((tmp$3 = this.get_DIGIT()) != null ? tmp$3 : Kotlin.throwNPE()).add('3');
                ((tmp$4 = this.get_DIGIT()) != null ? tmp$4 : Kotlin.throwNPE()).add('4');
                ((tmp$5 = this.get_DIGIT()) != null ? tmp$5 : Kotlin.throwNPE()).add('5');
                ((tmp$6 = this.get_DIGIT()) != null ? tmp$6 : Kotlin.throwNPE()).add('6');
                ((tmp$7 = this.get_DIGIT()) != null ? tmp$7 : Kotlin.throwNPE()).add('7');
                ((tmp$8 = this.get_DIGIT()) != null ? tmp$8 : Kotlin.throwNPE()).add('8');
                ((tmp$9 = this.get_DIGIT()) != null ? tmp$9 : Kotlin.throwNPE()).add('9');
              }
              var tmp$10;
              return ((tmp$10 = this.get_DIGIT()) != null ? tmp$10 : Kotlin.throwNPE()).contains(c);
            },
            isValueLetter: function (c) {
              return c === '-' || c === '+' || c === '.' || this.isDigit(c) || this.isBooleanLetter(c);
            },
            nextToken: function () {
              if (this.isDone()) {
                return this.get_EOF();
              }
              var tokenType = _.org.kevoree.loader.Type.get_EOF();
              var c = this.nextChar();
              var currentValue = new _.java.lang.StringBuilder();
              var jsonValue = null;
              while (!this.isDone() && this.isSpace(c)) {
                c = this.nextChar();
              }
              if ('"' === c) {
                tokenType = _.org.kevoree.loader.Type.get_VALUE();
                if (!this.isDone()) {
                  c = this.nextChar();
                  while (this.get_index() < this.get_bytes().length && c !== '"') {
                    currentValue.append_0(c);
                    if (c === '\\' && this.get_index() < this.get_bytes().length) {
                      c = this.nextChar();
                      currentValue.append_0(c);
                    }
                    c = this.nextChar();
                  }
                  jsonValue = currentValue.toString();
                }
                 else {
                  throw new Kotlin.RuntimeException('Unterminated string');
                }
              }
               else if ('{' === c) {
                tokenType = _.org.kevoree.loader.Type.get_LEFT_BRACE();
              }
               else if ('}' === c) {
                tokenType = _.org.kevoree.loader.Type.get_RIGHT_BRACE();
              }
               else if ('[' === c) {
                tokenType = _.org.kevoree.loader.Type.get_LEFT_BRACKET();
              }
               else if (']' === c) {
                tokenType = _.org.kevoree.loader.Type.get_RIGHT_BRACKET();
              }
               else if (':' === c) {
                tokenType = _.org.kevoree.loader.Type.get_COLON();
              }
               else if (',' === c) {
                tokenType = _.org.kevoree.loader.Type.get_COMMA();
              }
               else if (!this.isDone()) {
                while (this.isValueLetter(c)) {
                  currentValue.append_0(c);
                  if (!this.isValueLetter(this.peekChar())) {
                    break;
                  }
                   else {
                    c = this.nextChar();
                  }
                }
                var v = currentValue.toString();
                if (Kotlin.equals('true', v.toLowerCase())) {
                  jsonValue = true;
                }
                 else if (Kotlin.equals('false', v.toLowerCase())) {
                  jsonValue = false;
                }
                 else {
                  jsonValue = v.toLowerCase();
                }
                tokenType = _.org.kevoree.loader.Type.get_VALUE();
              }
               else {
                tokenType = _.org.kevoree.loader.Type.get_EOF();
              }
              return new _.org.kevoree.loader.Token(tokenType, jsonValue);
            }
          }),
          LoadingContext: Kotlin.createClass(null, /** @lends _.org.kevoree.loader.LoadingContext.prototype */ {
            initialize: function () {
              this.$loadedRoots = new Kotlin.ArrayList(0);
              this.$map = new Kotlin.PrimitiveHashMap(0);
              this.$elementsCount = new Kotlin.PrimitiveHashMap(0);
              this.$resolvers = new Kotlin.ArrayList(0);
              this.$stats = new Kotlin.PrimitiveHashMap(0);
            },
            get_loadedRoots: function () {
              return this.$loadedRoots;
            },
            set_loadedRoots: function (tmp$0) {
              this.$loadedRoots = tmp$0;
            },
            get_map: function () {
              return this.$map;
            },
            get_elementsCount: function () {
              return this.$elementsCount;
            },
            get_resolvers: function () {
              return this.$resolvers;
            },
            get_stats: function () {
              return this.$stats;
            }
          }),
          ResolveCommand: classes.cn
        }),
        log: Kotlin.definePackage({
          Logger: Kotlin.createClass(null, /** @lends _.org.kevoree.log.Logger.prototype */ {
            initialize: function () {
              this.$firstLogTime = (new Date()).getTime();
              this.$error_msg = ' ERROR: ';
              this.$warn_msg = ' WARN: ';
              this.$info_msg = ' INFO: ';
              this.$debug_msg = ' DEBUG: ';
              this.$trace_msg = ' TRACE: ';
              this.$category = null;
            },
            get_firstLogTime: function () {
              return this.$firstLogTime;
            },
            get_error_msg: function () {
              return this.$error_msg;
            },
            get_warn_msg: function () {
              return this.$warn_msg;
            },
            get_info_msg: function () {
              return this.$info_msg;
            },
            get_debug_msg: function () {
              return this.$debug_msg;
            },
            get_trace_msg: function () {
              return this.$trace_msg;
            },
            get_category: function () {
              return this.$category;
            },
            set_category: function (tmp$0) {
              this.$category = tmp$0;
            },
            setCategory: function (category) {
              this.set_category(category);
            },
            log: function (level, message, ex) {
              var builder = new _.java.lang.StringBuilder();
              var time = (new Date()).getTime() - this.get_firstLogTime();
              var minutes = time / (1000 * 60) | 0;
              var seconds = (time / 1000 | 0) % 60;
              if (minutes <= 9)
                builder.append_0('0');
              builder.append(Kotlin.toString(minutes));
              builder.append_0(':');
              if (seconds <= 9)
                builder.append_0('0');
              builder.append(Kotlin.toString(seconds));
              if (level === _.org.kevoree.log.Log.get_LEVEL_ERROR()) {
                builder.append(this.get_error_msg());
              }
               else if (level === _.org.kevoree.log.Log.get_LEVEL_WARN()) {
                builder.append(this.get_warn_msg());
              }
               else if (level === _.org.kevoree.log.Log.get_LEVEL_INFO()) {
                builder.append(this.get_info_msg());
              }
               else if (level === _.org.kevoree.log.Log.get_LEVEL_DEBUG()) {
                builder.append(this.get_debug_msg());
              }
               else if (level === _.org.kevoree.log.Log.get_LEVEL_TRACE()) {
                builder.append(this.get_trace_msg());
              }
               else {
              }
              if (this.get_category() != null) {
                builder.append_0('[');
                var tmp$0;
                builder.append(((tmp$0 = this.get_category()) != null ? tmp$0 : Kotlin.throwNPE()).toString());
                builder.append('] ');
              }
              builder.append(message);
              if (ex != null) {
                builder.append(Kotlin.toString(ex.getMessage()));
              }
              this.print(builder.toString());
            },
            print: function (message) {
              Kotlin.println(message);
            }
          })
        }),
        modeling: Kotlin.definePackage({
          api: Kotlin.definePackage({
            compare: Kotlin.definePackage({
              ModelCompare: classes.cq
            }),
            events: Kotlin.definePackage({
              ModelElementListener: classes.cr,
              ModelEvent: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.events.ModelEvent.prototype */ {
                initialize: function (internal_sourcePath, internal_etype, internal_elementAttributeType, internal_elementAttributeName, internal_value) {
                  this.$internal_sourcePath = internal_sourcePath;
                  this.$internal_etype = internal_etype;
                  this.$internal_elementAttributeType = internal_elementAttributeType;
                  this.$internal_elementAttributeName = internal_elementAttributeName;
                  this.$internal_value = internal_value;
                },
                get_internal_sourcePath: function () {
                  return this.$internal_sourcePath;
                },
                get_internal_etype: function () {
                  return this.$internal_etype;
                },
                get_internal_elementAttributeType: function () {
                  return this.$internal_elementAttributeType;
                },
                get_internal_elementAttributeName: function () {
                  return this.$internal_elementAttributeName;
                },
                get_internal_value: function () {
                  return this.$internal_value;
                },
                getSourcePath: function () {
                  return this.get_internal_sourcePath();
                },
                getType: function () {
                  return this.get_internal_etype();
                },
                getElementAttributeType: function () {
                  return this.get_internal_elementAttributeType();
                },
                getElementAttributeName: function () {
                  return this.get_internal_elementAttributeName();
                },
                getValue: function () {
                  return this.get_internal_value();
                },
                toString: function () {
                  return 'ModelEvent[src:' + this.getSourcePath() + ', type:' + this.getType() + ', elementAttributeType:' + this.getElementAttributeType() + ', elementAttributeName:' + this.getElementAttributeName() + ', value:' + this.getValue() + ']';
                }
              }),
              ModelTreeListener: classes.cs
            }),
            KMFContainer: classes.ct,
            KMFFactory: classes.cu,
            ModelCloner: classes.cv,
            ModelLoader: classes.cw,
            ModelSerializer: classes.cx,
            trace: Kotlin.definePackage({
              DefaultTraceConverter: Kotlin.createClass(classes.cz, /** @lends _.org.kevoree.modeling.api.trace.DefaultTraceConverter.prototype */ {
                initialize: function () {
                  this.$metaClassNameEquivalence_1 = new Kotlin.PrimitiveHashMap(0);
                  this.$metaClassNameEquivalence_2 = new Kotlin.PrimitiveHashMap(0);
                  this.$attNameEquivalence_1 = new Kotlin.PrimitiveHashMap(0);
                  this.$attNameEquivalence_2 = new Kotlin.PrimitiveHashMap(0);
                },
                get_metaClassNameEquivalence_1: function () {
                  return this.$metaClassNameEquivalence_1;
                },
                set_metaClassNameEquivalence_1: function (tmp$0) {
                  this.$metaClassNameEquivalence_1 = tmp$0;
                },
                get_metaClassNameEquivalence_2: function () {
                  return this.$metaClassNameEquivalence_2;
                },
                set_metaClassNameEquivalence_2: function (tmp$0) {
                  this.$metaClassNameEquivalence_2 = tmp$0;
                },
                get_attNameEquivalence_1: function () {
                  return this.$attNameEquivalence_1;
                },
                set_attNameEquivalence_1: function (tmp$0) {
                  this.$attNameEquivalence_1 = tmp$0;
                },
                get_attNameEquivalence_2: function () {
                  return this.$attNameEquivalence_2;
                },
                set_attNameEquivalence_2: function (tmp$0) {
                  this.$attNameEquivalence_2 = tmp$0;
                },
                addMetaClassEquivalence: function (name1, name2) {
                  this.get_metaClassNameEquivalence_1().put(name1, name2);
                  this.get_metaClassNameEquivalence_2().put(name2, name2);
                },
                addAttEquivalence: function (name1, name2) {
                  var fqnArray_1 = Kotlin.splitString(name1, '#');
                  var fqnArray_2 = Kotlin.splitString(name1, '#');
                  this.get_attNameEquivalence_1().put(name1, name2);
                  this.get_attNameEquivalence_2().put(name2, name2);
                },
                convert: function (trace) {
                  if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddTrace)) {
                    var addTrace = trace != null ? trace : Kotlin.throwNPE();
                    var newTrace = new _.org.kevoree.modeling.api.trace.ModelAddTrace(addTrace.get_srcPath(), addTrace.get_refName(), addTrace.get_previousPath(), this.tryConvertClassName(addTrace.get_typeName()));
                    return newTrace;
                  }
                   else if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelSetTrace)) {
                    var setTrace = trace != null ? trace : Kotlin.throwNPE();
                    var newTrace_0 = new _.org.kevoree.modeling.api.trace.ModelSetTrace(setTrace.get_srcPath(), setTrace.get_refName(), setTrace.get_objPath(), setTrace.get_content(), this.tryConvertClassName(setTrace.get_typeName()));
                    return newTrace_0;
                  }
                   else {
                    return trace;
                  }
                },
                tryConvertPath: function (previousPath) {
                  if (previousPath == null) {
                    return null;
                  }
                  return previousPath;
                },
                tryConvertClassName: function (previousClassName) {
                  if (previousClassName == null) {
                    return null;
                  }
                  if (this.get_metaClassNameEquivalence_1().containsKey(previousClassName)) {
                    var tmp$0;
                    return (tmp$0 = this.get_metaClassNameEquivalence_1().get(previousClassName)) != null ? tmp$0 : Kotlin.throwNPE();
                  }
                  if (this.get_metaClassNameEquivalence_2().containsKey(previousClassName)) {
                    var tmp$1;
                    return (tmp$1 = this.get_metaClassNameEquivalence_2().get(previousClassName)) != null ? tmp$1 : Kotlin.throwNPE();
                  }
                  return previousClassName;
                },
                tryConvertAttName: function (previousAttName) {
                  if (previousAttName == null) {
                    return null;
                  }
                  var FQNattName = previousAttName;
                  if (this.get_attNameEquivalence_1().containsKey(FQNattName)) {
                    var tmp$0;
                    return (tmp$0 = this.get_attNameEquivalence_1().get(FQNattName)) != null ? tmp$0 : Kotlin.throwNPE();
                  }
                  if (this.get_attNameEquivalence_2().containsKey(FQNattName)) {
                    var tmp$1;
                    return (tmp$1 = this.get_attNameEquivalence_2().get(FQNattName)) != null ? tmp$1 : Kotlin.throwNPE();
                  }
                  return previousAttName;
                }
              }),
              Event2Trace: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.trace.Event2Trace.prototype */ {
                initialize: function (compare) {
                  this.$compare = compare;
                },
                get_compare: function () {
                  return this.$compare;
                },
                convert: function (event) {
                  var result = new Kotlin.ArrayList(0);
                  var tmp$0 = event.getType();
                  if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                    var tmp$1, tmp$2, tmp$3, tmp$4;
                    result.add(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$1 = event.getSourcePath()) != null ? tmp$1 : Kotlin.throwNPE(), (tmp$2 = event.getElementAttributeName()) != null ? tmp$2 : Kotlin.throwNPE(), (tmp$4 = ((tmp$3 = event.getValue()) != null ? tmp$3 : Kotlin.throwNPE()).path()) != null ? tmp$4 : Kotlin.throwNPE()));
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                    var tmp$5, tmp$6;
                    result.add(new _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace((tmp$5 = event.getSourcePath()) != null ? tmp$5 : Kotlin.throwNPE(), (tmp$6 = event.getElementAttributeName()) != null ? tmp$6 : Kotlin.throwNPE()));
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                    var tmp$7, tmp$8, tmp$9;
                    var casted = (tmp$7 = event.getValue()) != null ? tmp$7 : Kotlin.throwNPE();
                    var traces = this.get_compare().inter(casted, casted);
                    result.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$8 = event.getSourcePath()) != null ? tmp$8 : Kotlin.throwNPE(), (tmp$9 = event.getElementAttributeName()) != null ? tmp$9 : Kotlin.throwNPE(), casted.path(), casted.metaClassName()));
                    result.addAll(traces.getTraces());
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                    var tmp$10;
                    var casted_0 = (tmp$10 = event.getValue()) != null ? tmp$10 : Kotlin.throwNPE();
                    {
                      var tmp$11 = (casted_0 != null ? casted_0 : Kotlin.throwNPE()).iterator();
                      while (tmp$11.hasNext()) {
                        var elem = tmp$11.next();
                        var elemCasted = elem != null ? elem : Kotlin.throwNPE();
                        var traces_0 = this.get_compare().inter(elemCasted, elemCasted);
                        var tmp$12, tmp$13;
                        result.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$12 = event.getSourcePath()) != null ? tmp$12 : Kotlin.throwNPE(), (tmp$13 = event.getElementAttributeName()) != null ? tmp$13 : Kotlin.throwNPE(), elemCasted.path(), elemCasted.metaClassName()));
                        result.addAll(traces_0.getTraces());
                      }
                    }
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                    if (event.getElementAttributeType() === _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE()) {
                      var tmp$14, tmp$15;
                      result.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = event.getSourcePath()) != null ? tmp$14 : Kotlin.throwNPE(), (tmp$15 = event.getElementAttributeName()) != null ? tmp$15 : Kotlin.throwNPE(), null, Kotlin.toString(event.getValue()), null));
                    }
                     else {
                      var tmp$16, tmp$17, tmp$18;
                      result.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = event.getSourcePath()) != null ? tmp$16 : Kotlin.throwNPE(), (tmp$17 = event.getElementAttributeName()) != null ? tmp$17 : Kotlin.throwNPE(), ((tmp$18 = event.getValue()) != null ? tmp$18 : Kotlin.throwNPE()).path(), null, null));
                    }
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  }
                   else {
                    throw new Error("Can't convert event : " + event);
                  }
                  return this.get_compare().createSequence().populate(result);
                }
              }),
              ModelTrace: classes.cy,
              ModelAddTrace: Kotlin.createClass(classes.cy, /** @lends _.org.kevoree.modeling.api.trace.ModelAddTrace.prototype */ {
                initialize: function (srcPath, refName, previousPath, typeName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$previousPath = previousPath;
                  this.$typeName = typeName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_previousPath: function () {
                  return this.$previousPath;
                },
                get_typeName: function () {
                  return this.$typeName;
                },
                toString: function () {
                  var buffer = new _.java.lang.StringBuilder();
                  buffer.append('{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_ADD() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '"');
                  if (this.get_previousPath() != null) {
                    buffer.append(', "previouspath" : "' + this.get_previousPath() + '"');
                  }
                  if (this.get_typeName() != null) {
                    buffer.append(', "typename" : "' + this.get_typeName() + '"');
                  }
                  buffer.append('}');
                  return buffer.toString();
                }
              }),
              ModelAddAllTrace: Kotlin.createClass(classes.cy, /** @lends _.org.kevoree.modeling.api.trace.ModelAddAllTrace.prototype */ {
                initialize: function (srcPath, refName, previousPath, typeName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$previousPath = previousPath;
                  this.$typeName = typeName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_previousPath: function () {
                  return this.$previousPath;
                },
                get_typeName: function () {
                  return this.$typeName;
                },
                mkString: function (ss) {
                  if (ss == null) {
                    return null;
                  }
                  var buffer = new _.java.lang.StringBuilder();
                  var isFirst = true;
                  {
                    var tmp$0 = ss.iterator();
                    while (tmp$0.hasNext()) {
                      var s = tmp$0.next();
                      if (!isFirst) {
                        buffer.append(',');
                      }
                      buffer.append(s);
                      isFirst = false;
                    }
                  }
                  return buffer.toString();
                },
                toString: function () {
                  var buffer = new _.java.lang.StringBuilder();
                  buffer.append('{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '"');
                  if (this.get_previousPath() != null) {
                    buffer.append(', "previouspath" : "' + this.mkString(this.get_previousPath()) + '"');
                  }
                  if (this.get_typeName() != null) {
                    buffer.append(', "typename" : "' + this.mkString(this.get_typeName()) + '"');
                  }
                  buffer.append('}');
                  return buffer.toString();
                }
              }),
              ModelRemoveTrace: Kotlin.createClass(classes.cy, /** @lends _.org.kevoree.modeling.api.trace.ModelRemoveTrace.prototype */ {
                initialize: function (srcPath, refName, objPath) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$objPath = objPath;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_objPath: function () {
                  return this.$objPath;
                },
                toString: function () {
                  return '{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_REMOVE() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '", "objpath" : "' + this.get_objPath() + '" }';
                }
              }),
              ModelRemoveAllTrace: Kotlin.createClass(classes.cy, /** @lends _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace.prototype */ {
                initialize: function (srcPath, refName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                toString: function () {
                  return '{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '" }';
                }
              }),
              ModelSetTrace: Kotlin.createClass(classes.cy, /** @lends _.org.kevoree.modeling.api.trace.ModelSetTrace.prototype */ {
                initialize: function (srcPath, refName, objPath, content, typeName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$objPath = objPath;
                  this.$content = content;
                  this.$typeName = typeName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_objPath: function () {
                  return this.$objPath;
                },
                get_content: function () {
                  return this.$content;
                },
                get_typeName: function () {
                  return this.$typeName;
                },
                toString: function () {
                  var buffer = new _.java.lang.StringBuilder();
                  buffer.append('{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_SET() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '"');
                  if (this.get_objPath() != null) {
                    buffer.append(', "objpath" : "' + this.get_objPath() + '"');
                  }
                  if (this.get_content() != null) {
                    buffer.append(', "content" : "' + this.get_content() + '"');
                  }
                  if (this.get_typeName() != null) {
                    buffer.append(', "typename" : "' + this.get_typeName() + '"');
                  }
                  buffer.append('}');
                  return buffer.toString();
                }
              }),
              ModelTraceApplicator: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.trace.ModelTraceApplicator.prototype */ {
                initialize: function (targetModel, factory) {
                  this.$targetModel = targetModel;
                  this.$factory = factory;
                  this.$pendingObj = null;
                  this.$pendingParent = null;
                  this.$pendingParentRefName = null;
                  this.$pendingObjPath = null;
                },
                get_targetModel: function () {
                  return this.$targetModel;
                },
                get_factory: function () {
                  return this.$factory;
                },
                get_pendingObj: function () {
                  return this.$pendingObj;
                },
                set_pendingObj: function (tmp$0) {
                  this.$pendingObj = tmp$0;
                },
                get_pendingParent: function () {
                  return this.$pendingParent;
                },
                set_pendingParent: function (tmp$0) {
                  this.$pendingParent = tmp$0;
                },
                get_pendingParentRefName: function () {
                  return this.$pendingParentRefName;
                },
                set_pendingParentRefName: function (tmp$0) {
                  this.$pendingParentRefName = tmp$0;
                },
                get_pendingObjPath: function () {
                  return this.$pendingObjPath;
                },
                set_pendingObjPath: function (tmp$0) {
                  this.$pendingObjPath = tmp$0;
                },
                tryClosePending: function (srcPath) {
                  if (this.get_pendingObj() != null && !Kotlin.equals(this.get_pendingObjPath(), srcPath)) {
                    var tmp$0, tmp$1;
                    ((tmp$0 = this.get_pendingParent()) != null ? tmp$0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), (tmp$1 = this.get_pendingParentRefName()) != null ? tmp$1 : Kotlin.throwNPE(), this.get_pendingObj());
                    this.set_pendingObj(null);
                    this.set_pendingObjPath(null);
                    this.set_pendingParentRefName(null);
                    this.set_pendingParent(null);
                  }
                },
                createOrAdd: function (previousPath, target, refName, potentialTypeName) {
                  var tmp$0;
                  if (previousPath != null) {
                    tmp$0 = this.get_targetModel().findByPath(previousPath);
                  }
                   else {
                    tmp$0 = null;
                  }
                  var targetElem = tmp$0;
                  if (targetElem != null) {
                    target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), refName, targetElem);
                  }
                   else {
                    this.set_pendingObj(this.get_factory().create(potentialTypeName != null ? potentialTypeName : Kotlin.throwNPE()));
                    this.set_pendingObjPath(previousPath);
                    this.set_pendingParentRefName(refName);
                    this.set_pendingParent(target);
                  }
                },
                applyTraceOnModel: function (traceSeq) {
                  {
                    var tmp$0 = traceSeq.getTraces().iterator();
                    while (tmp$0.hasNext()) {
                      var trace = tmp$0.next();
                      var target = this.get_targetModel();
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddTrace)) {
                        var castedTrace = trace != null ? trace : Kotlin.throwNPE();
                        this.tryClosePending('#Fake#Path');
                        if (!Kotlin.equals(trace.get_srcPath(), '')) {
                          var tmp$1;
                          target = (tmp$1 = this.get_targetModel().findByPath(castedTrace.get_srcPath())) != null ? tmp$1 : Kotlin.throwNPE();
                        }
                        this.createOrAdd(castedTrace.get_previousPath(), target, castedTrace.get_refName(), castedTrace.get_typeName());
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddAllTrace)) {
                        var castedTrace_0 = trace != null ? trace : Kotlin.throwNPE();
                        this.tryClosePending('#Fake#Path');
                        var i = 0;
                        var tmp$2;
                        {
                          var tmp$3 = ((tmp$2 = castedTrace_0.get_previousPath()) != null ? tmp$2 : Kotlin.throwNPE()).iterator();
                          while (tmp$3.hasNext()) {
                            var path = tmp$3.next();
                            var tmp$4;
                            this.createOrAdd(path, target, castedTrace_0.get_refName(), ((tmp$4 = castedTrace_0.get_typeName()) != null ? tmp$4 : Kotlin.throwNPE()).get(i));
                            i++;
                          }
                        }
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelRemoveTrace)) {
                        var castedTrace_1 = trace != null ? trace : Kotlin.throwNPE();
                        this.tryClosePending(trace.get_srcPath());
                        var tempTarget = this.get_targetModel();
                        if (!Kotlin.equals(trace.get_srcPath(), '')) {
                          tempTarget = this.get_targetModel().findByPath(castedTrace_1.get_srcPath());
                        }
                        if (tempTarget != null) {
                          (tempTarget != null ? tempTarget : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), castedTrace_1.get_refName(), this.get_targetModel().findByPath(castedTrace_1.get_objPath()));
                        }
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace)) {
                        var castedTrace_2 = trace != null ? trace : Kotlin.throwNPE();
                        this.tryClosePending(trace.get_srcPath());
                        var tempTarget_0 = this.get_targetModel();
                        if (!Kotlin.equals(trace.get_srcPath(), '')) {
                          tempTarget_0 = this.get_targetModel().findByPath(castedTrace_2.get_srcPath());
                        }
                        if (tempTarget_0 != null) {
                          (tempTarget_0 != null ? tempTarget_0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), castedTrace_2.get_refName(), null);
                        }
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelSetTrace)) {
                        var castedTrace_3 = trace != null ? trace : Kotlin.throwNPE();
                        this.tryClosePending(trace.get_srcPath());
                        if (!Kotlin.equals(trace.get_srcPath(), '') && !Kotlin.equals(castedTrace_3.get_srcPath(), this.get_pendingObjPath())) {
                          var tmp$5;
                          target = (tmp$5 = this.get_targetModel().findByPath(castedTrace_3.get_srcPath())) != null ? tmp$5 : Kotlin.throwNPE();
                        }
                         else {
                          if (Kotlin.equals(castedTrace_3.get_srcPath(), this.get_pendingObjPath()) && this.get_pendingObj() != null) {
                            var tmp$6;
                            target = (tmp$6 = this.get_pendingObj()) != null ? tmp$6 : Kotlin.throwNPE();
                          }
                        }
                        if (castedTrace_3.get_content() != null) {
                          target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), castedTrace_3.get_refName(), castedTrace_3.get_content());
                        }
                         else {
                          var tmp$8;
                          if (castedTrace_3.get_objPath() != null) {
                            var tmp$7;
                            tmp$8 = this.get_targetModel().findByPath((tmp$7 = castedTrace_3.get_objPath()) != null ? tmp$7 : Kotlin.throwNPE());
                          }
                           else {
                            tmp$8 = null;
                          }
                          var targetContentPath = tmp$8;
                          if (targetContentPath != null) {
                            target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), castedTrace_3.get_refName(), targetContentPath);
                          }
                           else {
                            if (castedTrace_3.get_typeName() != null && !Kotlin.equals(castedTrace_3.get_typeName(), '')) {
                              this.createOrAdd(castedTrace_3.get_objPath(), target, castedTrace_3.get_refName(), castedTrace_3.get_typeName());
                            }
                             else {
                              target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), castedTrace_3.get_refName(), targetContentPath);
                            }
                          }
                        }
                      }
                    }
                  }
                  this.tryClosePending('#Fake#Path');
                }
              }),
              TraceConverter: classes.cz,
              TraceSequence: classes.c10
            }),
            util: Kotlin.definePackage({
              ModelVisitor: classes.c11
            })
          })
        }),
        serializer: Kotlin.definePackage({
          JSONModelSerializer: Kotlin.createClass(classes.cx, /** @lends _.org.kevoree.serializer.JSONModelSerializer.prototype */ {
            initialize: function () {
            },
            serialize: function (oMS) {
              var oo = new _.java.io.OutputStream();
              this.serialize_0(oMS, oo);
              oo.flush();
              return oo.get_result();
            },
            serialize_0: function (oMS, ostream) {
              var wt = new _.java.io.PrintStream(ostream);
              if (Kotlin.isType(oMS, _.org.kevoree.impl.ComponentInstanceImpl) || Kotlin.isType(oMS, _.org.kevoree.ComponentInstance)) {
                var context = this.getComponentInstanceJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ComponentInstancetoJson(oMS, context, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.ComponentType)) {
                var context_0 = this.getComponentTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ComponentTypetoJson(oMS, context_0, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ContainerNodeImpl) || Kotlin.isType(oMS, _.org.kevoree.ContainerNode)) {
                var context_1 = this.getContainerNodeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ContainerNodetoJson(oMS, context_1, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ContainerRootImpl) || Kotlin.isType(oMS, _.org.kevoree.ContainerRoot)) {
                var context_2 = this.getContainerRootJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ContainerRoottoJson(oMS, context_2, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.PortType)) {
                var context_3 = this.getPortTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.PortTypetoJson(oMS, context_3, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortImpl) || Kotlin.isType(oMS, _.org.kevoree.Port)) {
                var context_4 = this.getPortJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.PorttoJson(oMS, context_4, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NamespaceImpl) || Kotlin.isType(oMS, _.org.kevoree.Namespace)) {
                var context_5 = this.getNamespaceJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NamespacetoJson(oMS, context_5, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryImpl) || Kotlin.isType(oMS, _.org.kevoree.Dictionary)) {
                var context_6 = this.getDictionaryJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.DictionarytoJson(oMS, context_6, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.DictionaryType)) {
                var context_7 = this.getDictionaryTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.DictionaryTypetoJson(oMS, context_7, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryAttributeImpl) || Kotlin.isType(oMS, _.org.kevoree.DictionaryAttribute)) {
                var context_8 = this.getDictionaryAttributeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.DictionaryAttributetoJson(oMS, context_8, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryValueImpl) || Kotlin.isType(oMS, _.org.kevoree.DictionaryValue)) {
                var context_9 = this.getDictionaryValueJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.DictionaryValuetoJson(oMS, context_9, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.CompositeTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.CompositeType)) {
                var context_10 = this.getCompositeTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.CompositeTypetoJson(oMS, context_10, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortTypeRefImpl) || Kotlin.isType(oMS, _.org.kevoree.PortTypeRef)) {
                var context_11 = this.getPortTypeRefJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.PortTypeReftoJson(oMS, context_11, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.WireImpl) || Kotlin.isType(oMS, _.org.kevoree.Wire)) {
                var context_12 = this.getWireJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.WiretoJson(oMS, context_12, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.ServicePortType)) {
                var context_13 = this.getServicePortTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ServicePortTypetoJson(oMS, context_13, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.OperationImpl) || Kotlin.isType(oMS, _.org.kevoree.Operation)) {
                var context_14 = this.getOperationJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.OperationtoJson(oMS, context_14, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ParameterImpl) || Kotlin.isType(oMS, _.org.kevoree.Parameter)) {
                var context_15 = this.getParameterJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ParametertoJson(oMS, context_15, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.TypedElementImpl) || Kotlin.isType(oMS, _.org.kevoree.TypedElement)) {
                var context_16 = this.getTypedElementJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.TypedElementtoJson(oMS, context_16, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.MessagePortType)) {
                var context_17 = this.getMessagePortTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.MessagePortTypetoJson(oMS, context_17, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.RepositoryImpl) || Kotlin.isType(oMS, _.org.kevoree.Repository)) {
                var context_18 = this.getRepositoryJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.RepositorytoJson(oMS, context_18, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DeployUnitImpl) || Kotlin.isType(oMS, _.org.kevoree.DeployUnit)) {
                var context_19 = this.getDeployUnitJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.DeployUnittoJson(oMS, context_19, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.TypeLibraryImpl) || Kotlin.isType(oMS, _.org.kevoree.TypeLibrary)) {
                var context_20 = this.getTypeLibraryJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.TypeLibrarytoJson(oMS, context_20, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NamedElementImpl) || Kotlin.isType(oMS, _.org.kevoree.NamedElement)) {
                var context_21 = this.getNamedElementJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NamedElementtoJson(oMS, context_21, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.IntegrationPatternImpl) || Kotlin.isType(oMS, _.org.kevoree.IntegrationPattern)) {
                var context_22 = this.getIntegrationPatternJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.IntegrationPatterntoJson(oMS, context_22, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ExtraFonctionalPropertyImpl) || Kotlin.isType(oMS, _.org.kevoree.ExtraFonctionalProperty)) {
                var context_23 = this.getExtraFonctionalPropertyJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ExtraFonctionalPropertytoJson(oMS, context_23, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortTypeMappingImpl) || Kotlin.isType(oMS, _.org.kevoree.PortTypeMapping)) {
                var context_24 = this.getPortTypeMappingJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.PortTypeMappingtoJson(oMS, context_24, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ChannelImpl) || Kotlin.isType(oMS, _.org.kevoree.Channel)) {
                var context_25 = this.getChannelJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ChanneltoJson(oMS, context_25, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.MBindingImpl) || Kotlin.isType(oMS, _.org.kevoree.MBinding)) {
                var context_26 = this.getMBindingJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.MBindingtoJson(oMS, context_26, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NodeNetworkImpl) || Kotlin.isType(oMS, _.org.kevoree.NodeNetwork)) {
                var context_27 = this.getNodeNetworkJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NodeNetworktoJson(oMS, context_27, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NodeLinkImpl) || Kotlin.isType(oMS, _.org.kevoree.NodeLink)) {
                var context_28 = this.getNodeLinkJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NodeLinktoJson(oMS, context_28, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NetworkPropertyImpl) || Kotlin.isType(oMS, _.org.kevoree.NetworkProperty)) {
                var context_29 = this.getNetworkPropertyJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NetworkPropertytoJson(oMS, context_29, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.ChannelType)) {
                var context_30 = this.getChannelTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ChannelTypetoJson(oMS, context_30, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.TypeDefinitionImpl) || Kotlin.isType(oMS, _.org.kevoree.TypeDefinition)) {
                var context_31 = this.getTypeDefinitionJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.TypeDefinitiontoJson(oMS, context_31, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.InstanceImpl) || Kotlin.isType(oMS, _.org.kevoree.Instance)) {
                var context_32 = this.getInstanceJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.InstancetoJson(oMS, context_32, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.LifeCycleTypeDefinitionImpl) || Kotlin.isType(oMS, _.org.kevoree.LifeCycleTypeDefinition)) {
                var context_33 = this.getLifeCycleTypeDefinitionJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.LifeCycleTypeDefinitiontoJson(oMS, context_33, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.GroupImpl) || Kotlin.isType(oMS, _.org.kevoree.Group)) {
                var context_34 = this.getGroupJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.GrouptoJson(oMS, context_34, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.GroupType)) {
                var context_35 = this.getGroupTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.GroupTypetoJson(oMS, context_35, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.NodeType)) {
                var context_36 = this.getNodeTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NodeTypetoJson(oMS, context_36, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.AdaptationPrimitiveType)) {
                var context_37 = this.getAdaptationPrimitiveTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.AdaptationPrimitiveTypetoJson(oMS, context_37, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl) || Kotlin.isType(oMS, _.org.kevoree.AdaptationPrimitiveTypeRef)) {
                var context_38 = this.getAdaptationPrimitiveTypeRefJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.AdaptationPrimitiveTypeReftoJson(oMS, context_38, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ComponentInstanceImpl) || Kotlin.isType(oMS, _.org.kevoree.ComponentInstance)) {
                var context_39 = this.getComponentInstanceJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ComponentInstancetoJson(oMS, context_39, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.ComponentType)) {
                var context_40 = this.getComponentTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ComponentTypetoJson(oMS, context_40, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ContainerNodeImpl) || Kotlin.isType(oMS, _.org.kevoree.ContainerNode)) {
                var context_41 = this.getContainerNodeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ContainerNodetoJson(oMS, context_41, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ContainerRootImpl) || Kotlin.isType(oMS, _.org.kevoree.ContainerRoot)) {
                var context_42 = this.getContainerRootJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ContainerRoottoJson(oMS, context_42, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.PortType)) {
                var context_43 = this.getPortTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.PortTypetoJson(oMS, context_43, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortImpl) || Kotlin.isType(oMS, _.org.kevoree.Port)) {
                var context_44 = this.getPortJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.PorttoJson(oMS, context_44, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NamespaceImpl) || Kotlin.isType(oMS, _.org.kevoree.Namespace)) {
                var context_45 = this.getNamespaceJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NamespacetoJson(oMS, context_45, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryImpl) || Kotlin.isType(oMS, _.org.kevoree.Dictionary)) {
                var context_46 = this.getDictionaryJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.DictionarytoJson(oMS, context_46, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.DictionaryType)) {
                var context_47 = this.getDictionaryTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.DictionaryTypetoJson(oMS, context_47, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryAttributeImpl) || Kotlin.isType(oMS, _.org.kevoree.DictionaryAttribute)) {
                var context_48 = this.getDictionaryAttributeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.DictionaryAttributetoJson(oMS, context_48, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryValueImpl) || Kotlin.isType(oMS, _.org.kevoree.DictionaryValue)) {
                var context_49 = this.getDictionaryValueJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.DictionaryValuetoJson(oMS, context_49, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.CompositeTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.CompositeType)) {
                var context_50 = this.getCompositeTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.CompositeTypetoJson(oMS, context_50, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortTypeRefImpl) || Kotlin.isType(oMS, _.org.kevoree.PortTypeRef)) {
                var context_51 = this.getPortTypeRefJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.PortTypeReftoJson(oMS, context_51, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.WireImpl) || Kotlin.isType(oMS, _.org.kevoree.Wire)) {
                var context_52 = this.getWireJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.WiretoJson(oMS, context_52, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.ServicePortType)) {
                var context_53 = this.getServicePortTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ServicePortTypetoJson(oMS, context_53, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.OperationImpl) || Kotlin.isType(oMS, _.org.kevoree.Operation)) {
                var context_54 = this.getOperationJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.OperationtoJson(oMS, context_54, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ParameterImpl) || Kotlin.isType(oMS, _.org.kevoree.Parameter)) {
                var context_55 = this.getParameterJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ParametertoJson(oMS, context_55, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.TypedElementImpl) || Kotlin.isType(oMS, _.org.kevoree.TypedElement)) {
                var context_56 = this.getTypedElementJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.TypedElementtoJson(oMS, context_56, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.MessagePortType)) {
                var context_57 = this.getMessagePortTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.MessagePortTypetoJson(oMS, context_57, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.RepositoryImpl) || Kotlin.isType(oMS, _.org.kevoree.Repository)) {
                var context_58 = this.getRepositoryJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.RepositorytoJson(oMS, context_58, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DeployUnitImpl) || Kotlin.isType(oMS, _.org.kevoree.DeployUnit)) {
                var context_59 = this.getDeployUnitJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.DeployUnittoJson(oMS, context_59, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.TypeLibraryImpl) || Kotlin.isType(oMS, _.org.kevoree.TypeLibrary)) {
                var context_60 = this.getTypeLibraryJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.TypeLibrarytoJson(oMS, context_60, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NamedElementImpl) || Kotlin.isType(oMS, _.org.kevoree.NamedElement)) {
                var context_61 = this.getNamedElementJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NamedElementtoJson(oMS, context_61, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.IntegrationPatternImpl) || Kotlin.isType(oMS, _.org.kevoree.IntegrationPattern)) {
                var context_62 = this.getIntegrationPatternJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.IntegrationPatterntoJson(oMS, context_62, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ExtraFonctionalPropertyImpl) || Kotlin.isType(oMS, _.org.kevoree.ExtraFonctionalProperty)) {
                var context_63 = this.getExtraFonctionalPropertyJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ExtraFonctionalPropertytoJson(oMS, context_63, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortTypeMappingImpl) || Kotlin.isType(oMS, _.org.kevoree.PortTypeMapping)) {
                var context_64 = this.getPortTypeMappingJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.PortTypeMappingtoJson(oMS, context_64, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ChannelImpl) || Kotlin.isType(oMS, _.org.kevoree.Channel)) {
                var context_65 = this.getChannelJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ChanneltoJson(oMS, context_65, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.MBindingImpl) || Kotlin.isType(oMS, _.org.kevoree.MBinding)) {
                var context_66 = this.getMBindingJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.MBindingtoJson(oMS, context_66, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NodeNetworkImpl) || Kotlin.isType(oMS, _.org.kevoree.NodeNetwork)) {
                var context_67 = this.getNodeNetworkJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NodeNetworktoJson(oMS, context_67, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NodeLinkImpl) || Kotlin.isType(oMS, _.org.kevoree.NodeLink)) {
                var context_68 = this.getNodeLinkJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NodeLinktoJson(oMS, context_68, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NetworkPropertyImpl) || Kotlin.isType(oMS, _.org.kevoree.NetworkProperty)) {
                var context_69 = this.getNetworkPropertyJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NetworkPropertytoJson(oMS, context_69, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.ChannelType)) {
                var context_70 = this.getChannelTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.ChannelTypetoJson(oMS, context_70, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.TypeDefinitionImpl) || Kotlin.isType(oMS, _.org.kevoree.TypeDefinition)) {
                var context_71 = this.getTypeDefinitionJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.TypeDefinitiontoJson(oMS, context_71, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.InstanceImpl) || Kotlin.isType(oMS, _.org.kevoree.Instance)) {
                var context_72 = this.getInstanceJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.InstancetoJson(oMS, context_72, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.LifeCycleTypeDefinitionImpl) || Kotlin.isType(oMS, _.org.kevoree.LifeCycleTypeDefinition)) {
                var context_73 = this.getLifeCycleTypeDefinitionJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.LifeCycleTypeDefinitiontoJson(oMS, context_73, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.GroupImpl) || Kotlin.isType(oMS, _.org.kevoree.Group)) {
                var context_74 = this.getGroupJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.GrouptoJson(oMS, context_74, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.GroupType)) {
                var context_75 = this.getGroupTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.GroupTypetoJson(oMS, context_75, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.NodeType)) {
                var context_76 = this.getNodeTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.NodeTypetoJson(oMS, context_76, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.AdaptationPrimitiveType)) {
                var context_77 = this.getAdaptationPrimitiveTypeJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.AdaptationPrimitiveTypetoJson(oMS, context_77, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl) || Kotlin.isType(oMS, _.org.kevoree.AdaptationPrimitiveTypeRef)) {
                var context_78 = this.getAdaptationPrimitiveTypeRefJsonAddr(oMS != null ? oMS : Kotlin.throwNPE());
                this.AdaptationPrimitiveTypeReftoJson(oMS, context_78, wt);
              }
               else {
              }
              wt.flush();
            },
            escapeJson: function (ostream, chain) {
              if (chain == null) {
                return;
              }
              var i = 0;
              while (i < chain.length) {
                var c = chain.charAt(i);
                if (c === '"') {
                  ostream.print('&quot;');
                }
                 else if (c === "'") {
                  ostream.print('&apos;');
                }
                 else {
                  ostream.print_0(c);
                }
                i = i + 1;
              }
            },
            getLifeCycleTypeDefinitionJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.get_dictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                subResult.putAll(this.getComponentTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                subResult.putAll(this.getChannelTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                subResult.putAll(this.getGroupTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                subResult.putAll(this.getNodeTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else {
              }
              return subResult;
            },
            LifeCycleTypeDefinitiontoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                this.ComponentTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                this.ChannelTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                this.GroupTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                this.NodeTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:LifeCycleTypeDefinition" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_factoryBean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_factoryBean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_factoryBean());
                  ostream.print_0('"');
                }
                if (selfObject.get_bean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_bean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_bean());
                  ostream.print_0('"');
                }
                if (selfObject.get_nature() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_nature()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "nature":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_nature());
                  ostream.print_0('"');
                }
                if (selfObject.get_startMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_startMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_startMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_stopMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_stopMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_stopMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_updateMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_updateMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_updateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_deployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference LifeCycleTypeDefinition/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_superTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.get_superTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference LifeCycleTypeDefinition/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.get_dictionaryType();
                if (subdictionaryType != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println_1('}');
              }
            },
            getInstanceJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionary = selfObject.get_dictionary();
              if (subdictionary != null) {
                var tmp$0;
                subResult.put(subdictionary, (tmp$0 = subdictionary.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryJsonAddr(subdictionary));
              }
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentInstanceImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentInstance)) {
                subResult.putAll(this.getComponentInstanceJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ContainerNodeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ContainerNode)) {
                subResult.putAll(this.getContainerNodeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelImpl) || Kotlin.isType(selfObject, _.org.kevoree.Channel)) {
                subResult.putAll(this.getChannelJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupImpl) || Kotlin.isType(selfObject, _.org.kevoree.Group)) {
                subResult.putAll(this.getGroupJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else {
              }
              return subResult;
            },
            InstancetoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentInstanceImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentInstance)) {
                this.ComponentInstancetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ContainerNodeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ContainerNode)) {
                this.ContainerNodetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelImpl) || Kotlin.isType(selfObject, _.org.kevoree.Channel)) {
                this.ChanneltoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupImpl) || Kotlin.isType(selfObject, _.org.kevoree.Group)) {
                this.GrouptoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Instance" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_metaData() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_metaData()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "metaData":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_metaData());
                  ostream.print_0('"');
                }
                var subsubtypeDefinition = selfObject.get_typeDefinition();
                if (subsubtypeDefinition != null) {
                  var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                  if (subsubsubtypeDefinition != null) {
                    ostream.println_1(',');
                    ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                  }
                   else {
                    throw new Error('KMF Instance Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                  }
                }
                var subdictionary = selfObject.get_dictionary();
                if (subdictionary != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionary":');
                  this.DictionarytoJson(subdictionary, addrs, ostream);
                }
                ostream.println_1('}');
              }
            },
            getPortJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            PorttoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Port" ');
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.get_bindings().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "bindings": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_bindings().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference Port/bindings ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                var subsubportTypeRef = selfObject.get_portTypeRef();
                if (subsubportTypeRef != null) {
                  var subsubsubportTypeRef = addrs.get(subsubportTypeRef);
                  if (subsubsubportTypeRef != null) {
                    ostream.println_1(',');
                    ostream.print(' "portTypeRef":"' + subsubsubportTypeRef + '"');
                  }
                   else {
                    throw new Error('KMF Port Serialization error : No address found for reference portTypeRef(id:' + subsubportTypeRef + ' container:' + subsubportTypeRef.eContainer() + ')');
                  }
                }
                ostream.println_1('}');
              }
            },
            getNodeNetworkJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.get_link().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_link = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getNodeLinkJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            NodeNetworktoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:NodeNetwork" ');
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                var subsubinitBy = selfObject.get_initBy();
                if (subsubinitBy != null) {
                  var subsubsubinitBy = addrs.get(subsubinitBy);
                  if (subsubsubinitBy != null) {
                    ostream.println_1(',');
                    ostream.print(' "initBy":"' + subsubsubinitBy + '"');
                  }
                   else {
                    throw new Error('KMF NodeNetwork Serialization error : No address found for reference initBy(id:' + subsubinitBy + ' container:' + subsubinitBy.eContainer() + ')');
                  }
                }
                var subsubtarget = selfObject.get_target();
                if (subsubtarget != null) {
                  var subsubsubtarget = addrs.get(subsubtarget);
                  if (subsubsubtarget != null) {
                    ostream.println_1(',');
                    ostream.print(' "target":"' + subsubsubtarget + '"');
                  }
                   else {
                    throw new Error('KMF NodeNetwork Serialization error : No address found for reference target(id:' + subsubtarget + ' container:' + subsubtarget.eContainer() + ')');
                  }
                }
                if (selfObject.get_link().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"link": [');
                  var iloop_first_link = true;
                  {
                    var tmp$0 = selfObject.get_link().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_link) {
                        ostream.println_1(',');
                      }
                      this.NodeLinktoJson(so, addrs, ostream);
                      iloop_first_link = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getTypedElementJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.DictionaryAttributeImpl) || Kotlin.isType(selfObject, _.org.kevoree.DictionaryAttribute)) {
                subResult.putAll(this.getDictionaryAttributeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else {
              }
              return subResult;
            },
            TypedElementtoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.DictionaryAttributeImpl) || Kotlin.isType(selfObject, _.org.kevoree.DictionaryAttribute)) {
                this.DictionaryAttributetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:TypedElement" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_genericTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "genericTypes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_genericTypes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference TypedElement/genericTypes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println_1('}');
              }
            },
            getPortTypeMappingJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            PortTypeMappingtoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:PortTypeMapping" ');
                if (selfObject.get_beanMethodName() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_beanMethodName()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "beanMethodName":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_beanMethodName());
                  ostream.print_0('"');
                }
                if (selfObject.get_serviceMethodName() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_serviceMethodName()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "serviceMethodName":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_serviceMethodName());
                  ostream.print_0('"');
                }
                if (selfObject.get_paramTypes() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_paramTypes()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "paramTypes":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_paramTypes());
                  ostream.print_0('"');
                }
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                ostream.println_1('}');
              }
            },
            getAdaptationPrimitiveTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            AdaptationPrimitiveTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:AdaptationPrimitiveType" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                ostream.println_1('}');
              }
            },
            getComponentInstanceJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionary = selfObject.get_dictionary();
              if (subdictionary != null) {
                var tmp$0;
                subResult.put(subdictionary, (tmp$0 = subdictionary.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryJsonAddr(subdictionary));
              }
              {
                var tmp$1 = selfObject.get_provided().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_provided = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortJsonAddr(sub));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$3 = selfObject.get_required().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  var subPath_required = sub_0.path();
                  var tmp$4;
                  subResult.put(sub_0, (tmp$4 = sub_0.path()) != null ? tmp$4 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortJsonAddr(sub_0));
                  i = i + 1;
                }
              }
              return subResult;
            },
            ComponentInstancetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ComponentInstance" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_metaData() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_metaData()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "metaData":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_metaData());
                  ostream.print_0('"');
                }
                var subsubtypeDefinition = selfObject.get_typeDefinition();
                if (subsubtypeDefinition != null) {
                  var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                  if (subsubsubtypeDefinition != null) {
                    ostream.println_1(',');
                    ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                  }
                   else {
                    throw new Error('KMF ComponentInstance Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                  }
                }
                var subsubnamespace = selfObject.get_namespace();
                if (subsubnamespace != null) {
                  var subsubsubnamespace = addrs.get(subsubnamespace);
                  if (subsubsubnamespace != null) {
                    ostream.println_1(',');
                    ostream.print(' "namespace":"' + subsubsubnamespace + '"');
                  }
                   else {
                    throw new Error('KMF ComponentInstance Serialization error : No address found for reference namespace(id:' + subsubnamespace + ' container:' + subsubnamespace.eContainer() + ')');
                  }
                }
                var subdictionary = selfObject.get_dictionary();
                if (subdictionary != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionary":');
                  this.DictionarytoJson(subdictionary, addrs, ostream);
                }
                if (selfObject.get_provided().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"provided": [');
                  var iloop_first_provided = true;
                  {
                    var tmp$0 = selfObject.get_provided().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_provided) {
                        ostream.println_1(',');
                      }
                      this.PorttoJson(so, addrs, ostream);
                      iloop_first_provided = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_required().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"required": [');
                  var iloop_first_required = true;
                  {
                    var tmp$1 = selfObject.get_required().iterator();
                    while (tmp$1.hasNext()) {
                      var so_0 = tmp$1.next();
                      if (!iloop_first_required) {
                        ostream.println_1(',');
                      }
                      this.PorttoJson(so_0, addrs, ostream);
                      iloop_first_required = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getIntegrationPatternJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.get_extraFonctionalProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_extraFonctionalProperties = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getExtraFonctionalPropertyJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            IntegrationPatterntoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:IntegrationPattern" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_portTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "portTypes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_portTypes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference IntegrationPattern/portTypes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_extraFonctionalProperties().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"extraFonctionalProperties": [');
                  var iloop_first_extraFonctionalProperties = true;
                  {
                    var tmp$1 = selfObject.get_extraFonctionalProperties().iterator();
                    while (tmp$1.hasNext()) {
                      var so = tmp$1.next();
                      if (!iloop_first_extraFonctionalProperties) {
                        ostream.println_1(',');
                      }
                      this.ExtraFonctionalPropertytoJson(so, addrs, ostream);
                      iloop_first_extraFonctionalProperties = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getContainerNodeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionary = selfObject.get_dictionary();
              if (subdictionary != null) {
                var tmp$0;
                subResult.put(subdictionary, (tmp$0 = subdictionary.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryJsonAddr(subdictionary));
              }
              {
                var tmp$1 = selfObject.get_components().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_components = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getComponentInstanceJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            ContainerNodetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ContainerNode" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_metaData() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_metaData()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "metaData":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_metaData());
                  ostream.print_0('"');
                }
                var subsubtypeDefinition = selfObject.get_typeDefinition();
                if (subsubtypeDefinition != null) {
                  var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                  if (subsubsubtypeDefinition != null) {
                    ostream.println_1(',');
                    ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                  }
                   else {
                    throw new Error('KMF ContainerNode Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                  }
                }
                if (selfObject.get_hosts().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "hosts": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_hosts().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference ContainerNode/hosts ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                var subsubhost = selfObject.get_host();
                if (subsubhost != null) {
                  var subsubsubhost = addrs.get(subsubhost);
                  if (subsubsubhost != null) {
                    ostream.println_1(',');
                    ostream.print(' "host":"' + subsubsubhost + '"');
                  }
                   else {
                    throw new Error('KMF ContainerNode Serialization error : No address found for reference host(id:' + subsubhost + ' container:' + subsubhost.eContainer() + ')');
                  }
                }
                var subdictionary = selfObject.get_dictionary();
                if (subdictionary != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionary":');
                  this.DictionarytoJson(subdictionary, addrs, ostream);
                }
                if (selfObject.get_components().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"components": [');
                  var iloop_first_components = true;
                  {
                    var tmp$1 = selfObject.get_components().iterator();
                    while (tmp$1.hasNext()) {
                      var so = tmp$1.next();
                      if (!iloop_first_components) {
                        ostream.println_1(',');
                      }
                      this.ComponentInstancetoJson(so, addrs, ostream);
                      iloop_first_components = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getAdaptationPrimitiveTypeRefJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            AdaptationPrimitiveTypeReftoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:AdaptationPrimitiveTypeRef" ');
                if (selfObject.get_maxTime() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_maxTime()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "maxTime":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_maxTime());
                  ostream.print_0('"');
                }
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                var subsubref = selfObject.get_ref();
                if (subsubref != null) {
                  var subsubsubref = addrs.get(subsubref);
                  if (subsubsubref != null) {
                    ostream.println_1(',');
                    ostream.print(' "ref":"' + subsubsubref + '"');
                  }
                   else {
                    throw new Error('KMF AdaptationPrimitiveTypeRef Serialization error : No address found for reference ref(id:' + subsubref + ' container:' + subsubref.eContainer() + ')');
                  }
                }
                ostream.println_1('}');
              }
            },
            getDictionaryAttributeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            DictionaryAttributetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:DictionaryAttribute" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_optional() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_optional()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "optional":');
                  var tmp$0;
                  ostream.print_3((tmp$0 = selfObject.get_optional()) != null ? tmp$0 : Kotlin.throwNPE());
                }
                if (selfObject.get_state() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_state()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "state":');
                  var tmp$1;
                  ostream.print_3((tmp$1 = selfObject.get_state()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                if (selfObject.get_datatype() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_datatype()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "datatype":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_datatype());
                  ostream.print_0('"');
                }
                if (selfObject.get_fragmentDependant() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_fragmentDependant()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "fragmentDependant":');
                  var tmp$2;
                  ostream.print_3((tmp$2 = selfObject.get_fragmentDependant()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                if (selfObject.get_genericTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "genericTypes": [');
                  var firstItLoop = true;
                  {
                    var tmp$3 = selfObject.get_genericTypes().iterator();
                    while (tmp$3.hasNext()) {
                      var sub = tmp$3.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference DictionaryAttribute/genericTypes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println_1('}');
              }
            },
            getNamespaceJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.get_childs().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_childs = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getNamespaceJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            NamespacetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Namespace" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                var subsubparent = selfObject.get_parent();
                if (subsubparent != null) {
                  var subsubsubparent = addrs.get(subsubparent);
                  if (subsubsubparent != null) {
                    ostream.println_1(',');
                    ostream.print(' "parent":"' + subsubsubparent + '"');
                  }
                   else {
                    throw new Error('KMF Namespace Serialization error : No address found for reference parent(id:' + subsubparent + ' container:' + subsubparent.eContainer() + ')');
                  }
                }
                if (selfObject.get_childs().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"childs": [');
                  var iloop_first_childs = true;
                  {
                    var tmp$0 = selfObject.get_childs().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_childs) {
                        ostream.println_1(',');
                      }
                      this.NamespacetoJson(so, addrs, ostream);
                      iloop_first_childs = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getNodeTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionaryType = selfObject.get_dictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              {
                var tmp$1 = selfObject.get_managedPrimitiveTypeRefs().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_managedPrimitiveTypeRefs = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getAdaptationPrimitiveTypeRefJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            NodeTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:NodeType" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_factoryBean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_factoryBean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_factoryBean());
                  ostream.print_0('"');
                }
                if (selfObject.get_bean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_bean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_bean());
                  ostream.print_0('"');
                }
                if (selfObject.get_nature() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_nature()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "nature":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_nature());
                  ostream.print_0('"');
                }
                if (selfObject.get_startMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_startMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_startMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_stopMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_stopMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_stopMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_updateMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_updateMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_updateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_deployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference NodeType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_superTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.get_superTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference NodeType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_managedPrimitiveTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "managedPrimitiveTypes": [');
                  var firstItLoop_1 = true;
                  {
                    var tmp$2 = selfObject.get_managedPrimitiveTypes().iterator();
                    while (tmp$2.hasNext()) {
                      var sub_1 = tmp$2.next();
                      if (!firstItLoop_1) {
                        ostream.println_0(',');
                      }
                      var subsub_1 = addrs.get(sub_1);
                      if (subsub_1 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_1);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference NodeType/managedPrimitiveTypes ');
                      }
                      firstItLoop_1 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.get_dictionaryType();
                if (subdictionaryType != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                if (selfObject.get_managedPrimitiveTypeRefs().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"managedPrimitiveTypeRefs": [');
                  var iloop_first_managedPrimitiveTypeRefs = true;
                  {
                    var tmp$3 = selfObject.get_managedPrimitiveTypeRefs().iterator();
                    while (tmp$3.hasNext()) {
                      var so = tmp$3.next();
                      if (!iloop_first_managedPrimitiveTypeRefs) {
                        ostream.println_1(',');
                      }
                      this.AdaptationPrimitiveTypeReftoJson(so, addrs, ostream);
                      iloop_first_managedPrimitiveTypeRefs = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getChannelJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionary = selfObject.get_dictionary();
              if (subdictionary != null) {
                var tmp$0;
                subResult.put(subdictionary, (tmp$0 = subdictionary.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryJsonAddr(subdictionary));
              }
              return subResult;
            },
            ChanneltoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Channel" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_metaData() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_metaData()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "metaData":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_metaData());
                  ostream.print_0('"');
                }
                var subsubtypeDefinition = selfObject.get_typeDefinition();
                if (subsubtypeDefinition != null) {
                  var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                  if (subsubsubtypeDefinition != null) {
                    ostream.println_1(',');
                    ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                  }
                   else {
                    throw new Error('KMF Channel Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                  }
                }
                if (selfObject.get_bindings().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "bindings": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_bindings().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference Channel/bindings ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionary = selfObject.get_dictionary();
                if (subdictionary != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionary":');
                  this.DictionarytoJson(subdictionary, addrs, ostream);
                }
                ostream.println_1('}');
              }
            },
            getDictionaryValueJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            DictionaryValuetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:DictionaryValue" ');
                if (selfObject.get_value() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_value()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "value":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_value());
                  ostream.print_0('"');
                }
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                var subsubattribute = selfObject.get_attribute();
                if (subsubattribute != null) {
                  var subsubsubattribute = addrs.get(subsubattribute);
                  if (subsubsubattribute != null) {
                    ostream.println_1(',');
                    ostream.print(' "attribute":"' + subsubsubattribute + '"');
                  }
                   else {
                    throw new Error('KMF DictionaryValue Serialization error : No address found for reference attribute(id:' + subsubattribute + ' container:' + subsubattribute.eContainer() + ')');
                  }
                }
                var subsubtargetNode = selfObject.get_targetNode();
                if (subsubtargetNode != null) {
                  var subsubsubtargetNode = addrs.get(subsubtargetNode);
                  if (subsubsubtargetNode != null) {
                    ostream.println_1(',');
                    ostream.print(' "targetNode":"' + subsubsubtargetNode + '"');
                  }
                   else {
                    throw new Error('KMF DictionaryValue Serialization error : No address found for reference targetNode(id:' + subsubtargetNode + ' container:' + subsubtargetNode.eContainer() + ')');
                  }
                }
                ostream.println_1('}');
              }
            },
            getNodeLinkJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.get_networkProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_networkProperties = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getNetworkPropertyJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            NodeLinktoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:NodeLink" ');
                if (selfObject.get_networkType() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_networkType()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "networkType":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_networkType());
                  ostream.print_0('"');
                }
                if (selfObject.get_estimatedRate() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_estimatedRate()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "estimatedRate":');
                  ostream.print('"');
                  var tmp$0;
                  ostream.print_1((tmp$0 = selfObject.get_estimatedRate()) != null ? tmp$0 : Kotlin.throwNPE());
                  ostream.print_0('"');
                }
                if (selfObject.get_lastCheck() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_lastCheck()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "lastCheck":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_lastCheck());
                  ostream.print_0('"');
                }
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.get_networkProperties().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"networkProperties": [');
                  var iloop_first_networkProperties = true;
                  {
                    var tmp$1 = selfObject.get_networkProperties().iterator();
                    while (tmp$1.hasNext()) {
                      var so = tmp$1.next();
                      if (!iloop_first_networkProperties) {
                        ostream.println_1(',');
                      }
                      this.NetworkPropertytoJson(so, addrs, ostream);
                      iloop_first_networkProperties = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getParameterJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            ParametertoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Parameter" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_order() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_order()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "order":');
                  ostream.print('"');
                  var tmp$0;
                  ostream.print_1((tmp$0 = selfObject.get_order()) != null ? tmp$0 : Kotlin.throwNPE());
                  ostream.print_0('"');
                }
                var subsubtype = selfObject.get_type();
                if (subsubtype != null) {
                  var subsubsubtype = addrs.get(subsubtype);
                  if (subsubsubtype != null) {
                    ostream.println_1(',');
                    ostream.print(' "type":"' + subsubsubtype + '"');
                  }
                   else {
                    throw new Error('KMF Parameter Serialization error : No address found for reference type(id:' + subsubtype + ' container:' + subsubtype.eContainer() + ')');
                  }
                }
                ostream.println_1('}');
              }
            },
            getContainerRootJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.get_nodes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_nodes = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getContainerNodeJsonAddr(sub));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$2 = selfObject.get_typeDefinitions().iterator();
                while (tmp$2.hasNext()) {
                  var sub_0 = tmp$2.next();
                  var subPath_typeDefinitions = sub_0.path();
                  var tmp$3;
                  subResult.put(sub_0, (tmp$3 = sub_0.path()) != null ? tmp$3 : Kotlin.throwNPE());
                  subResult.putAll(this.getTypeDefinitionJsonAddr(sub_0));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$4 = selfObject.get_repositories().iterator();
                while (tmp$4.hasNext()) {
                  var sub_1 = tmp$4.next();
                  var subPath_repositories = sub_1.path();
                  var tmp$5;
                  subResult.put(sub_1, (tmp$5 = sub_1.path()) != null ? tmp$5 : Kotlin.throwNPE());
                  subResult.putAll(this.getRepositoryJsonAddr(sub_1));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$6 = selfObject.get_dataTypes().iterator();
                while (tmp$6.hasNext()) {
                  var sub_2 = tmp$6.next();
                  var subPath_dataTypes = sub_2.path();
                  var tmp$7;
                  subResult.put(sub_2, (tmp$7 = sub_2.path()) != null ? tmp$7 : Kotlin.throwNPE());
                  subResult.putAll(this.getTypedElementJsonAddr(sub_2));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$8 = selfObject.get_libraries().iterator();
                while (tmp$8.hasNext()) {
                  var sub_3 = tmp$8.next();
                  var subPath_libraries = sub_3.path();
                  var tmp$9;
                  subResult.put(sub_3, (tmp$9 = sub_3.path()) != null ? tmp$9 : Kotlin.throwNPE());
                  subResult.putAll(this.getTypeLibraryJsonAddr(sub_3));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$10 = selfObject.get_hubs().iterator();
                while (tmp$10.hasNext()) {
                  var sub_4 = tmp$10.next();
                  var subPath_hubs = sub_4.path();
                  var tmp$11;
                  subResult.put(sub_4, (tmp$11 = sub_4.path()) != null ? tmp$11 : Kotlin.throwNPE());
                  subResult.putAll(this.getChannelJsonAddr(sub_4));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$12 = selfObject.get_mBindings().iterator();
                while (tmp$12.hasNext()) {
                  var sub_5 = tmp$12.next();
                  var subPath_mBindings = sub_5.path();
                  var tmp$13;
                  subResult.put(sub_5, (tmp$13 = sub_5.path()) != null ? tmp$13 : Kotlin.throwNPE());
                  subResult.putAll(this.getMBindingJsonAddr(sub_5));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$14 = selfObject.get_deployUnits().iterator();
                while (tmp$14.hasNext()) {
                  var sub_6 = tmp$14.next();
                  var subPath_deployUnits = sub_6.path();
                  var tmp$15;
                  subResult.put(sub_6, (tmp$15 = sub_6.path()) != null ? tmp$15 : Kotlin.throwNPE());
                  subResult.putAll(this.getDeployUnitJsonAddr(sub_6));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$16 = selfObject.get_nodeNetworks().iterator();
                while (tmp$16.hasNext()) {
                  var sub_7 = tmp$16.next();
                  var subPath_nodeNetworks = sub_7.path();
                  var tmp$17;
                  subResult.put(sub_7, (tmp$17 = sub_7.path()) != null ? tmp$17 : Kotlin.throwNPE());
                  subResult.putAll(this.getNodeNetworkJsonAddr(sub_7));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$18 = selfObject.get_groups().iterator();
                while (tmp$18.hasNext()) {
                  var sub_8 = tmp$18.next();
                  var subPath_groups = sub_8.path();
                  var tmp$19;
                  subResult.put(sub_8, (tmp$19 = sub_8.path()) != null ? tmp$19 : Kotlin.throwNPE());
                  subResult.putAll(this.getGroupJsonAddr(sub_8));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$20 = selfObject.get_adaptationPrimitiveTypes().iterator();
                while (tmp$20.hasNext()) {
                  var sub_9 = tmp$20.next();
                  var subPath_adaptationPrimitiveTypes = sub_9.path();
                  var tmp$21;
                  subResult.put(sub_9, (tmp$21 = sub_9.path()) != null ? tmp$21 : Kotlin.throwNPE());
                  subResult.putAll(this.getAdaptationPrimitiveTypeJsonAddr(sub_9));
                  i = i + 1;
                }
              }
              return subResult;
            },
            ContainerRoottoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ContainerRoot" ');
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.get_nodes().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"nodes": [');
                  var iloop_first_nodes = true;
                  {
                    var tmp$0 = selfObject.get_nodes().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_nodes) {
                        ostream.println_1(',');
                      }
                      this.ContainerNodetoJson(so, addrs, ostream);
                      iloop_first_nodes = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_typeDefinitions().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"typeDefinitions": [');
                  var iloop_first_typeDefinitions = true;
                  {
                    var tmp$1 = selfObject.get_typeDefinitions().iterator();
                    while (tmp$1.hasNext()) {
                      var so_0 = tmp$1.next();
                      if (!iloop_first_typeDefinitions) {
                        ostream.println_1(',');
                      }
                      this.TypeDefinitiontoJson(so_0, addrs, ostream);
                      iloop_first_typeDefinitions = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_repositories().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"repositories": [');
                  var iloop_first_repositories = true;
                  {
                    var tmp$2 = selfObject.get_repositories().iterator();
                    while (tmp$2.hasNext()) {
                      var so_1 = tmp$2.next();
                      if (!iloop_first_repositories) {
                        ostream.println_1(',');
                      }
                      this.RepositorytoJson(so_1, addrs, ostream);
                      iloop_first_repositories = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_dataTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"dataTypes": [');
                  var iloop_first_dataTypes = true;
                  {
                    var tmp$3 = selfObject.get_dataTypes().iterator();
                    while (tmp$3.hasNext()) {
                      var so_2 = tmp$3.next();
                      if (!iloop_first_dataTypes) {
                        ostream.println_1(',');
                      }
                      this.TypedElementtoJson(so_2, addrs, ostream);
                      iloop_first_dataTypes = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_libraries().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"libraries": [');
                  var iloop_first_libraries = true;
                  {
                    var tmp$4 = selfObject.get_libraries().iterator();
                    while (tmp$4.hasNext()) {
                      var so_3 = tmp$4.next();
                      if (!iloop_first_libraries) {
                        ostream.println_1(',');
                      }
                      this.TypeLibrarytoJson(so_3, addrs, ostream);
                      iloop_first_libraries = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_hubs().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"hubs": [');
                  var iloop_first_hubs = true;
                  {
                    var tmp$5 = selfObject.get_hubs().iterator();
                    while (tmp$5.hasNext()) {
                      var so_4 = tmp$5.next();
                      if (!iloop_first_hubs) {
                        ostream.println_1(',');
                      }
                      this.ChanneltoJson(so_4, addrs, ostream);
                      iloop_first_hubs = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_mBindings().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"mBindings": [');
                  var iloop_first_mBindings = true;
                  {
                    var tmp$6 = selfObject.get_mBindings().iterator();
                    while (tmp$6.hasNext()) {
                      var so_5 = tmp$6.next();
                      if (!iloop_first_mBindings) {
                        ostream.println_1(',');
                      }
                      this.MBindingtoJson(so_5, addrs, ostream);
                      iloop_first_mBindings = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"deployUnits": [');
                  var iloop_first_deployUnits = true;
                  {
                    var tmp$7 = selfObject.get_deployUnits().iterator();
                    while (tmp$7.hasNext()) {
                      var so_6 = tmp$7.next();
                      if (!iloop_first_deployUnits) {
                        ostream.println_1(',');
                      }
                      this.DeployUnittoJson(so_6, addrs, ostream);
                      iloop_first_deployUnits = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_nodeNetworks().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"nodeNetworks": [');
                  var iloop_first_nodeNetworks = true;
                  {
                    var tmp$8 = selfObject.get_nodeNetworks().iterator();
                    while (tmp$8.hasNext()) {
                      var so_7 = tmp$8.next();
                      if (!iloop_first_nodeNetworks) {
                        ostream.println_1(',');
                      }
                      this.NodeNetworktoJson(so_7, addrs, ostream);
                      iloop_first_nodeNetworks = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_groups().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"groups": [');
                  var iloop_first_groups = true;
                  {
                    var tmp$9 = selfObject.get_groups().iterator();
                    while (tmp$9.hasNext()) {
                      var so_8 = tmp$9.next();
                      if (!iloop_first_groups) {
                        ostream.println_1(',');
                      }
                      this.GrouptoJson(so_8, addrs, ostream);
                      iloop_first_groups = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_adaptationPrimitiveTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"adaptationPrimitiveTypes": [');
                  var iloop_first_adaptationPrimitiveTypes = true;
                  {
                    var tmp$10 = selfObject.get_adaptationPrimitiveTypes().iterator();
                    while (tmp$10.hasNext()) {
                      var so_9 = tmp$10.next();
                      if (!iloop_first_adaptationPrimitiveTypes) {
                        ostream.println_1(',');
                      }
                      this.AdaptationPrimitiveTypetoJson(so_9, addrs, ostream);
                      iloop_first_adaptationPrimitiveTypes = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getWireJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            WiretoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Wire" ');
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.get_ports().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "ports": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_ports().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference Wire/ports ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println_1('}');
              }
            },
            getDictionaryJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.get_values().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_values = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getDictionaryValueJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            DictionarytoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Dictionary" ');
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.get_values().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"values": [');
                  var iloop_first_values = true;
                  {
                    var tmp$0 = selfObject.get_values().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_values) {
                        ostream.println_1(',');
                      }
                      this.DictionaryValuetoJson(so, addrs, ostream);
                      iloop_first_values = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getRepositoryJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            RepositorytoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Repository" ');
                if (selfObject.get_url() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_url()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "url":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_url());
                  ostream.print_0('"');
                }
                if (selfObject.get_units().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "units": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_units().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference Repository/units ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println_1('}');
              }
            },
            getServicePortTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionaryType = selfObject.get_dictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              {
                var tmp$1 = selfObject.get_operations().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_operations = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getOperationJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            ServicePortTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ServicePortType" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_factoryBean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_factoryBean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_factoryBean());
                  ostream.print_0('"');
                }
                if (selfObject.get_bean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_bean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_bean());
                  ostream.print_0('"');
                }
                if (selfObject.get_nature() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_nature()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "nature":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_nature());
                  ostream.print_0('"');
                }
                if (selfObject.get_synchrone() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_synchrone()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "synchrone":');
                  var tmp$0;
                  ostream.print_3((tmp$0 = selfObject.get_synchrone()) != null ? tmp$0 : Kotlin.throwNPE());
                }
                if (selfObject.get_interfaceService() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_interfaceService()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "interfaceService":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_interfaceService());
                  ostream.print_0('"');
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$1 = selfObject.get_deployUnits().iterator();
                    while (tmp$1.hasNext()) {
                      var sub = tmp$1.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference ServicePortType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_superTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$2 = selfObject.get_superTypes().iterator();
                    while (tmp$2.hasNext()) {
                      var sub_0 = tmp$2.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference ServicePortType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.get_dictionaryType();
                if (subdictionaryType != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                if (selfObject.get_operations().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"operations": [');
                  var iloop_first_operations = true;
                  {
                    var tmp$3 = selfObject.get_operations().iterator();
                    while (tmp$3.hasNext()) {
                      var so = tmp$3.next();
                      if (!iloop_first_operations) {
                        ostream.println_1(',');
                      }
                      this.OperationtoJson(so, addrs, ostream);
                      iloop_first_operations = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getPortTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.get_dictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                subResult.putAll(this.getServicePortTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                subResult.putAll(this.getMessagePortTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else {
              }
              return subResult;
            },
            PortTypetoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                this.ServicePortTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                this.MessagePortTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:PortType" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_factoryBean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_factoryBean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_factoryBean());
                  ostream.print_0('"');
                }
                if (selfObject.get_bean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_bean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_bean());
                  ostream.print_0('"');
                }
                if (selfObject.get_nature() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_nature()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "nature":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_nature());
                  ostream.print_0('"');
                }
                if (selfObject.get_synchrone() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_synchrone()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "synchrone":');
                  var tmp$0;
                  ostream.print_3((tmp$0 = selfObject.get_synchrone()) != null ? tmp$0 : Kotlin.throwNPE());
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$1 = selfObject.get_deployUnits().iterator();
                    while (tmp$1.hasNext()) {
                      var sub = tmp$1.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference PortType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_superTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$2 = selfObject.get_superTypes().iterator();
                    while (tmp$2.hasNext()) {
                      var sub_0 = tmp$2.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference PortType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.get_dictionaryType();
                if (subdictionaryType != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println_1('}');
              }
            },
            getMBindingJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            MBindingtoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:MBinding" ');
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                ostream.println_1('}');
              }
            },
            getExtraFonctionalPropertyJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            ExtraFonctionalPropertytoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ExtraFonctionalProperty" ');
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.get_portTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "portTypes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_portTypes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference ExtraFonctionalProperty/portTypes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println_1('}');
              }
            },
            getGroupJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionary = selfObject.get_dictionary();
              if (subdictionary != null) {
                var tmp$0;
                subResult.put(subdictionary, (tmp$0 = subdictionary.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryJsonAddr(subdictionary));
              }
              return subResult;
            },
            GrouptoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Group" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_metaData() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_metaData()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "metaData":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_metaData());
                  ostream.print_0('"');
                }
                var subsubtypeDefinition = selfObject.get_typeDefinition();
                if (subsubtypeDefinition != null) {
                  var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                  if (subsubsubtypeDefinition != null) {
                    ostream.println_1(',');
                    ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                  }
                   else {
                    throw new Error('KMF Group Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                  }
                }
                if (selfObject.get_subNodes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "subNodes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_subNodes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference Group/subNodes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionary = selfObject.get_dictionary();
                if (subdictionary != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionary":');
                  this.DictionarytoJson(subdictionary, addrs, ostream);
                }
                ostream.println_1('}');
              }
            },
            getCompositeTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionaryType = selfObject.get_dictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              {
                var tmp$1 = selfObject.get_required().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_required = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortTypeRefJsonAddr(sub));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$3 = selfObject.get_integrationPatterns().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  var subPath_integrationPatterns = sub_0.path();
                  var tmp$4;
                  subResult.put(sub_0, (tmp$4 = sub_0.path()) != null ? tmp$4 : Kotlin.throwNPE());
                  subResult.putAll(this.getIntegrationPatternJsonAddr(sub_0));
                  i = i + 1;
                }
              }
              var subextraFonctionalProperties = selfObject.get_extraFonctionalProperties();
              if (subextraFonctionalProperties != null) {
                var tmp$5;
                subResult.put(subextraFonctionalProperties, (tmp$5 = subextraFonctionalProperties.path()) != null ? tmp$5 : Kotlin.throwNPE());
                subResult.putAll(this.getExtraFonctionalPropertyJsonAddr(subextraFonctionalProperties));
              }
              i = 0;
              {
                var tmp$6 = selfObject.get_provided().iterator();
                while (tmp$6.hasNext()) {
                  var sub_1 = tmp$6.next();
                  var subPath_provided = sub_1.path();
                  var tmp$7;
                  subResult.put(sub_1, (tmp$7 = sub_1.path()) != null ? tmp$7 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortTypeRefJsonAddr(sub_1));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$8 = selfObject.get_wires().iterator();
                while (tmp$8.hasNext()) {
                  var sub_2 = tmp$8.next();
                  var subPath_wires = sub_2.path();
                  var tmp$9;
                  subResult.put(sub_2, (tmp$9 = sub_2.path()) != null ? tmp$9 : Kotlin.throwNPE());
                  subResult.putAll(this.getWireJsonAddr(sub_2));
                  i = i + 1;
                }
              }
              return subResult;
            },
            CompositeTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:CompositeType" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_factoryBean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_factoryBean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_factoryBean());
                  ostream.print_0('"');
                }
                if (selfObject.get_bean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_bean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_bean());
                  ostream.print_0('"');
                }
                if (selfObject.get_nature() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_nature()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "nature":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_nature());
                  ostream.print_0('"');
                }
                if (selfObject.get_startMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_startMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_startMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_stopMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_stopMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_stopMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_updateMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_updateMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_updateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_deployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference CompositeType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_superTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.get_superTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference CompositeType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_childs().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "childs": [');
                  var firstItLoop_1 = true;
                  {
                    var tmp$2 = selfObject.get_childs().iterator();
                    while (tmp$2.hasNext()) {
                      var sub_1 = tmp$2.next();
                      if (!firstItLoop_1) {
                        ostream.println_0(',');
                      }
                      var subsub_1 = addrs.get(sub_1);
                      if (subsub_1 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_1);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference CompositeType/childs ');
                      }
                      firstItLoop_1 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.get_dictionaryType();
                if (subdictionaryType != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                if (selfObject.get_required().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"required": [');
                  var iloop_first_required = true;
                  {
                    var tmp$3 = selfObject.get_required().iterator();
                    while (tmp$3.hasNext()) {
                      var so = tmp$3.next();
                      if (!iloop_first_required) {
                        ostream.println_1(',');
                      }
                      this.PortTypeReftoJson(so, addrs, ostream);
                      iloop_first_required = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_integrationPatterns().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"integrationPatterns": [');
                  var iloop_first_integrationPatterns = true;
                  {
                    var tmp$4 = selfObject.get_integrationPatterns().iterator();
                    while (tmp$4.hasNext()) {
                      var so_0 = tmp$4.next();
                      if (!iloop_first_integrationPatterns) {
                        ostream.println_1(',');
                      }
                      this.IntegrationPatterntoJson(so_0, addrs, ostream);
                      iloop_first_integrationPatterns = false;
                    }
                  }
                  ostream.println_1(']');
                }
                var subextraFonctionalProperties = selfObject.get_extraFonctionalProperties();
                if (subextraFonctionalProperties != null) {
                  ostream.println_1(',');
                  ostream.print('"extraFonctionalProperties":');
                  this.ExtraFonctionalPropertytoJson(subextraFonctionalProperties, addrs, ostream);
                }
                if (selfObject.get_provided().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"provided": [');
                  var iloop_first_provided = true;
                  {
                    var tmp$5 = selfObject.get_provided().iterator();
                    while (tmp$5.hasNext()) {
                      var so_1 = tmp$5.next();
                      if (!iloop_first_provided) {
                        ostream.println_1(',');
                      }
                      this.PortTypeReftoJson(so_1, addrs, ostream);
                      iloop_first_provided = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_wires().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"wires": [');
                  var iloop_first_wires = true;
                  {
                    var tmp$6 = selfObject.get_wires().iterator();
                    while (tmp$6.hasNext()) {
                      var so_2 = tmp$6.next();
                      if (!iloop_first_wires) {
                        ostream.println_1(',');
                      }
                      this.WiretoJson(so_2, addrs, ostream);
                      iloop_first_wires = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getNamedElementJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                subResult.putAll(this.getComponentTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NamespaceImpl) || Kotlin.isType(selfObject, _.org.kevoree.Namespace)) {
                subResult.putAll(this.getNamespaceJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.PortTypeRefImpl) || Kotlin.isType(selfObject, _.org.kevoree.PortTypeRef)) {
                subResult.putAll(this.getPortTypeRefJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                subResult.putAll(this.getServicePortTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.OperationImpl) || Kotlin.isType(selfObject, _.org.kevoree.Operation)) {
                subResult.putAll(this.getOperationJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ParameterImpl) || Kotlin.isType(selfObject, _.org.kevoree.Parameter)) {
                subResult.putAll(this.getParameterJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.TypedElementImpl) || Kotlin.isType(selfObject, _.org.kevoree.TypedElement)) {
                subResult.putAll(this.getTypedElementJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                subResult.putAll(this.getMessagePortTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.TypeLibraryImpl) || Kotlin.isType(selfObject, _.org.kevoree.TypeLibrary)) {
                subResult.putAll(this.getTypeLibraryJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.IntegrationPatternImpl) || Kotlin.isType(selfObject, _.org.kevoree.IntegrationPattern)) {
                subResult.putAll(this.getIntegrationPatternJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NetworkPropertyImpl) || Kotlin.isType(selfObject, _.org.kevoree.NetworkProperty)) {
                subResult.putAll(this.getNetworkPropertyJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                subResult.putAll(this.getChannelTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.InstanceImpl) || Kotlin.isType(selfObject, _.org.kevoree.Instance)) {
                subResult.putAll(this.getInstanceJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                subResult.putAll(this.getGroupTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                subResult.putAll(this.getNodeTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.AdaptationPrimitiveType)) {
                subResult.putAll(this.getAdaptationPrimitiveTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else {
              }
              return subResult;
            },
            NamedElementtoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                this.ComponentTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NamespaceImpl) || Kotlin.isType(selfObject, _.org.kevoree.Namespace)) {
                this.NamespacetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.PortTypeRefImpl) || Kotlin.isType(selfObject, _.org.kevoree.PortTypeRef)) {
                this.PortTypeReftoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                this.ServicePortTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.OperationImpl) || Kotlin.isType(selfObject, _.org.kevoree.Operation)) {
                this.OperationtoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ParameterImpl) || Kotlin.isType(selfObject, _.org.kevoree.Parameter)) {
                this.ParametertoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.TypedElementImpl) || Kotlin.isType(selfObject, _.org.kevoree.TypedElement)) {
                this.TypedElementtoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                this.MessagePortTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.TypeLibraryImpl) || Kotlin.isType(selfObject, _.org.kevoree.TypeLibrary)) {
                this.TypeLibrarytoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.IntegrationPatternImpl) || Kotlin.isType(selfObject, _.org.kevoree.IntegrationPattern)) {
                this.IntegrationPatterntoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NetworkPropertyImpl) || Kotlin.isType(selfObject, _.org.kevoree.NetworkProperty)) {
                this.NetworkPropertytoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                this.ChannelTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.InstanceImpl) || Kotlin.isType(selfObject, _.org.kevoree.Instance)) {
                this.InstancetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                this.GroupTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                this.NodeTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.AdaptationPrimitiveType)) {
                this.AdaptationPrimitiveTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:NamedElement" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                ostream.println_1('}');
              }
            },
            getComponentTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionaryType = selfObject.get_dictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              {
                var tmp$1 = selfObject.get_required().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_required = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortTypeRefJsonAddr(sub));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$3 = selfObject.get_integrationPatterns().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  var subPath_integrationPatterns = sub_0.path();
                  var tmp$4;
                  subResult.put(sub_0, (tmp$4 = sub_0.path()) != null ? tmp$4 : Kotlin.throwNPE());
                  subResult.putAll(this.getIntegrationPatternJsonAddr(sub_0));
                  i = i + 1;
                }
              }
              var subextraFonctionalProperties = selfObject.get_extraFonctionalProperties();
              if (subextraFonctionalProperties != null) {
                var tmp$5;
                subResult.put(subextraFonctionalProperties, (tmp$5 = subextraFonctionalProperties.path()) != null ? tmp$5 : Kotlin.throwNPE());
                subResult.putAll(this.getExtraFonctionalPropertyJsonAddr(subextraFonctionalProperties));
              }
              i = 0;
              {
                var tmp$6 = selfObject.get_provided().iterator();
                while (tmp$6.hasNext()) {
                  var sub_1 = tmp$6.next();
                  var subPath_provided = sub_1.path();
                  var tmp$7;
                  subResult.put(sub_1, (tmp$7 = sub_1.path()) != null ? tmp$7 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortTypeRefJsonAddr(sub_1));
                  i = i + 1;
                }
              }
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.CompositeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.CompositeType)) {
                subResult.putAll(this.getCompositeTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else {
              }
              return subResult;
            },
            ComponentTypetoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.CompositeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.CompositeType)) {
                this.CompositeTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ComponentType" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_factoryBean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_factoryBean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_factoryBean());
                  ostream.print_0('"');
                }
                if (selfObject.get_bean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_bean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_bean());
                  ostream.print_0('"');
                }
                if (selfObject.get_nature() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_nature()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "nature":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_nature());
                  ostream.print_0('"');
                }
                if (selfObject.get_startMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_startMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_startMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_stopMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_stopMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_stopMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_updateMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_updateMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_updateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_deployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference ComponentType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_superTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.get_superTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference ComponentType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.get_dictionaryType();
                if (subdictionaryType != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                if (selfObject.get_required().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"required": [');
                  var iloop_first_required = true;
                  {
                    var tmp$2 = selfObject.get_required().iterator();
                    while (tmp$2.hasNext()) {
                      var so = tmp$2.next();
                      if (!iloop_first_required) {
                        ostream.println_1(',');
                      }
                      this.PortTypeReftoJson(so, addrs, ostream);
                      iloop_first_required = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_integrationPatterns().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"integrationPatterns": [');
                  var iloop_first_integrationPatterns = true;
                  {
                    var tmp$3 = selfObject.get_integrationPatterns().iterator();
                    while (tmp$3.hasNext()) {
                      var so_0 = tmp$3.next();
                      if (!iloop_first_integrationPatterns) {
                        ostream.println_1(',');
                      }
                      this.IntegrationPatterntoJson(so_0, addrs, ostream);
                      iloop_first_integrationPatterns = false;
                    }
                  }
                  ostream.println_1(']');
                }
                var subextraFonctionalProperties = selfObject.get_extraFonctionalProperties();
                if (subextraFonctionalProperties != null) {
                  ostream.println_1(',');
                  ostream.print('"extraFonctionalProperties":');
                  this.ExtraFonctionalPropertytoJson(subextraFonctionalProperties, addrs, ostream);
                }
                if (selfObject.get_provided().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"provided": [');
                  var iloop_first_provided = true;
                  {
                    var tmp$4 = selfObject.get_provided().iterator();
                    while (tmp$4.hasNext()) {
                      var so_1 = tmp$4.next();
                      if (!iloop_first_provided) {
                        ostream.println_1(',');
                      }
                      this.PortTypeReftoJson(so_1, addrs, ostream);
                      iloop_first_provided = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getGroupTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.get_dictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              return subResult;
            },
            GroupTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:GroupType" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_factoryBean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_factoryBean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_factoryBean());
                  ostream.print_0('"');
                }
                if (selfObject.get_bean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_bean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_bean());
                  ostream.print_0('"');
                }
                if (selfObject.get_nature() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_nature()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "nature":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_nature());
                  ostream.print_0('"');
                }
                if (selfObject.get_startMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_startMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_startMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_stopMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_stopMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_stopMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_updateMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_updateMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_updateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_deployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference GroupType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_superTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.get_superTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference GroupType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.get_dictionaryType();
                if (subdictionaryType != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println_1('}');
              }
            },
            getOperationJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.get_parameters().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_parameters = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getParameterJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            OperationtoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Operation" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                var subsubreturnType = selfObject.get_returnType();
                if (subsubreturnType != null) {
                  var subsubsubreturnType = addrs.get(subsubreturnType);
                  if (subsubsubreturnType != null) {
                    ostream.println_1(',');
                    ostream.print(' "returnType":"' + subsubsubreturnType + '"');
                  }
                   else {
                    throw new Error('KMF Operation Serialization error : No address found for reference returnType(id:' + subsubreturnType + ' container:' + subsubreturnType.eContainer() + ')');
                  }
                }
                if (selfObject.get_parameters().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"parameters": [');
                  var iloop_first_parameters = true;
                  {
                    var tmp$0 = selfObject.get_parameters().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_parameters) {
                        ostream.println_1(',');
                      }
                      this.ParametertoJson(so, addrs, ostream);
                      iloop_first_parameters = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getDeployUnitJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            DeployUnittoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:DeployUnit" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_groupName() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_groupName()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "groupName":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_groupName());
                  ostream.print_0('"');
                }
                if (selfObject.get_unitName() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_unitName()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "unitName":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_unitName());
                  ostream.print_0('"');
                }
                if (selfObject.get_version() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_version()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "version":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_version());
                  ostream.print_0('"');
                }
                if (selfObject.get_url() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_url()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "url":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_url());
                  ostream.print_0('"');
                }
                if (selfObject.get_hashcode() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_hashcode()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "hashcode":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_hashcode());
                  ostream.print_0('"');
                }
                if (selfObject.get_type() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_type()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "type":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_type());
                  ostream.print_0('"');
                }
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.get_requiredLibs().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "requiredLibs": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_requiredLibs().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference DeployUnit/requiredLibs ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                var subsubtargetNodeType = selfObject.get_targetNodeType();
                if (subsubtargetNodeType != null) {
                  var subsubsubtargetNodeType = addrs.get(subsubtargetNodeType);
                  if (subsubsubtargetNodeType != null) {
                    ostream.println_1(',');
                    ostream.print(' "targetNodeType":"' + subsubsubtargetNodeType + '"');
                  }
                   else {
                    throw new Error('KMF DeployUnit Serialization error : No address found for reference targetNodeType(id:' + subsubtargetNodeType + ' container:' + subsubtargetNodeType.eContainer() + ')');
                  }
                }
                ostream.println_1('}');
              }
            },
            getChannelTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.get_dictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              return subResult;
            },
            ChannelTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ChannelType" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_factoryBean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_factoryBean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_factoryBean());
                  ostream.print_0('"');
                }
                if (selfObject.get_bean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_bean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_bean());
                  ostream.print_0('"');
                }
                if (selfObject.get_nature() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_nature()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "nature":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_nature());
                  ostream.print_0('"');
                }
                if (selfObject.get_startMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_startMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_startMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_stopMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_stopMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_stopMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_updateMethod() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_updateMethod()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_updateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.get_lowerBindings() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_lowerBindings()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "lowerBindings":');
                  ostream.print('"');
                  var tmp$0;
                  ostream.print_1((tmp$0 = selfObject.get_lowerBindings()) != null ? tmp$0 : Kotlin.throwNPE());
                  ostream.print_0('"');
                }
                if (selfObject.get_upperBindings() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_upperBindings()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "upperBindings":');
                  ostream.print('"');
                  var tmp$1;
                  ostream.print_1((tmp$1 = selfObject.get_upperBindings()) != null ? tmp$1 : Kotlin.throwNPE());
                  ostream.print_0('"');
                }
                if (selfObject.get_lowerFragments() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_lowerFragments()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "lowerFragments":');
                  ostream.print('"');
                  var tmp$2;
                  ostream.print_1((tmp$2 = selfObject.get_lowerFragments()) != null ? tmp$2 : Kotlin.throwNPE());
                  ostream.print_0('"');
                }
                if (selfObject.get_upperFragments() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_upperFragments()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "upperFragments":');
                  ostream.print('"');
                  var tmp$3;
                  ostream.print_1((tmp$3 = selfObject.get_upperFragments()) != null ? tmp$3 : Kotlin.throwNPE());
                  ostream.print_0('"');
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$4 = selfObject.get_deployUnits().iterator();
                    while (tmp$4.hasNext()) {
                      var sub = tmp$4.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference ChannelType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_superTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$5 = selfObject.get_superTypes().iterator();
                    while (tmp$5.hasNext()) {
                      var sub_0 = tmp$5.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference ChannelType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.get_dictionaryType();
                if (subdictionaryType != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println_1('}');
              }
            },
            getPortTypeRefJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.get_mappings().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_mappings = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortTypeMappingJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            PortTypeReftoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:PortTypeRef" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_optional() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_optional()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "optional":');
                  var tmp$0;
                  ostream.print_3((tmp$0 = selfObject.get_optional()) != null ? tmp$0 : Kotlin.throwNPE());
                }
                if (selfObject.get_noDependency() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_noDependency()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "noDependency":');
                  var tmp$1;
                  ostream.print_3((tmp$1 = selfObject.get_noDependency()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                var subsubref = selfObject.get_ref();
                if (subsubref != null) {
                  var subsubsubref = addrs.get(subsubref);
                  if (subsubsubref != null) {
                    ostream.println_1(',');
                    ostream.print(' "ref":"' + subsubsubref + '"');
                  }
                   else {
                    throw new Error('KMF PortTypeRef Serialization error : No address found for reference ref(id:' + subsubref + ' container:' + subsubref.eContainer() + ')');
                  }
                }
                if (selfObject.get_mappings().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"mappings": [');
                  var iloop_first_mappings = true;
                  {
                    var tmp$2 = selfObject.get_mappings().iterator();
                    while (tmp$2.hasNext()) {
                      var so = tmp$2.next();
                      if (!iloop_first_mappings) {
                        ostream.println_1(',');
                      }
                      this.PortTypeMappingtoJson(so, addrs, ostream);
                      iloop_first_mappings = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getDictionaryTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.get_attributes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_attributes = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getDictionaryAttributeJsonAddr(sub));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$2 = selfObject.get_defaultValues().iterator();
                while (tmp$2.hasNext()) {
                  var sub_0 = tmp$2.next();
                  var subPath_defaultValues = sub_0.path();
                  var tmp$3;
                  subResult.put(sub_0, (tmp$3 = sub_0.path()) != null ? tmp$3 : Kotlin.throwNPE());
                  subResult.putAll(this.getDictionaryValueJsonAddr(sub_0));
                  i = i + 1;
                }
              }
              return subResult;
            },
            DictionaryTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:DictionaryType" ');
                if (selfObject.get_generated_KMF_ID() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_generated_KMF_ID()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_generated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.get_attributes().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"attributes": [');
                  var iloop_first_attributes = true;
                  {
                    var tmp$0 = selfObject.get_attributes().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_attributes) {
                        ostream.println_1(',');
                      }
                      this.DictionaryAttributetoJson(so, addrs, ostream);
                      iloop_first_attributes = false;
                    }
                  }
                  ostream.println_1(']');
                }
                if (selfObject.get_defaultValues().size() > 0) {
                  ostream.println_1(',');
                  ostream.println_0('"defaultValues": [');
                  var iloop_first_defaultValues = true;
                  {
                    var tmp$1 = selfObject.get_defaultValues().iterator();
                    while (tmp$1.hasNext()) {
                      var so_0 = tmp$1.next();
                      if (!iloop_first_defaultValues) {
                        ostream.println_1(',');
                      }
                      this.DictionaryValuetoJson(so_0, addrs, ostream);
                      iloop_first_defaultValues = false;
                    }
                  }
                  ostream.println_1(']');
                }
                ostream.println_1('}');
              }
            },
            getMessagePortTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.get_dictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              return subResult;
            },
            MessagePortTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:MessagePortType" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_factoryBean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_factoryBean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_factoryBean());
                  ostream.print_0('"');
                }
                if (selfObject.get_bean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_bean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_bean());
                  ostream.print_0('"');
                }
                if (selfObject.get_nature() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_nature()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "nature":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_nature());
                  ostream.print_0('"');
                }
                if (selfObject.get_synchrone() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_synchrone()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "synchrone":');
                  var tmp$0;
                  ostream.print_3((tmp$0 = selfObject.get_synchrone()) != null ? tmp$0 : Kotlin.throwNPE());
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$1 = selfObject.get_deployUnits().iterator();
                    while (tmp$1.hasNext()) {
                      var sub = tmp$1.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference MessagePortType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_superTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$2 = selfObject.get_superTypes().iterator();
                    while (tmp$2.hasNext()) {
                      var sub_0 = tmp$2.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference MessagePortType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_filters().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "filters": [');
                  var firstItLoop_1 = true;
                  {
                    var tmp$3 = selfObject.get_filters().iterator();
                    while (tmp$3.hasNext()) {
                      var sub_1 = tmp$3.next();
                      if (!firstItLoop_1) {
                        ostream.println_0(',');
                      }
                      var subsub_1 = addrs.get(sub_1);
                      if (subsub_1 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_1);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference MessagePortType/filters ');
                      }
                      firstItLoop_1 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.get_dictionaryType();
                if (subdictionaryType != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println_1('}');
              }
            },
            getTypeDefinitionJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.get_dictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                subResult.putAll(this.getComponentTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                subResult.putAll(this.getServicePortTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                subResult.putAll(this.getMessagePortTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                subResult.putAll(this.getChannelTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                subResult.putAll(this.getGroupTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                subResult.putAll(this.getNodeTypeJsonAddr(selfObject != null ? selfObject : Kotlin.throwNPE()));
              }
               else {
              }
              return subResult;
            },
            TypeDefinitiontoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                this.ComponentTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                this.ServicePortTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                this.MessagePortTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                this.ChannelTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                this.GroupTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                this.NodeTypetoJson(selfObject != null ? selfObject : Kotlin.throwNPE(), addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:TypeDefinition" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_factoryBean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_factoryBean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_factoryBean());
                  ostream.print_0('"');
                }
                if (selfObject.get_bean() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_bean()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_bean());
                  ostream.print_0('"');
                }
                if (selfObject.get_nature() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_nature()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "nature":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_nature());
                  ostream.print_0('"');
                }
                if (selfObject.get_deployUnits().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_deployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference TypeDefinition/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.get_superTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.get_superTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference TypeDefinition/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.get_dictionaryType();
                if (subdictionaryType != null) {
                  ostream.println_1(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println_1('}');
              }
            },
            getTypeLibraryJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            TypeLibrarytoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:TypeLibrary" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_subTypes().size() > 0) {
                  ostream.println_1(',');
                  ostream.print(' "subTypes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.get_subTypes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Error('KMF Serialization error : non contained reference TypeLibrary/subTypes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println_1('}');
              }
            },
            getNetworkPropertyJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            NetworkPropertytoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:NetworkProperty" ');
                if (selfObject.get_name() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_name()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_name());
                  ostream.print_0('"');
                }
                if (selfObject.get_value() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_value()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "value":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_value());
                  ostream.print_0('"');
                }
                if (selfObject.get_lastCheck() != null && !Kotlin.equals(Kotlin.toString(selfObject.get_lastCheck()), '')) {
                  ostream.println_1(',');
                  ostream.print(' "lastCheck":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.get_lastCheck());
                  ostream.print_0('"');
                }
                ostream.println_1('}');
              }
            }
          })
        }),
        trace: Kotlin.definePackage({
          DefaultTraceSequence: Kotlin.createClass(classes.c10, /** @lends _.org.kevoree.trace.DefaultTraceSequence.prototype */ {
            initialize: function () {
              this.$traces = new Kotlin.ArrayList(0);
            },
            get_traces: function () {
              return this.$traces;
            },
            set_traces: function (tmp$0) {
              this.$traces = tmp$0;
            },
            getTraces: function () {
              return this.get_traces();
            },
            populate: function (addtraces) {
              this.get_traces().addAll(addtraces);
              return this;
            },
            populateFromString: function (addtracesTxt) {
              var bytes = Kotlin.numberArrayOfSize(addtracesTxt.length);
              var i = 0;
              while (i < addtracesTxt.length) {
                var tmp$0;
                bytes[i] = (tmp$0 = addtracesTxt.charAt(i)) != null ? tmp$0 : Kotlin.throwNPE();
                i = i + 1;
              }
              return this.populateFromStream(new _.java.io.ByteArrayInputStream(bytes));
            },
            populateFromStream: function (inputStream) {
              var parser = new _.org.kevoree.loader.JsonReader(inputStream);
              parser.beginArray();
              var keys = new Kotlin.PrimitiveHashMap(0);
              while (parser.hasNext() && parser.peek() !== parser.get_PEEKED_END_ARRAY()) {
                parser.beginObject();
                keys.clear();
                parser.nextName();
                var value = parser.nextInt();
                while (parser.hasNext() && parser.peek() !== parser.get_PEEKED_END_OBJECT()) {
                  keys.put(parser.nextName(), parser.nextString());
                }
                parser.endObject();
                if (value === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  var tmp$0, tmp$1;
                  this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = keys.get('src')) != null ? tmp$0 : Kotlin.throwNPE(), (tmp$1 = keys.get('refname')) != null ? tmp$1 : Kotlin.throwNPE(), keys.get('objpath'), keys.get('content'), keys.get('typename')));
                }
                 else if (value === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  var tmp$2, tmp$3, tmp$4;
                  this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$2 = keys.get('src')) != null ? tmp$2 : Kotlin.throwNPE(), (tmp$3 = keys.get('refname')) != null ? tmp$3 : Kotlin.throwNPE(), (tmp$4 = keys.get('previouspath')) != null ? tmp$4 : Kotlin.throwNPE(), keys.get('typename')));
                }
                 else if (value === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  var tmp$5, tmp$6, tmp$7, tmp$8, tmp$9, tmp$10;
                  this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$5 = keys.get('src')) != null ? tmp$5 : Kotlin.throwNPE(), (tmp$6 = keys.get('refname')) != null ? tmp$6 : Kotlin.throwNPE(), (tmp$8 = (tmp$7 = keys.get('content')) != null ? Kotlin.splitString(tmp$7, ';') : null) != null ? _.kotlin.toList_8(tmp$8) : null, (tmp$10 = (tmp$9 = keys.get('typename')) != null ? Kotlin.splitString(tmp$9, ';') : null) != null ? _.kotlin.toList_8(tmp$10) : null));
                }
                 else if (value === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  var tmp$11, tmp$12, tmp$13;
                  this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$11 = keys.get('src')) != null ? tmp$11 : Kotlin.throwNPE(), (tmp$12 = keys.get('refname')) != null ? tmp$12 : Kotlin.throwNPE(), (tmp$13 = keys.get('objpath')) != null ? tmp$13 : Kotlin.throwNPE()));
                }
                 else if (value === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  var tmp$14, tmp$15;
                  this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace((tmp$14 = keys.get('src')) != null ? tmp$14 : Kotlin.throwNPE(), (tmp$15 = keys.get('refname')) != null ? tmp$15 : Kotlin.throwNPE()));
                }
                 else if (value === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                }
              }
              return this;
            },
            exportToString: function () {
              var buffer = new _.java.lang.StringBuilder();
              buffer.append('[');
              var isFirst = true;
              {
                var tmp$0 = this.get_traces().iterator();
                while (tmp$0.hasNext()) {
                  var trace = tmp$0.next();
                  if (!isFirst) {
                    buffer.append(',');
                  }
                  buffer.append(trace.toString());
                  isFirst = false;
                }
              }
              buffer.append(']');
              return buffer.toString();
            },
            applyOn: function (target) {
              var traceApplicator = new _.org.kevoree.modeling.api.trace.ModelTraceApplicator(target, new _.org.kevoree.factory.MainFactory());
              traceApplicator.applyTraceOnModel(this);
              return true;
            }
          })
        }),
        util: Kotlin.definePackage({
        })
      }),
      w3c: Kotlin.definePackage({
        dom: Kotlin.definePackage({
          events: Kotlin.definePackage({
            EventListener: classes.c1k
          })
        })
      })
    }),
    js: Kotlin.definePackage({
      lastIndexOf: function ($receiver, ch, fromIndex) {
        return $receiver.lastIndexOf(Kotlin.toString(ch), fromIndex);
      },
      lastIndexOf_0: function ($receiver, ch) {
        return $receiver.lastIndexOf(Kotlin.toString(ch));
      },
      indexOf: function ($receiver, ch) {
        return $receiver.indexOf(Kotlin.toString(ch));
      },
      indexOf_0: function ($receiver, ch, fromIndex) {
        return $receiver.indexOf(Kotlin.toString(ch), fromIndex);
      },
      matches: function ($receiver, regex) {
        var result = $receiver.match(regex);
        return result != null && result.length > 0;
      },
      capitalize: function ($receiver) {
        return _.kotlin.notEmpty($receiver) ? $receiver.substring(0, 1).toUpperCase() + $receiver.substring(1) : $receiver;
      },
      decapitalize: function ($receiver) {
        return _.kotlin.notEmpty($receiver) ? $receiver.substring(0, 1).toLowerCase() + $receiver.substring(1) : $receiver;
      }
    })
  };
  (function () {
    this.IntegerParser = Kotlin.createObject(null, {
      initialize: function () {
        this.$DIGIT = null;
      },
      get_DIGIT: function () {
        return this.$DIGIT;
      },
      set_DIGIT: function (tmp$0) {
        this.$DIGIT = tmp$0;
      },
      digit: function (c) {
        if (this.get_DIGIT() == null) {
          this.set_DIGIT(new Kotlin.PrimitiveHashMap(0));
          var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7, tmp$8, tmp$9;
          ((tmp$0 = this.get_DIGIT()) != null ? tmp$0 : Kotlin.throwNPE()).put('0', 0);
          ((tmp$1 = this.get_DIGIT()) != null ? tmp$1 : Kotlin.throwNPE()).put('1', 1);
          ((tmp$2 = this.get_DIGIT()) != null ? tmp$2 : Kotlin.throwNPE()).put('2', 2);
          ((tmp$3 = this.get_DIGIT()) != null ? tmp$3 : Kotlin.throwNPE()).put('3', 3);
          ((tmp$4 = this.get_DIGIT()) != null ? tmp$4 : Kotlin.throwNPE()).put('4', 4);
          ((tmp$5 = this.get_DIGIT()) != null ? tmp$5 : Kotlin.throwNPE()).put('5', 5);
          ((tmp$6 = this.get_DIGIT()) != null ? tmp$6 : Kotlin.throwNPE()).put('6', 6);
          ((tmp$7 = this.get_DIGIT()) != null ? tmp$7 : Kotlin.throwNPE()).put('7', 7);
          ((tmp$8 = this.get_DIGIT()) != null ? tmp$8 : Kotlin.throwNPE()).put('8', 8);
          ((tmp$9 = this.get_DIGIT()) != null ? tmp$9 : Kotlin.throwNPE()).put('9', 9);
        }
        var tmp$10;
        if (((tmp$10 = this.get_DIGIT()) != null ? tmp$10 : Kotlin.throwNPE()).containsKey(c)) {
          var tmp$11, tmp$12;
          return (tmp$12 = ((tmp$11 = this.get_DIGIT()) != null ? tmp$11 : Kotlin.throwNPE()).get(c)) != null ? tmp$12 : Kotlin.throwNPE();
        }
         else {
          return -1;
        }
      },
      parseInt: function (s) {
        var radix = 10;
        var result = 0;
        var negative = false;
        var i = 0;
        var len = s.length;
        var digit = 0;
        if (len > 0) {
          var firstChar = s.charAt(0);
          if (firstChar < '0') {
            if (firstChar === '-') {
              negative = true;
            }
             else {
              return null;
            }
            if (len === 1) {
              return null;
            }
            i++;
          }
          while (i < len) {
            digit = this.digit(s.charAt(i++));
            if (digit < 0) {
              return null;
            }
            result *= radix;
            result -= digit;
          }
        }
         else {
          return null;
        }
        if (negative) {
          return result;
        }
         else {
          return -result;
        }
      }
    });
    this.LongParser = Kotlin.createObject(null, {
      initialize: function () {
        this.$DIGIT = null;
      },
      get_DIGIT: function () {
        return this.$DIGIT;
      },
      set_DIGIT: function (tmp$0) {
        this.$DIGIT = tmp$0;
      },
      digit: function (c) {
        if (this.get_DIGIT() == null) {
          this.set_DIGIT(new Kotlin.PrimitiveHashMap(0));
          var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7, tmp$8, tmp$9;
          ((tmp$0 = this.get_DIGIT()) != null ? tmp$0 : Kotlin.throwNPE()).put('0', 0.0);
          ((tmp$1 = this.get_DIGIT()) != null ? tmp$1 : Kotlin.throwNPE()).put('1', 1.0);
          ((tmp$2 = this.get_DIGIT()) != null ? tmp$2 : Kotlin.throwNPE()).put('2', 2.0);
          ((tmp$3 = this.get_DIGIT()) != null ? tmp$3 : Kotlin.throwNPE()).put('3', 3.0);
          ((tmp$4 = this.get_DIGIT()) != null ? tmp$4 : Kotlin.throwNPE()).put('4', 4.0);
          ((tmp$5 = this.get_DIGIT()) != null ? tmp$5 : Kotlin.throwNPE()).put('5', 5.0);
          ((tmp$6 = this.get_DIGIT()) != null ? tmp$6 : Kotlin.throwNPE()).put('6', 6.0);
          ((tmp$7 = this.get_DIGIT()) != null ? tmp$7 : Kotlin.throwNPE()).put('7', 7.0);
          ((tmp$8 = this.get_DIGIT()) != null ? tmp$8 : Kotlin.throwNPE()).put('8', 8.0);
          ((tmp$9 = this.get_DIGIT()) != null ? tmp$9 : Kotlin.throwNPE()).put('9', 9.0);
        }
        var tmp$10;
        if (((tmp$10 = this.get_DIGIT()) != null ? tmp$10 : Kotlin.throwNPE()).containsKey(c)) {
          var tmp$11, tmp$12;
          return (tmp$12 = ((tmp$11 = this.get_DIGIT()) != null ? tmp$11 : Kotlin.throwNPE()).get(c)) != null ? tmp$12 : Kotlin.throwNPE();
        }
         else {
          var tmp$13;
          return (tmp$13 = -1) != null ? tmp$13 : Kotlin.throwNPE();
        }
      },
      parseLong: function (s) {
        var radix = 10;
        var result = 0.0;
        var negative = false;
        var i = 0;
        var len = s.length;
        var digit = 0.0;
        if (len > 0) {
          var firstChar = s.charAt(0);
          if (firstChar < '0') {
            if (firstChar === '-') {
              negative = true;
            }
             else {
              return null;
            }
            if (len === 1) {
              return null;
            }
            i++;
          }
          while (i < len) {
            digit = this.digit(s.charAt(i++));
            if (digit < 0) {
              return null;
            }
            result *= radix;
            result -= digit;
          }
        }
         else {
          return null;
        }
        if (negative) {
          return result;
        }
         else {
          return -result;
        }
      }
    });
  }.call(_.java.lang));
  (function () {
    this.Package = Kotlin.createObject(null, {
      initialize: function () {
        this.$ORG_KEVOREE = 0;
      },
      get_ORG_KEVOREE: function () {
        return this.$ORG_KEVOREE;
      },
      getPackageForName: function (metaClassName) {
        if (metaClassName.startsWith('org.kevoree')) {
          return 0;
        }
        return -1;
      }
    });
  }.call(_.org.kevoree.factory));
  (function () {
    this.JsonToken = Kotlin.createObject(null, {
      initialize: function () {
        this.$BEGIN_ARRAY = 0;
        this.$END_ARRAY = 1;
        this.$BEGIN_OBJECT = 2;
        this.$END_OBJECT = 3;
        this.$NAME = 4;
        this.$STRING = 5;
        this.$NUMBER = 6;
        this.$BOOLEAN = 7;
        this.$NULL = 8;
        this.$END_DOCUMENT = 9;
      },
      get_BEGIN_ARRAY: function () {
        return this.$BEGIN_ARRAY;
      },
      get_END_ARRAY: function () {
        return this.$END_ARRAY;
      },
      get_BEGIN_OBJECT: function () {
        return this.$BEGIN_OBJECT;
      },
      get_END_OBJECT: function () {
        return this.$END_OBJECT;
      },
      get_NAME: function () {
        return this.$NAME;
      },
      get_STRING: function () {
        return this.$STRING;
      },
      get_NUMBER: function () {
        return this.$NUMBER;
      },
      get_BOOLEAN: function () {
        return this.$BOOLEAN;
      },
      get_NULL: function () {
        return this.$NULL;
      },
      get_END_DOCUMENT: function () {
        return this.$END_DOCUMENT;
      }
    });
    this.Type = Kotlin.createObject(null, {
      initialize: function () {
        this.$VALUE = 0;
        this.$LEFT_BRACE = 1;
        this.$RIGHT_BRACE = 2;
        this.$LEFT_BRACKET = 3;
        this.$RIGHT_BRACKET = 4;
        this.$COMMA = 5;
        this.$COLON = 6;
        this.$EOF = 42;
      },
      get_VALUE: function () {
        return this.$VALUE;
      },
      get_LEFT_BRACE: function () {
        return this.$LEFT_BRACE;
      },
      get_RIGHT_BRACE: function () {
        return this.$RIGHT_BRACE;
      },
      get_LEFT_BRACKET: function () {
        return this.$LEFT_BRACKET;
      },
      get_RIGHT_BRACKET: function () {
        return this.$RIGHT_BRACKET;
      },
      get_COMMA: function () {
        return this.$COMMA;
      },
      get_COLON: function () {
        return this.$COLON;
      },
      get_EOF: function () {
        return this.$EOF;
      }
    });
  }.call(_.org.kevoree.loader));
  (function () {
    this.Log = Kotlin.createObject(null, {
      initialize: function () {
        this.$LEVEL_NONE = 6;
        this.$LEVEL_ERROR = 5;
        this.$LEVEL_WARN = 4;
        this.$LEVEL_INFO = 3;
        this.$LEVEL_DEBUG = 2;
        this.$LEVEL_TRACE = 1;
        this.$level = this.get_LEVEL_INFO();
        this.$ERROR = this.get_level() <= this.get_LEVEL_ERROR();
        this.$WARN = this.get_level() <= this.get_LEVEL_WARN();
        this.$INFO = this.get_level() <= this.get_LEVEL_INFO();
        this.$DEBUG = this.get_level() <= this.get_LEVEL_DEBUG();
        this.$TRACE = this.get_level() <= this.get_LEVEL_TRACE();
        this.$logger = new _.org.kevoree.log.Logger();
        this.$beginParam = '{';
        this.$endParam = '}';
      },
      get_LEVEL_NONE: function () {
        return this.$LEVEL_NONE;
      },
      get_LEVEL_ERROR: function () {
        return this.$LEVEL_ERROR;
      },
      get_LEVEL_WARN: function () {
        return this.$LEVEL_WARN;
      },
      get_LEVEL_INFO: function () {
        return this.$LEVEL_INFO;
      },
      get_LEVEL_DEBUG: function () {
        return this.$LEVEL_DEBUG;
      },
      get_LEVEL_TRACE: function () {
        return this.$LEVEL_TRACE;
      },
      get_level: function () {
        return this.$level;
      },
      set_level: function (tmp$0) {
        this.$level = tmp$0;
      },
      get_ERROR: function () {
        return this.$ERROR;
      },
      set_ERROR: function (tmp$0) {
        this.$ERROR = tmp$0;
      },
      get_WARN: function () {
        return this.$WARN;
      },
      set_WARN: function (tmp$0) {
        this.$WARN = tmp$0;
      },
      get_INFO: function () {
        return this.$INFO;
      },
      set_INFO: function (tmp$0) {
        this.$INFO = tmp$0;
      },
      get_DEBUG: function () {
        return this.$DEBUG;
      },
      set_DEBUG: function (tmp$0) {
        this.$DEBUG = tmp$0;
      },
      get_TRACE: function () {
        return this.$TRACE;
      },
      set_TRACE: function (tmp$0) {
        this.$TRACE = tmp$0;
      },
      set: function (level) {
        _.org.kevoree.log.Log.set_level(level);
        this.set_ERROR(level <= this.get_LEVEL_ERROR());
        this.set_WARN(level <= this.get_LEVEL_WARN());
        this.set_INFO(level <= this.get_LEVEL_INFO());
        this.set_DEBUG(level <= this.get_LEVEL_DEBUG());
        this.set_TRACE(level <= this.get_LEVEL_TRACE());
      },
      NONE: function () {
        this.set(this.get_LEVEL_NONE());
      },
      ERROR: function () {
        this.set(this.get_LEVEL_ERROR());
      },
      WARN: function () {
        this.set(this.get_LEVEL_WARN());
      },
      INFO: function () {
        this.set(this.get_LEVEL_INFO());
      },
      DEBUG: function () {
        this.set(this.get_LEVEL_DEBUG());
      },
      TRACE: function () {
        this.set(this.get_LEVEL_TRACE());
      },
      setLogger: function (logger) {
        _.org.kevoree.log.Log.set_logger(logger);
      },
      get_logger: function () {
        return this.$logger;
      },
      set_logger: function (tmp$0) {
        this.$logger = tmp$0;
      },
      get_beginParam: function () {
        return this.$beginParam;
      },
      get_endParam: function () {
        return this.$endParam;
      },
      processMessage: function (message, p1, p2, p3, p4, p5) {
        if (p1 == null) {
          return message;
        }
        var buffer = new _.java.lang.StringBuilder();
        var previousCharfound = false;
        var param = 0;
        var i = 0;
        while (i < message.length) {
          var currentChar = message.charAt(i);
          if (previousCharfound) {
            if (currentChar === this.get_endParam()) {
              param++;
              if (param === 1) {
                buffer = new _.java.lang.StringBuilder();
                buffer.append(message.substring(0, i - 1));
                buffer.append(Kotlin.toString(p1 != null ? p1 : Kotlin.throwNPE()));
              }
               else if (param === 2) {
                buffer.append(Kotlin.toString(p2 != null ? p2 : Kotlin.throwNPE()));
              }
               else if (param === 3) {
                buffer.append(Kotlin.toString(p3 != null ? p3 : Kotlin.throwNPE()));
              }
               else if (param === 4) {
                buffer.append(Kotlin.toString(p4 != null ? p4 : Kotlin.throwNPE()));
              }
               else if (param === 5) {
                buffer.append(Kotlin.toString(p5 != null ? p5 : Kotlin.throwNPE()));
              }
               else {
              }
              previousCharfound = false;
            }
             else {
              if (buffer != null) {
                message.charAt(i - 1);
                buffer.append_0(currentChar);
              }
              previousCharfound = false;
            }
          }
           else {
            if (currentChar === this.get_beginParam()) {
              previousCharfound = true;
            }
             else {
              if (buffer != null) {
                buffer.append_0(currentChar);
              }
            }
          }
          i = i + 1;
        }
        if (buffer != null) {
          return buffer.toString();
        }
         else {
          return message;
        }
      },
      error: function (message) {
        if (this.get_ERROR())
          this.get_logger().log(this.get_LEVEL_ERROR(), message, null);
      },
      error_0: function (message, ex) {
        if (this.get_ERROR())
          this.get_logger().log(this.get_LEVEL_ERROR(), message, ex);
      },
      error_1: function (message, ex, p1) {
        if (this.get_ERROR()) {
          this.error_0(this.processMessage(message, p1, null, null, null, null), ex);
        }
      },
      error_2: function (message, ex, p1, p2) {
        if (this.get_ERROR()) {
          this.error_0(this.processMessage(message, p1, p2, null, null, null), ex);
        }
      },
      error_3: function (message, ex, p1, p2, p3) {
        if (this.get_ERROR()) {
          this.error_0(this.processMessage(message, p1, p2, p3, null, null), ex);
        }
      },
      error_4: function (message, ex, p1, p2, p3, p4) {
        if (this.get_ERROR()) {
          this.error_0(this.processMessage(message, p1, p2, p3, p4, null), ex);
        }
      },
      error_5: function (message, ex, p1, p2, p3, p4, p5) {
        if (this.get_ERROR()) {
          this.error_0(this.processMessage(message, p1, p2, p3, p4, p5), ex);
        }
      },
      error_6: function (message, p1) {
        if (this.get_ERROR()) {
          this.error_0(this.processMessage(message, p1, null, null, null, null), null);
        }
      },
      error_7: function (message, p1, p2) {
        if (this.get_ERROR()) {
          this.error_0(this.processMessage(message, p1, p2, null, null, null), null);
        }
      },
      error_8: function (message, p1, p2, p3) {
        if (this.get_ERROR()) {
          this.error_0(this.processMessage(message, p1, p2, p3, null, null), null);
        }
      },
      error_9: function (message, p1, p2, p3, p4) {
        if (this.get_ERROR()) {
          this.error_0(this.processMessage(message, p1, p2, p3, p4, null), null);
        }
      },
      error_10: function (message, p1, p2, p3, p4, p5) {
        if (this.get_ERROR()) {
          this.error_0(this.processMessage(message, p1, p2, p3, p4, p5), null);
        }
      },
      warn: function (message, ex) {
        if (this.get_WARN())
          this.get_logger().log(this.get_LEVEL_WARN(), message, ex);
      },
      warn_0: function (message) {
        if (this.get_WARN())
          this.get_logger().log(this.get_LEVEL_WARN(), message, null);
      },
      warn_1: function (message, ex, p1) {
        if (this.get_WARN()) {
          this.warn(this.processMessage(message, p1, null, null, null, null), ex);
        }
      },
      warn_2: function (message, ex, p1, p2) {
        if (this.get_WARN()) {
          this.warn(this.processMessage(message, p1, p2, null, null, null), ex);
        }
      },
      warn_3: function (message, ex, p1, p2, p3) {
        if (this.get_WARN()) {
          this.warn(this.processMessage(message, p1, p2, p3, null, null), ex);
        }
      },
      warn_4: function (message, ex, p1, p2, p3, p4) {
        if (this.get_WARN()) {
          this.warn(this.processMessage(message, p1, p2, p3, p4, null), ex);
        }
      },
      warn_5: function (message, ex, p1, p2, p3, p4, p5) {
        if (this.get_WARN()) {
          this.warn(this.processMessage(message, p1, p2, p3, p4, p5), ex);
        }
      },
      warn_6: function (message, p1) {
        if (this.get_WARN()) {
          this.warn(this.processMessage(message, p1, null, null, null, null), null);
        }
      },
      warn_7: function (message, p1, p2) {
        if (this.get_WARN()) {
          this.warn(this.processMessage(message, p1, p2, null, null, null), null);
        }
      },
      warn_8: function (message, p1, p2, p3) {
        if (this.get_WARN()) {
          this.warn(this.processMessage(message, p1, p2, p3, null, null), null);
        }
      },
      warn_9: function (message, p1, p2, p3, p4) {
        if (this.get_WARN()) {
          this.warn(this.processMessage(message, p1, p2, p3, p4, null), null);
        }
      },
      warn_10: function (message, p1, p2, p3, p4, p5) {
        if (this.get_WARN()) {
          this.warn(this.processMessage(message, p1, p2, p3, p4, p5), null);
        }
      },
      info: function (message, ex) {
        if (this.get_INFO())
          this.get_logger().log(this.get_LEVEL_INFO(), message, ex);
      },
      info_0: function (message) {
        if (this.get_INFO())
          this.get_logger().log(this.get_LEVEL_INFO(), message, null);
      },
      info_1: function (message, ex, p1) {
        if (this.get_INFO()) {
          this.info(this.processMessage(message, p1, null, null, null, null), ex);
        }
      },
      info_2: function (message, ex, p1, p2) {
        if (this.get_INFO()) {
          this.info(this.processMessage(message, p1, p2, null, null, null), ex);
        }
      },
      info_3: function (message, ex, p1, p2, p3) {
        if (this.get_INFO()) {
          this.info(this.processMessage(message, p1, p2, p3, null, null), ex);
        }
      },
      info_4: function (message, ex, p1, p2, p3, p4) {
        if (this.get_INFO()) {
          this.info(this.processMessage(message, p1, p2, p3, p4, null), ex);
        }
      },
      info_5: function (message, ex, p1, p2, p3, p4, p5) {
        if (this.get_INFO()) {
          this.info(this.processMessage(message, p1, p2, p3, p4, p5), ex);
        }
      },
      info_6: function (message, p1) {
        if (this.get_INFO()) {
          this.info(this.processMessage(message, p1, null, null, null, null), null);
        }
      },
      info_7: function (message, p1, p2) {
        if (this.get_INFO()) {
          this.info(this.processMessage(message, p1, p2, null, null, null), null);
        }
      },
      info_8: function (message, p1, p2, p3) {
        if (this.get_INFO()) {
          this.info(this.processMessage(message, p1, p2, p3, null, null), null);
        }
      },
      info_9: function (message, p1, p2, p3, p4) {
        if (this.get_INFO()) {
          this.info(this.processMessage(message, p1, p2, p3, p4, null), null);
        }
      },
      info_10: function (message, p1, p2, p3, p4, p5) {
        if (this.get_INFO()) {
          this.info(this.processMessage(message, p1, p2, p3, p4, p5), null);
        }
      },
      debug: function (message, ex) {
        if (this.get_DEBUG())
          this.get_logger().log(this.get_LEVEL_DEBUG(), message, ex);
      },
      debug_0: function (message) {
        if (this.get_DEBUG())
          this.get_logger().log(this.get_LEVEL_DEBUG(), message, null);
      },
      debug_1: function (message, ex, p1) {
        if (this.get_DEBUG()) {
          this.debug(this.processMessage(message, p1, null, null, null, null), ex);
        }
      },
      debug_2: function (message, ex, p1, p2) {
        if (this.get_DEBUG()) {
          this.debug(this.processMessage(message, p1, p2, null, null, null), ex);
        }
      },
      debug_3: function (message, ex, p1, p2, p3) {
        if (this.get_DEBUG()) {
          this.debug(this.processMessage(message, p1, p2, p3, null, null), ex);
        }
      },
      debug_4: function (message, ex, p1, p2, p3, p4) {
        if (this.get_DEBUG()) {
          this.debug(this.processMessage(message, p1, p2, p3, p4, null), ex);
        }
      },
      debug_5: function (message, ex, p1, p2, p3, p4, p5) {
        if (this.get_DEBUG()) {
          this.debug(this.processMessage(message, p1, p2, p3, p4, p5), ex);
        }
      },
      debug_6: function (message, p1) {
        if (this.get_DEBUG()) {
          this.debug(this.processMessage(message, p1, null, null, null, null), null);
        }
      },
      debug_7: function (message, p1, p2) {
        if (this.get_DEBUG()) {
          this.debug(this.processMessage(message, p1, p2, null, null, null), null);
        }
      },
      debug_8: function (message, p1, p2, p3) {
        if (this.get_DEBUG()) {
          this.debug(this.processMessage(message, p1, p2, p3, null, null), null);
        }
      },
      debug_9: function (message, p1, p2, p3, p4) {
        if (this.get_DEBUG()) {
          this.debug(this.processMessage(message, p1, p2, p3, p4, null), null);
        }
      },
      debug_10: function (message, p1, p2, p3, p4, p5) {
        if (this.get_DEBUG()) {
          this.debug(this.processMessage(message, p1, p2, p3, p4, p5), null);
        }
      },
      trace: function (message, ex) {
        if (this.get_TRACE())
          this.get_logger().log(this.get_LEVEL_TRACE(), message, ex);
      },
      trace_0: function (message) {
        if (this.get_TRACE())
          this.get_logger().log(this.get_LEVEL_TRACE(), message, null);
      },
      trace_1: function (message, ex, p1) {
        if (this.get_TRACE()) {
          this.trace(this.processMessage(message, p1, null, null, null, null), ex);
        }
      },
      trace_2: function (message, ex, p1, p2) {
        if (this.get_TRACE()) {
          this.trace(this.processMessage(message, p1, p2, null, null, null), ex);
        }
      },
      trace_3: function (message, ex, p1, p2, p3) {
        if (this.get_TRACE()) {
          this.trace(this.processMessage(message, p1, p2, p3, null, null), ex);
        }
      },
      trace_4: function (message, ex, p1, p2, p3, p4) {
        if (this.get_TRACE()) {
          this.trace(this.processMessage(message, p1, p2, p3, p4, null), ex);
        }
      },
      trace_5: function (message, ex, p1, p2, p3, p4, p5) {
        if (this.get_TRACE()) {
          this.trace(this.processMessage(message, p1, p2, p3, p4, p5), ex);
        }
      },
      trace_6: function (message, p1) {
        if (this.get_TRACE()) {
          this.trace(this.processMessage(message, p1, null, null, null, null), null);
        }
      },
      trace_7: function (message, p1, p2) {
        if (this.get_TRACE()) {
          this.trace(this.processMessage(message, p1, p2, null, null, null), null);
        }
      },
      trace_8: function (message, p1, p2, p3) {
        if (this.get_TRACE()) {
          this.trace(this.processMessage(message, p1, p2, p3, null, null), null);
        }
      },
      trace_9: function (message, p1, p2, p3, p4) {
        if (this.get_TRACE()) {
          this.trace(this.processMessage(message, p1, p2, p3, p4, null), null);
        }
      },
      trace_10: function (message, p1, p2, p3, p4, p5) {
        if (this.get_TRACE()) {
          this.trace(this.processMessage(message, p1, p2, p3, p4, p5), null);
        }
      }
    });
  }.call(_.org.kevoree.log));
  (function () {
    this.ActionType = Kotlin.createObject(null, {
      initialize: function () {
        this.$SET = 0;
        this.$ADD = 1;
        this.$REMOVE = 2;
        this.$ADD_ALL = 3;
        this.$REMOVE_ALL = 4;
        this.$RENEW_INDEX = 5;
      },
      get_SET: function () {
        return this.$SET;
      },
      get_ADD: function () {
        return this.$ADD;
      },
      get_REMOVE: function () {
        return this.$REMOVE;
      },
      get_ADD_ALL: function () {
        return this.$ADD_ALL;
      },
      get_REMOVE_ALL: function () {
        return this.$REMOVE_ALL;
      },
      get_RENEW_INDEX: function () {
        return this.$RENEW_INDEX;
      }
    });
    this.ElementAttributeType = Kotlin.createObject(null, {
      initialize: function () {
        this.$ATTRIBUTE = 0;
        this.$REFERENCE = 1;
        this.$CONTAINMENT = 2;
      },
      get_ATTRIBUTE: function () {
        return this.$ATTRIBUTE;
      },
      get_REFERENCE: function () {
        return this.$REFERENCE;
      },
      get_CONTAINMENT: function () {
        return this.$CONTAINMENT;
      }
    });
  }.call(_.org.kevoree.modeling.api.util));
  (function () {
    this.Constants = Kotlin.createObject(null, {
      initialize: function () {
        this.$UNKNOWN_MUTATION_TYPE_EXCEPTION = 'Unknown mutation type: ';
        this.$READ_ONLY_EXCEPTION = 'This model is ReadOnly. Elements are not modifiable.';
        this.$LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION = 'The list in parameter of the setter cannot be null. Use removeAll to empty a collection.';
        this.$LOADER_XMI_LOCAL_NAME = 'type';
        this.$LOADER_XMI_XSI = 'xsi';
        this.$KMFQL_CONTAINED = 'contained';
        this.$org_kevoree_Instance = 'org.kevoree.Instance';
        this.$Ref_superTypes = 'superTypes';
        this.$Ref_ports = 'ports';
        this.$org_kevoree_NodeNetwork = 'org.kevoree.NodeNetwork';
        this.$org_kevoree_TypedElement = 'org.kevoree.TypedElement';
        this.$Ref_hub = 'hub';
        this.$Ref_defaultValues = 'defaultValues';
        this.$Ref_dataTypes = 'dataTypes';
        this.$Att_interfaceService = 'interfaceService';
        this.$Att_factoryBean = 'factoryBean';
        this.$Ref_port = 'port';
        this.$Ref_returnType = 'returnType';
        this.$CN_AdaptationPrimitiveType = 'AdaptationPrimitiveType';
        this.$CN_Dictionary = 'Dictionary';
        this.$Ref_portTypeRef = 'portTypeRef';
        this.$CN_ContainerRoot = 'ContainerRoot';
        this.$CN_Operation = 'Operation';
        this.$CN_PortType = 'PortType';
        this.$Att_networkType = 'networkType';
        this.$Ref_values = 'values';
        this.$Ref_initBy = 'initBy';
        this.$Ref_link = 'link';
        this.$org_kevoree_ContainerRoot = 'org.kevoree.ContainerRoot';
        this.$CN_Group = 'Group';
        this.$Ref_hosts = 'hosts';
        this.$org_kevoree_MBinding = 'org.kevoree.MBinding';
        this.$Ref_subTypes = 'subTypes';
        this.$Ref_groups = 'groups';
        this.$org_kevoree_Group = 'org.kevoree.Group';
        this.$Att_type = 'type';
        this.$CN_TypedElement = 'TypedElement';
        this.$Ref_dictionary = 'dictionary';
        this.$Att_updateMethod = 'updateMethod';
        this.$Ref_integrationPatterns = 'integrationPatterns';
        this.$org_kevoree_DeployUnit = 'org.kevoree.DeployUnit';
        this.$Att_unitName = 'unitName';
        this.$Ref_hubs = 'hubs';
        this.$Ref_parent = 'parent';
        this.$Ref_mappings = 'mappings';
        this.$Ref_attributes = 'attributes';
        this.$Att_hashcode = 'hashcode';
        this.$Att_lowerFragments = 'lowerFragments';
        this.$Ref_targetNodeType = 'targetNodeType';
        this.$Att_datatype = 'datatype';
        this.$Ref_type = 'type';
        this.$org_kevoree_LifeCycleTypeDefinition = 'org.kevoree.LifeCycleTypeDefinition';
        this.$org_kevoree_AdaptationPrimitiveType = 'org.kevoree.AdaptationPrimitiveType';
        this.$Att_version = 'version';
        this.$CN_Namespace = 'Namespace';
        this.$org_kevoree_ContainerNode = 'org.kevoree.ContainerNode';
        this.$Ref_components = 'components';
        this.$org_kevoree_AdaptationPrimitiveTypeRef = 'org.kevoree.AdaptationPrimitiveTypeRef';
        this.$Att_stopMethod = 'stopMethod';
        this.$CN_ExtraFonctionalProperty = 'ExtraFonctionalProperty';
        this.$Ref_childs = 'childs';
        this.$CN_ChannelType = 'ChannelType';
        this.$CN_GroupType = 'GroupType';
        this.$Ref_typeDefinitions = 'typeDefinitions';
        this.$Ref_genericTypes = 'genericTypes';
        this.$CN_CompositeType = 'CompositeType';
        this.$Ref_requiredLibs = 'requiredLibs';
        this.$CN_PortTypeRef = 'PortTypeRef';
        this.$Att_maxTime = 'maxTime';
        this.$org_kevoree_DictionaryValue = 'org.kevoree.DictionaryValue';
        this.$Ref_units = 'units';
        this.$CN_DeployUnit = 'DeployUnit';
        this.$org_kevoree_NodeLink = 'org.kevoree.NodeLink';
        this.$org_kevoree_Parameter = 'org.kevoree.Parameter';
        this.$org_kevoree_Repository = 'org.kevoree.Repository';
        this.$CN_NamedElement = 'NamedElement';
        this.$Att_serviceMethodName = 'serviceMethodName';
        this.$CN_Instance = 'Instance';
        this.$Ref_networkProperties = 'networkProperties';
        this.$CN_AdaptationPrimitiveTypeRef = 'AdaptationPrimitiveTypeRef';
        this.$Att_name = 'name';
        this.$CN_Repository = 'Repository';
        this.$CN_ComponentType = 'ComponentType';
        this.$Att_order = 'order';
        this.$Att_startMethod = 'startMethod';
        this.$Att_lowerBindings = 'lowerBindings';
        this.$org_kevoree_CompositeType = 'org.kevoree.CompositeType';
        this.$org_kevoree_GroupType = 'org.kevoree.GroupType';
        this.$org_kevoree_Operation = 'org.kevoree.Operation';
        this.$CN_Port = 'Port';
        this.$Att_optional = 'optional';
        this.$Ref_targetNode = 'targetNode';
        this.$Ref_attribute = 'attribute';
        this.$Att_metaData = 'metaData';
        this.$Att_beanMethodName = 'beanMethodName';
        this.$org_kevoree_TypeDefinition = 'org.kevoree.TypeDefinition';
        this.$Ref_target = 'target';
        this.$org_kevoree_TypeLibrary = 'org.kevoree.TypeLibrary';
        this.$Att_paramTypes = 'paramTypes';
        this.$CN_MBinding = 'MBinding';
        this.$Att_noDependency = 'noDependency';
        this.$CN_NodeLink = 'NodeLink';
        this.$CN_PortTypeMapping = 'PortTypeMapping';
        this.$Ref_provided = 'provided';
        this.$org_kevoree_PortTypeMapping = 'org.kevoree.PortTypeMapping';
        this.$Ref_dictionaryType = 'dictionaryType';
        this.$CN_ComponentInstance = 'ComponentInstance';
        this.$Att_upperBindings = 'upperBindings';
        this.$Ref_host = 'host';
        this.$CN_TypeLibrary = 'TypeLibrary';
        this.$Ref_adaptationPrimitiveTypes = 'adaptationPrimitiveTypes';
        this.$Att_url = 'url';
        this.$Ref_namespace = 'namespace';
        this.$org_kevoree_NodeType = 'org.kevoree.NodeType';
        this.$Ref_managedPrimitiveTypes = 'managedPrimitiveTypes';
        this.$CN_LifeCycleTypeDefinition = 'LifeCycleTypeDefinition';
        this.$CN_ServicePortType = 'ServicePortType';
        this.$CN_NodeNetwork = 'NodeNetwork';
        this.$Att_state = 'state';
        this.$Att_fragmentDependant = 'fragmentDependant';
        this.$org_kevoree_ServicePortType = 'org.kevoree.ServicePortType';
        this.$org_kevoree_PortType = 'org.kevoree.PortType';
        this.$CN_MessagePortType = 'MessagePortType';
        this.$Ref_operations = 'operations';
        this.$CN_DictionaryAttribute = 'DictionaryAttribute';
        this.$Att_generated_KMF_ID = 'generated_KMF_ID';
        this.$org_kevoree_NamedElement = 'org.kevoree.NamedElement';
        this.$CN_TypeDefinition = 'TypeDefinition';
        this.$org_kevoree_ComponentType = 'org.kevoree.ComponentType';
        this.$Ref_mBindings = 'mBindings';
        this.$Ref_subNodes = 'subNodes';
        this.$Ref_nodes = 'nodes';
        this.$org_kevoree_ChannelType = 'org.kevoree.ChannelType';
        this.$Ref_nodeNetworks = 'nodeNetworks';
        this.$Ref_parameters = 'parameters';
        this.$Ref_portTypes = 'portTypes';
        this.$Att_estimatedRate = 'estimatedRate';
        this.$Att_value = 'value';
        this.$org_kevoree_NetworkProperty = 'org.kevoree.NetworkProperty';
        this.$org_kevoree_Port = 'org.kevoree.Port';
        this.$Ref_managedPrimitiveTypeRefs = 'managedPrimitiveTypeRefs';
        this.$org_kevoree_ComponentInstance = 'org.kevoree.ComponentInstance';
        this.$org_kevoree_IntegrationPattern = 'org.kevoree.IntegrationPattern';
        this.$org_kevoree_DictionaryAttribute = 'org.kevoree.DictionaryAttribute';
        this.$Ref_wires = 'wires';
        this.$org_kevoree_Namespace = 'org.kevoree.Namespace';
        this.$Att_nature = 'nature';
        this.$Ref_typeDefinition = 'typeDefinition';
        this.$org_kevoree_Channel = 'org.kevoree.Channel';
        this.$Ref_deployUnits = 'deployUnits';
        this.$org_kevoree_Wire = 'org.kevoree.Wire';
        this.$org_kevoree_Dictionary = 'org.kevoree.Dictionary';
        this.$Att_synchrone = 'synchrone';
        this.$CN_Wire = 'Wire';
        this.$Ref_repositories = 'repositories';
        this.$Ref_required = 'required';
        this.$org_kevoree_ExtraFonctionalProperty = 'org.kevoree.ExtraFonctionalProperty';
        this.$Att_lastCheck = 'lastCheck';
        this.$Ref_libraries = 'libraries';
        this.$Att_upperFragments = 'upperFragments';
        this.$CN_IntegrationPattern = 'IntegrationPattern';
        this.$CN_ContainerNode = 'ContainerNode';
        this.$Att_groupName = 'groupName';
        this.$CN_Parameter = 'Parameter';
        this.$CN_DictionaryValue = 'DictionaryValue';
        this.$org_kevoree_PortTypeRef = 'org.kevoree.PortTypeRef';
        this.$Ref_filters = 'filters';
        this.$CN_NetworkProperty = 'NetworkProperty';
        this.$org_kevoree_DictionaryType = 'org.kevoree.DictionaryType';
        this.$CN_NodeType = 'NodeType';
        this.$Att_bean = 'bean';
        this.$CN_Channel = 'Channel';
        this.$Ref_bindings = 'bindings';
        this.$Ref_ref = 'ref';
        this.$CN_DictionaryType = 'DictionaryType';
        this.$Ref_extraFonctionalProperties = 'extraFonctionalProperties';
        this.$org_kevoree_MessagePortType = 'org.kevoree.MessagePortType';
      },
      get_UNKNOWN_MUTATION_TYPE_EXCEPTION: function () {
        return this.$UNKNOWN_MUTATION_TYPE_EXCEPTION;
      },
      get_READ_ONLY_EXCEPTION: function () {
        return this.$READ_ONLY_EXCEPTION;
      },
      get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION: function () {
        return this.$LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION;
      },
      get_LOADER_XMI_LOCAL_NAME: function () {
        return this.$LOADER_XMI_LOCAL_NAME;
      },
      get_LOADER_XMI_XSI: function () {
        return this.$LOADER_XMI_XSI;
      },
      get_KMFQL_CONTAINED: function () {
        return this.$KMFQL_CONTAINED;
      },
      get_org_kevoree_Instance: function () {
        return this.$org_kevoree_Instance;
      },
      get_Ref_superTypes: function () {
        return this.$Ref_superTypes;
      },
      get_Ref_ports: function () {
        return this.$Ref_ports;
      },
      get_org_kevoree_NodeNetwork: function () {
        return this.$org_kevoree_NodeNetwork;
      },
      get_org_kevoree_TypedElement: function () {
        return this.$org_kevoree_TypedElement;
      },
      get_Ref_hub: function () {
        return this.$Ref_hub;
      },
      get_Ref_defaultValues: function () {
        return this.$Ref_defaultValues;
      },
      get_Ref_dataTypes: function () {
        return this.$Ref_dataTypes;
      },
      get_Att_interfaceService: function () {
        return this.$Att_interfaceService;
      },
      get_Att_factoryBean: function () {
        return this.$Att_factoryBean;
      },
      get_Ref_port: function () {
        return this.$Ref_port;
      },
      get_Ref_returnType: function () {
        return this.$Ref_returnType;
      },
      get_CN_AdaptationPrimitiveType: function () {
        return this.$CN_AdaptationPrimitiveType;
      },
      get_CN_Dictionary: function () {
        return this.$CN_Dictionary;
      },
      get_Ref_portTypeRef: function () {
        return this.$Ref_portTypeRef;
      },
      get_CN_ContainerRoot: function () {
        return this.$CN_ContainerRoot;
      },
      get_CN_Operation: function () {
        return this.$CN_Operation;
      },
      get_CN_PortType: function () {
        return this.$CN_PortType;
      },
      get_Att_networkType: function () {
        return this.$Att_networkType;
      },
      get_Ref_values: function () {
        return this.$Ref_values;
      },
      get_Ref_initBy: function () {
        return this.$Ref_initBy;
      },
      get_Ref_link: function () {
        return this.$Ref_link;
      },
      get_org_kevoree_ContainerRoot: function () {
        return this.$org_kevoree_ContainerRoot;
      },
      get_CN_Group: function () {
        return this.$CN_Group;
      },
      get_Ref_hosts: function () {
        return this.$Ref_hosts;
      },
      get_org_kevoree_MBinding: function () {
        return this.$org_kevoree_MBinding;
      },
      get_Ref_subTypes: function () {
        return this.$Ref_subTypes;
      },
      get_Ref_groups: function () {
        return this.$Ref_groups;
      },
      get_org_kevoree_Group: function () {
        return this.$org_kevoree_Group;
      },
      get_Att_type: function () {
        return this.$Att_type;
      },
      get_CN_TypedElement: function () {
        return this.$CN_TypedElement;
      },
      get_Ref_dictionary: function () {
        return this.$Ref_dictionary;
      },
      get_Att_updateMethod: function () {
        return this.$Att_updateMethod;
      },
      get_Ref_integrationPatterns: function () {
        return this.$Ref_integrationPatterns;
      },
      get_org_kevoree_DeployUnit: function () {
        return this.$org_kevoree_DeployUnit;
      },
      get_Att_unitName: function () {
        return this.$Att_unitName;
      },
      get_Ref_hubs: function () {
        return this.$Ref_hubs;
      },
      get_Ref_parent: function () {
        return this.$Ref_parent;
      },
      get_Ref_mappings: function () {
        return this.$Ref_mappings;
      },
      get_Ref_attributes: function () {
        return this.$Ref_attributes;
      },
      get_Att_hashcode: function () {
        return this.$Att_hashcode;
      },
      get_Att_lowerFragments: function () {
        return this.$Att_lowerFragments;
      },
      get_Ref_targetNodeType: function () {
        return this.$Ref_targetNodeType;
      },
      get_Att_datatype: function () {
        return this.$Att_datatype;
      },
      get_Ref_type: function () {
        return this.$Ref_type;
      },
      get_org_kevoree_LifeCycleTypeDefinition: function () {
        return this.$org_kevoree_LifeCycleTypeDefinition;
      },
      get_org_kevoree_AdaptationPrimitiveType: function () {
        return this.$org_kevoree_AdaptationPrimitiveType;
      },
      get_Att_version: function () {
        return this.$Att_version;
      },
      get_CN_Namespace: function () {
        return this.$CN_Namespace;
      },
      get_org_kevoree_ContainerNode: function () {
        return this.$org_kevoree_ContainerNode;
      },
      get_Ref_components: function () {
        return this.$Ref_components;
      },
      get_org_kevoree_AdaptationPrimitiveTypeRef: function () {
        return this.$org_kevoree_AdaptationPrimitiveTypeRef;
      },
      get_Att_stopMethod: function () {
        return this.$Att_stopMethod;
      },
      get_CN_ExtraFonctionalProperty: function () {
        return this.$CN_ExtraFonctionalProperty;
      },
      get_Ref_childs: function () {
        return this.$Ref_childs;
      },
      get_CN_ChannelType: function () {
        return this.$CN_ChannelType;
      },
      get_CN_GroupType: function () {
        return this.$CN_GroupType;
      },
      get_Ref_typeDefinitions: function () {
        return this.$Ref_typeDefinitions;
      },
      get_Ref_genericTypes: function () {
        return this.$Ref_genericTypes;
      },
      get_CN_CompositeType: function () {
        return this.$CN_CompositeType;
      },
      get_Ref_requiredLibs: function () {
        return this.$Ref_requiredLibs;
      },
      get_CN_PortTypeRef: function () {
        return this.$CN_PortTypeRef;
      },
      get_Att_maxTime: function () {
        return this.$Att_maxTime;
      },
      get_org_kevoree_DictionaryValue: function () {
        return this.$org_kevoree_DictionaryValue;
      },
      get_Ref_units: function () {
        return this.$Ref_units;
      },
      get_CN_DeployUnit: function () {
        return this.$CN_DeployUnit;
      },
      get_org_kevoree_NodeLink: function () {
        return this.$org_kevoree_NodeLink;
      },
      get_org_kevoree_Parameter: function () {
        return this.$org_kevoree_Parameter;
      },
      get_org_kevoree_Repository: function () {
        return this.$org_kevoree_Repository;
      },
      get_CN_NamedElement: function () {
        return this.$CN_NamedElement;
      },
      get_Att_serviceMethodName: function () {
        return this.$Att_serviceMethodName;
      },
      get_CN_Instance: function () {
        return this.$CN_Instance;
      },
      get_Ref_networkProperties: function () {
        return this.$Ref_networkProperties;
      },
      get_CN_AdaptationPrimitiveTypeRef: function () {
        return this.$CN_AdaptationPrimitiveTypeRef;
      },
      get_Att_name: function () {
        return this.$Att_name;
      },
      get_CN_Repository: function () {
        return this.$CN_Repository;
      },
      get_CN_ComponentType: function () {
        return this.$CN_ComponentType;
      },
      get_Att_order: function () {
        return this.$Att_order;
      },
      get_Att_startMethod: function () {
        return this.$Att_startMethod;
      },
      get_Att_lowerBindings: function () {
        return this.$Att_lowerBindings;
      },
      get_org_kevoree_CompositeType: function () {
        return this.$org_kevoree_CompositeType;
      },
      get_org_kevoree_GroupType: function () {
        return this.$org_kevoree_GroupType;
      },
      get_org_kevoree_Operation: function () {
        return this.$org_kevoree_Operation;
      },
      get_CN_Port: function () {
        return this.$CN_Port;
      },
      get_Att_optional: function () {
        return this.$Att_optional;
      },
      get_Ref_targetNode: function () {
        return this.$Ref_targetNode;
      },
      get_Ref_attribute: function () {
        return this.$Ref_attribute;
      },
      get_Att_metaData: function () {
        return this.$Att_metaData;
      },
      get_Att_beanMethodName: function () {
        return this.$Att_beanMethodName;
      },
      get_org_kevoree_TypeDefinition: function () {
        return this.$org_kevoree_TypeDefinition;
      },
      get_Ref_target: function () {
        return this.$Ref_target;
      },
      get_org_kevoree_TypeLibrary: function () {
        return this.$org_kevoree_TypeLibrary;
      },
      get_Att_paramTypes: function () {
        return this.$Att_paramTypes;
      },
      get_CN_MBinding: function () {
        return this.$CN_MBinding;
      },
      get_Att_noDependency: function () {
        return this.$Att_noDependency;
      },
      get_CN_NodeLink: function () {
        return this.$CN_NodeLink;
      },
      get_CN_PortTypeMapping: function () {
        return this.$CN_PortTypeMapping;
      },
      get_Ref_provided: function () {
        return this.$Ref_provided;
      },
      get_org_kevoree_PortTypeMapping: function () {
        return this.$org_kevoree_PortTypeMapping;
      },
      get_Ref_dictionaryType: function () {
        return this.$Ref_dictionaryType;
      },
      get_CN_ComponentInstance: function () {
        return this.$CN_ComponentInstance;
      },
      get_Att_upperBindings: function () {
        return this.$Att_upperBindings;
      },
      get_Ref_host: function () {
        return this.$Ref_host;
      },
      get_CN_TypeLibrary: function () {
        return this.$CN_TypeLibrary;
      },
      get_Ref_adaptationPrimitiveTypes: function () {
        return this.$Ref_adaptationPrimitiveTypes;
      },
      get_Att_url: function () {
        return this.$Att_url;
      },
      get_Ref_namespace: function () {
        return this.$Ref_namespace;
      },
      get_org_kevoree_NodeType: function () {
        return this.$org_kevoree_NodeType;
      },
      get_Ref_managedPrimitiveTypes: function () {
        return this.$Ref_managedPrimitiveTypes;
      },
      get_CN_LifeCycleTypeDefinition: function () {
        return this.$CN_LifeCycleTypeDefinition;
      },
      get_CN_ServicePortType: function () {
        return this.$CN_ServicePortType;
      },
      get_CN_NodeNetwork: function () {
        return this.$CN_NodeNetwork;
      },
      get_Att_state: function () {
        return this.$Att_state;
      },
      get_Att_fragmentDependant: function () {
        return this.$Att_fragmentDependant;
      },
      get_org_kevoree_ServicePortType: function () {
        return this.$org_kevoree_ServicePortType;
      },
      get_org_kevoree_PortType: function () {
        return this.$org_kevoree_PortType;
      },
      get_CN_MessagePortType: function () {
        return this.$CN_MessagePortType;
      },
      get_Ref_operations: function () {
        return this.$Ref_operations;
      },
      get_CN_DictionaryAttribute: function () {
        return this.$CN_DictionaryAttribute;
      },
      get_Att_generated_KMF_ID: function () {
        return this.$Att_generated_KMF_ID;
      },
      get_org_kevoree_NamedElement: function () {
        return this.$org_kevoree_NamedElement;
      },
      get_CN_TypeDefinition: function () {
        return this.$CN_TypeDefinition;
      },
      get_org_kevoree_ComponentType: function () {
        return this.$org_kevoree_ComponentType;
      },
      get_Ref_mBindings: function () {
        return this.$Ref_mBindings;
      },
      get_Ref_subNodes: function () {
        return this.$Ref_subNodes;
      },
      get_Ref_nodes: function () {
        return this.$Ref_nodes;
      },
      get_org_kevoree_ChannelType: function () {
        return this.$org_kevoree_ChannelType;
      },
      get_Ref_nodeNetworks: function () {
        return this.$Ref_nodeNetworks;
      },
      get_Ref_parameters: function () {
        return this.$Ref_parameters;
      },
      get_Ref_portTypes: function () {
        return this.$Ref_portTypes;
      },
      get_Att_estimatedRate: function () {
        return this.$Att_estimatedRate;
      },
      get_Att_value: function () {
        return this.$Att_value;
      },
      get_org_kevoree_NetworkProperty: function () {
        return this.$org_kevoree_NetworkProperty;
      },
      get_org_kevoree_Port: function () {
        return this.$org_kevoree_Port;
      },
      get_Ref_managedPrimitiveTypeRefs: function () {
        return this.$Ref_managedPrimitiveTypeRefs;
      },
      get_org_kevoree_ComponentInstance: function () {
        return this.$org_kevoree_ComponentInstance;
      },
      get_org_kevoree_IntegrationPattern: function () {
        return this.$org_kevoree_IntegrationPattern;
      },
      get_org_kevoree_DictionaryAttribute: function () {
        return this.$org_kevoree_DictionaryAttribute;
      },
      get_Ref_wires: function () {
        return this.$Ref_wires;
      },
      get_org_kevoree_Namespace: function () {
        return this.$org_kevoree_Namespace;
      },
      get_Att_nature: function () {
        return this.$Att_nature;
      },
      get_Ref_typeDefinition: function () {
        return this.$Ref_typeDefinition;
      },
      get_org_kevoree_Channel: function () {
        return this.$org_kevoree_Channel;
      },
      get_Ref_deployUnits: function () {
        return this.$Ref_deployUnits;
      },
      get_org_kevoree_Wire: function () {
        return this.$org_kevoree_Wire;
      },
      get_org_kevoree_Dictionary: function () {
        return this.$org_kevoree_Dictionary;
      },
      get_Att_synchrone: function () {
        return this.$Att_synchrone;
      },
      get_CN_Wire: function () {
        return this.$CN_Wire;
      },
      get_Ref_repositories: function () {
        return this.$Ref_repositories;
      },
      get_Ref_required: function () {
        return this.$Ref_required;
      },
      get_org_kevoree_ExtraFonctionalProperty: function () {
        return this.$org_kevoree_ExtraFonctionalProperty;
      },
      get_Att_lastCheck: function () {
        return this.$Att_lastCheck;
      },
      get_Ref_libraries: function () {
        return this.$Ref_libraries;
      },
      get_Att_upperFragments: function () {
        return this.$Att_upperFragments;
      },
      get_CN_IntegrationPattern: function () {
        return this.$CN_IntegrationPattern;
      },
      get_CN_ContainerNode: function () {
        return this.$CN_ContainerNode;
      },
      get_Att_groupName: function () {
        return this.$Att_groupName;
      },
      get_CN_Parameter: function () {
        return this.$CN_Parameter;
      },
      get_CN_DictionaryValue: function () {
        return this.$CN_DictionaryValue;
      },
      get_org_kevoree_PortTypeRef: function () {
        return this.$org_kevoree_PortTypeRef;
      },
      get_Ref_filters: function () {
        return this.$Ref_filters;
      },
      get_CN_NetworkProperty: function () {
        return this.$CN_NetworkProperty;
      },
      get_org_kevoree_DictionaryType: function () {
        return this.$org_kevoree_DictionaryType;
      },
      get_CN_NodeType: function () {
        return this.$CN_NodeType;
      },
      get_Att_bean: function () {
        return this.$Att_bean;
      },
      get_CN_Channel: function () {
        return this.$CN_Channel;
      },
      get_Ref_bindings: function () {
        return this.$Ref_bindings;
      },
      get_Ref_ref: function () {
        return this.$Ref_ref;
      },
      get_CN_DictionaryType: function () {
        return this.$CN_DictionaryType;
      },
      get_Ref_extraFonctionalProperties: function () {
        return this.$Ref_extraFonctionalProperties;
      },
      get_org_kevoree_MessagePortType: function () {
        return this.$org_kevoree_MessagePortType;
      }
    });
  }.call(_.org.kevoree.util));
  (function () {
    this.$asserter = new _.kotlin.test.QUnitAsserter();
  }.call(_.kotlin.test));
  (function () {
    this.State = Kotlin.createObject(null, {
      initialize: function () {
        this.$Ready = 0;
        this.$NotReady = 1;
        this.$Done = 2;
        this.$Failed = 3;
      },
      get_Ready: function () {
        return this.$Ready;
      },
      get_NotReady: function () {
        return this.$NotReady;
      },
      get_Done: function () {
        return this.$Done;
      },
      get_Failed: function () {
        return this.$Failed;
      }
    });
  }.call(_.kotlin.support));
  Kotlin.defineModule('org.kevoree.modeling.sample.kevoree.event.js', _);
}());

    return Kotlin.modules['org.kevoree.modeling.sample.kevoree.event.js'];
  }
);